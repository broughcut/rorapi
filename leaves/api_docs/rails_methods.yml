--- 
- :tinyuri: http://tinyurl.com/4a32uv
  :path: 
  - ActiveSupport
  - Duration
  :method: +
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Duration.html#M000771
- :tinyuri: http://tinyurl.com/5bpsud
  :path: 
  - Builder
  - CSS
  :method: +
  :description: |+
    
        +(part)
    
    
         # File vendor/rails/activesupport/lib/active_support/vendor/builder-2.1.2/builder/css.rb, line 108
    108:     def +(part)
    109:       _join_with_op! '+'
    110:       self
    111:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Builder/CSS.html#M000897
- :tinyuri: http://tinyurl.com/3q9n7c
  :path: 
  - ActiveSupport
  - Duration
  :method: "-"
  :description: |+
    
        -(other)
    Subtracts another Duration or a Numeric from
    this Duration. Numeric values are treated as
    seconds.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/duration.rb, line 26
    26:     def -(other)
    27:       self + (-other)
    28:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Duration.html#M000772
- :tinyuri: http://tinyurl.com/4ljdcb
  :path: 
  - Builder
  - XmlBase
  :method: "<<"
  :description: |+
    
        <<(text)
    Append text to the output target without escaping any markup. May be used
    within the markup brackets as:
    
    
      builder.p { |x| x << "<br/>HI" }   #=>  <p><br/>HI</p>
    
    
    This is useful when using non-builder enabled software that generates
    strings. Just insert the string directly into the builder without changing
    the inserted markup.
    
    
    It is also useful for stacking builder objects. Builders only use
    << to append to the target, so by supporting this
    method/operation builders can use other builders as their targets.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/vendor/builder-2.1.2/builder/xmlbase.rb, line 97
    97:     def <<(text)
    98:       _text(text)
    99:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Builder/XmlBase.html#M000888
- :tinyuri: http://tinyurl.com/2yqgvy
  :path: 
  - ActionView
  - Helpers
  - PrototypeHelper
  - JavaScriptGenerator
  - GeneratorMethods
  :method: "<<"
  :description: |+
    
        <<(javascript)
    Writes raw JavaScript to the page.
    
    
    Example:
    
    
     page << "alert('JavaScript with Prototype.');"
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/prototype_helper.rb, line 889
    889:           def <<(javascript)
    890:             @lines << javascript
    891:           end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#M000988
- :tinyuri: http://tinyurl.com/47ez9s
  :path: 
  - ActiveSupport
  - Multibyte
  - Chars
  :method: <=>
  :description: |+
    
        <=>(other)
    Returns -1, 0 or +1 depending on whether the Chars
    object is to be sorted before, equal or after the object on the right side
    of the operation. It accepts any object that implements to_s. See
    String.<=> for more details.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/multibyte/chars.rb, line 58
    58:     def <=>(other); @string <=> other.to_s; end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Chars.html#M000550
- :tinyuri: http://tinyurl.com/52o8er
  :path: 
  - TimeZone
  :method: <=>
  :description: 
  :uri: http://api.rubyonrails.org/classes/TimeZone.html#M000022
- :tinyuri: http://tinyurl.com/3heue2
  :path: 
  - ActiveRecord
  - Base
  :method: ==
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001455
- :tinyuri: http://tinyurl.com/3vjpgz
  :path: 
  - ActiveSupport
  - Duration
  :method: ==
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Duration.html#M000773
- :tinyuri: http://tinyurl.com/4qtflh
  :path: 
  - ActiveResource
  - Response
  :method: ==
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Response.html#M000824
- :tinyuri: http://tinyurl.com/3ohbfa
  :path: 
  - ActiveResource
  - Base
  :method: ==
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Base.html#M000844
- :tinyuri: http://tinyurl.com/45m6hq
  :path: 
  - ActiveRecord
  - Reflection
  - MacroReflection
  :method: ==
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Reflection/MacroReflection.html#M001132
- :tinyuri: http://tinyurl.com/5xvtmp
  :path: 
  - ActiveResource
  - Request
  :method: ==
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Request.html#M000863
- :tinyuri: http://tinyurl.com/3kwkv6
  :path: 
  - Mime
  - Type
  :method: ==
  :description: 
  :uri: http://api.rubyonrails.org/classes/Mime/Type.html#M001658
- :tinyuri: http://tinyurl.com/424gxm
  :path: 
  - ActiveRecord
  - Base
  :method: ===
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001413
- :tinyuri: http://tinyurl.com/4ue65l
  :path: 
  - Mime
  - Type
  :method: ===
  :description: 
  :uri: http://api.rubyonrails.org/classes/Mime/Type.html#M001657
- :tinyuri: http://tinyurl.com/4nbp4d
  :path: 
  - ActiveSupport
  - Multibyte
  - Chars
  :method: =~
  :description: |+
    
        =~(other)
    Like String.=~ only it returns the character offset (in codepoints) instead
    of the byte offset.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/multibyte/chars.rb, line 70
    70:     def =~(other)
    71:       handler.translate_offset(@string, @string =~ other)
    72:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Chars.html#M000553
- :tinyuri: http://tinyurl.com/54gk6t
  :path: 
  - Builder
  - CSS
  :method: ">"
  :description: |+
    
        >(part)
    
    
         # File vendor/rails/activesupport/lib/active_support/vendor/builder-2.1.2/builder/css.rb, line 118
    118:     def >(part)
    119:       _join_with_op! '>'
    120:       self
    121:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Builder/CSS.html#M000899
- :tinyuri: http://tinyurl.com/3ej327
  :path: 
  - Builder
  - CSS
  :method: ">>"
  :description: |+
    
        >>(part)
    
    
         # File vendor/rails/activesupport/lib/active_support/vendor/builder-2.1.2/builder/css.rb, line 113
    113:     def >>(part)
    114:       _join_with_op! ''
    115:       self
    116:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Builder/CSS.html#M000898
- :tinyuri: http://tinyurl.com/3snv4n
  :path: 
  - ActionView
  - Helpers
  - PrototypeHelper
  - JavaScriptGenerator
  - GeneratorMethods
  :method: "[]"
  :description: |+
    
        [](id)
    Returns a element reference by finding it through id in the DOM.
    This element can then be used for further method calls. Examples:
    
    
      page['blank_slate']                  # => $('blank_slate');
      page['blank_slate'].show             # => $('blank_slate').show();
      page['blank_slate'].show('first').up # => $('blank_slate').show('first').up();
    
    
    You can also pass in a record, which will use
    ActionController::RecordIdentifier.dom_id to lookup the correct id:
    
    
      page[@post]     # => $('post_45')
      page[Post.new]  # => $('new_post')
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/prototype_helper.rb, line 660
    660:           def [](id)
    661:             case id
    662:               when String, Symbol, NilClass
    663:                 JavaScriptElementProxy.new(self, id)
    664:               else
    665:                 JavaScriptElementProxy.new(self, ActionController::RecordIdentifier.dom_id(id))
    666:             end
    667:           end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#M000974
- :tinyuri: http://tinyurl.com/3llh3f
  :path: 
  - ActiveRecord
  - Errors
  :method: "[]"
  :description: |
    
        [](attribute)
    Alias for on
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Errors.html#M001351
- :tinyuri: http://tinyurl.com/yvovjt
  :path: 
  - ActiveRecord
  - Base
  :method: "[]"
  :description: |+
    
        [](attr_name)
    Returns the value of the attribute identified by attr_name after
    it has been typecast (for example, "2004-12-12" in a data column
    is cast to a date object, like Date.new(2004, 12, 12)). (Alias for the
    protected read_attribute method).
    
    
    
          # File vendor/rails/activerecord/lib/active_record/base.rb, line 2094
    2094:       def [](attr_name)
    2095:         read_attribute(attr_name)
    2096:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001445
- :tinyuri: http://tinyurl.com/4gv78e
  :path: 
  - ActiveResource
  - Formats
  :method: "[]"
  :description: |+
    
        [](mime_type_reference)
    Lookup the format class from a mime type reference symbol. Example:
    
    
      ActiveResource::Formats[:xml]  # => ActiveResource::Formats::XmlFormat
      ActiveResource::Formats[:json] # => ActiveResource::Formats::JsonFormat
    
    
    
       # File vendor/rails/activeresource/lib/active_resource/formats.rb, line 7
    7:     def self.[](mime_type_reference)
    8:       ActiveResource::Formats.const_get(mime_type_reference.to_s.camelize + "Format")
    9:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Formats.html#M000788
- :tinyuri: http://tinyurl.com/3z3qjb
  :path: 
  - ActiveResource
  - Response
  :method: "[]"
  :description: |+
    
        [](key)
    
    
         # File vendor/rails/activeresource/lib/active_resource/http_mock.rb, line 125
    125:     def [](key)
    126:       headers[key]
    127:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Response.html#M000822
- :tinyuri: http://tinyurl.com/4ddgoa
  :path: 
  - TimeZone
  :method: "[]"
  :description: 
  :uri: http://api.rubyonrails.org/classes/TimeZone.html#M000027
- :tinyuri: http://tinyurl.com/3p67kj
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - TableDefinition
  :method: "[]"
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#M001221
- :tinyuri: http://tinyurl.com/4kfupz
  :path: 
  - ActiveResource
  - Errors
  :method: "[]"
  :description: |
    
        [](attribute)
    Alias for on
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Errors.html#M000804
- :tinyuri: http://tinyurl.com/5ykpsy
  :path: 
  - HashWithIndifferentAccess
  :method: "[]="
  :description: |+
    
        []=(key, value)
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/hash/indifferent_access.rb, line 25
    25:   def []=(key, value)
    26:     regular_writer(convert_key(key), convert_value(value))
    27:   end
    
    
  :uri: http://api.rubyonrails.org/classes/HashWithIndifferentAccess.html#M000064
- :tinyuri: http://tinyurl.com/4bl4w8
  :path: 
  - ActiveSupport
  - Multibyte
  - Handlers
  - UTF8Handler
  :method: "[]="
  :description: "\n  \n    []=(str, *args)\n  \n  \n  \n\
    Works just like the indexed replace method on string, except instead of\n\
    byte offsets you specify character offsets.\n\n\n\
    158:       def []=(str, *args)\n\
    159:         replace_by = args.pop\n\
    160:         # Indexed replace with regular expressions already works\n\
    161:         return str[*args] = replace_by if args.first.is_a?(Regexp)\n\
    162:         result = u_unpack(str)\n\
    163:         if args[0].is_a?(Fixnum)\n\
    164:           raise IndexError, \"index #{args[0]} out of string\" if args[0] >= result.length\n\
    165:           min = args[0]\n\
    166:           max = args[1].nil? ? min : (min + args[1] - 1)\n\
    167:           range = Range.new(min, max)\n\
    168:           replace_by = [replace_by].pack('U') if replace_by.is_a?(Fixnum)\n\
    169:         elsif args.first.is_a?(Range)\n\
    170:           raise RangeError, \"#{args[0]} out of range\" if args[0].min >= result.length\n\
    171:           range = args[0]\n\
    172:         else\n\
    173:           needle = args[0].to_s\n\
    174:           min = index(str, needle)\n\
    175:           max = min + length(needle) - 1\n\
    176:           range = Range.new(min, max)\n\
    177:         end\n\
    178:         result[range] = u_unpack(replace_by)\n\
    179:         str.replace(result.pack('U*'))\n\
    180:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Handlers/UTF8Handler.html#M000517
- :tinyuri: http://tinyurl.com/3ug9tp
  :path: 
  - ActiveRecord
  - Base
  :method: "[]="
  :description: |+
    
        []=(attr_name, value)
    Updates the attribute identified by attr_name with the specified
    value. (Alias for the protected write_attribute method).
    
    
    
          # File vendor/rails/activerecord/lib/active_record/base.rb, line 2100
    2100:       def []=(attr_name, value)
    2101:         write_attribute(attr_name, value)
    2102:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001446
- :tinyuri: http://tinyurl.com/3ndssh
  :path: 
  - ActiveResource
  - Response
  :method: "[]="
  :description: |+
    
        []=(key, value)
    
    
         # File vendor/rails/activeresource/lib/active_resource/http_mock.rb, line 129
    129:     def []=(key, value)
    130:       headers[key] = value
    131:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Response.html#M000823
- :tinyuri: http://tinyurl.com/4wse2w
  :path: 
  - Builder
  - XmlEvents
  :method: _end_tag
  :description: |+
    
        _end_tag(sym)
    
    
        # File vendor/rails/activesupport/lib/active_support/vendor/builder-2.1.2/builder/xmlevents.rb, line 58
    58:     def _end_tag(sym)
    59:       @target.end_tag(sym)
    60:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Builder/XmlEvents.html#M000911
- :tinyuri: http://tinyurl.com/4yyxdt
  :path: 
  - Builder
  - XmlEvents
  :method: _start_tag
  :description: |+
    
        _start_tag(sym, attrs, end_too=false)
    
    
        # File vendor/rails/activesupport/lib/active_support/vendor/builder-2.1.2/builder/xmlevents.rb, line 53
    53:     def _start_tag(sym, attrs, end_too=false)
    54:       @target.start_tag(sym, attrs)
    55:       _end_tag(sym) if end_too
    56:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Builder/XmlEvents.html#M000910
- :tinyuri: http://tinyurl.com/4m89hk
  :path: 
  - ActiveRecord
  - Base
  :method: abstract_class?
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001415
- :tinyuri: http://tinyurl.com/3ff8v8
  :path: 
  - ActionController
  - AbstractRequest
  :method: accepts
  :description: |+
    
        accepts()
    Returns the accepted MIME type for the request
    
    
    
        # File vendor/rails/actionpack/lib/action_controller/request.rb, line 81
    81:     def accepts
    82:       @accepts ||=
    83:         if @env['HTTP_ACCEPT'].to_s.strip.empty?
    84:           [ content_type, Mime::ALL ].compact # make sure content_type being nil is not included
    85:         else
    86:           Mime::Type.parse(@env['HTTP_ACCEPT'])
    87:         end
    88:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/AbstractRequest.html#M000403
- :tinyuri: http://tinyurl.com/3tk4xo
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - PostgreSQLAdapter
  :method: active?
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#M001253
- :tinyuri: http://tinyurl.com/3mhmwg
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - AbstractAdapter
  :method: active?
  :description: |+
    
        active?()
    Is this connection active and ready to perform queries?
    
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 83
    83:       def active?
    84:         @active != false
    85:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#M001288
- :tinyuri: http://tinyurl.com/3zwwfc
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - MysqlAdapter
  :method: active?
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#M001231
- :tinyuri: http://tinyurl.com/4x4rhs
  :path: 
  - Object
  :method: acts_like?
  :description: |+
    
        acts_like?(duck)
    A duck-type assistant method. For example, ActiveSupport extends Date to
    define an acts_like_date? method, and extends Time to define
    acts_like_time?. As a result, we can do "x.acts_like?(:time)" and
    "x.acts_like?(:date)" to do duck-type-safe comparisons, since
    classes that we want to act like Time simply need to define an
    acts_like_time? method.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/object/misc.rb, line 56
    56:   def acts_like?(duck)
    57:     respond_to? "acts_like_#{duck}?"
    58:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Object.html#M000141
- :tinyuri: http://tinyurl.com/4778j3
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Date
  - Behavior
  :method: acts_like_date?
  :description: |+
    
        acts_like_date?()
    Enable more predictable duck-typing on Date-like classes. See
    Object#acts_like?.
    
    
    
       # File vendor/rails/activesupport/lib/active_support/core_ext/date/behavior.rb, line 7
    7:         def acts_like_date?
    8:           true
    9:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Date/Behavior.html#M000679
- :tinyuri: http://tinyurl.com/4jjoth
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Behavior
  :method: acts_like_time?
  :description: |+
    
        acts_like_time?()
    Enable more predictable duck-typing on Time-like classes. See
    Object#acts_like?.
    
    
    
       # File vendor/rails/activesupport/lib/active_support/core_ext/time/behavior.rb, line 7
    7:         def acts_like_time?
    8:           true
    9:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Behavior.html#M000573
- :tinyuri: http://tinyurl.com/4g2ycd
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - PostgreSQLAdapter
  :method: adapter_name
  :description: "\n  \n    adapter_name()\n  \n  \n  \n\
    Returns \xE2\x80\x98PostgreSQL\xE2\x80\x99 as adapter name for identification\n\
    228:       def adapter_name\n\
    229:         'PostgreSQL'\n\
    230:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#M001251
- :tinyuri: http://tinyurl.com/4u6tet
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - AbstractAdapter
  :method: adapter_name
  :description: |+
    
        adapter_name()
    Returns the human-readable name of the adapter. Use mixed case - one can
    always use downcase if needed.
    
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 37
    37:       def adapter_name
    38:         'Abstract'
    39:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#M001282
- :tinyuri: http://tinyurl.com/3t5hj7
  :path: 
  - ActiveResource
  - Errors
  :method: add
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Errors.html#M000801
- :tinyuri: http://tinyurl.com/4of7o6
  :path: 
  - Repositories
  :method: add
  :description: 
  :uri: http://api.rubyonrails.org/classes/Repositories.html#M000080
- :tinyuri: http://tinyurl.com/3m33hw
  :path: 
  - ActiveSupport
  - BufferedLogger
  :method: add
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/BufferedLogger.html#M000766
- :tinyuri: http://tinyurl.com/437vkf
  :path: 
  - ActiveRecord
  - Errors
  :method: add
  :description: |+
    
        add(attribute, msg = @@default_error_messages[:invalid])
    Adds an error message (msg) to the attribute, which will
    be returned on a call to on(attribute) for the same attribute
    and ensure that this error object returns false when asked if empty?. More than one error can be
    added to the same attribute in which case an array will be
    returned on a call to on(attribute). If no msg is
    supplied, "invalid" is assumed.
    
    
    
        # File vendor/rails/activerecord/lib/active_record/validations.rb, line 64
    64:     def add(attribute, msg = @@default_error_messages[:invalid])
    65:       @errors[attribute.to_s] = [] if @errors[attribute.to_s].nil?
    66:       @errors[attribute.to_s] << msg
    67:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Errors.html#M001346
- :tinyuri: http://tinyurl.com/4vhlpe
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - PostgreSQLAdapter
  :method: add_column
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#M001274
- :tinyuri: http://tinyurl.com/3zzdxs
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - SchemaStatements
  :method: add_column
  :description: |+
    
        add_column(table_name, column_name, type, options = {})
    Adds a new column to the named table. See TableDefinition#column for details
    of the options you can use.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 121
    121:       def add_column(table_name, column_name, type, options = {})
    122:         add_column_sql = "ALTER TABLE #{quote_table_name(table_name)} ADD #{quote_column_name(column_name)} #{type_to_sql(type, options[:limit], options[:precision], options[:scale])}"
    123:         add_column_options!(add_column_sql, options)
    124:         execute(add_column_sql)
    125:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#M001153
- :tinyuri: http://tinyurl.com/4ds35r
  :path: 
  - Rails
  - Generator
  - Options
  :method: add_general_options!
  :description: "\n  \n    add_general_options!(opt)\n  \n  \n  \n\
    Adds general options like -h and\n\
    119:         def add_general_options!(opt)\n\
    120:           opt.separator ''\n\
    121:           opt.separator 'Rails Info:'\n\
    122:           opt.on('-v', '--version', 'Show the Rails version number and quit.')\n\
    123:           opt.on('-h', '--help', 'Show this help message and quit.') { |v| options[:help] = v }\n\
    124: \n\
    125:           opt.separator ''\n\
    126:           opt.separator 'General Options:'\n\
    127: \n\
    128:           opt.on('-p', '--pretend', 'Run but do not make any changes.') { |v| options[:pretend] = v }\n\
    129:           opt.on('-f', '--force', 'Overwrite files that already exist.') { options[:collision] = :force }\n\
    130:           opt.on('-s', '--skip', 'Skip files that already exist.') { options[:collision] = :skip }\n\
    131:           opt.on('-q', '--quiet', 'Suppress normal output.') { |v| options[:quiet] = v }\n\
    132:           opt.on('-t', '--backtrace', 'Debugging: show backtrace on errors.') { |v| options[:backtrace] = v }\n\
    133:           opt.on('-c', '--svn', 'Modify files with subversion. (Note: svn must be in path)') do\n\
    134:             options[:svn] = `svn status`.inject({}) do |opt, e|\n\
    135:               opt[e.chomp[7..-1]] = true\n\
    136:               opt\n\
    137:             end\n\
    138:           end\n\
    139:         end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Options.html#M001484
- :tinyuri: http://tinyurl.com/3pkr23
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - SchemaStatements
  :method: add_index
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#M001158
- :tinyuri: http://tinyurl.com/3dsmd4
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - DatabaseStatements
  :method: add_limit!
  :description: |+
    
        add_limit!(sql, options)
    Alias for add_limit_offset!.
    
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 97
    97:       def add_limit!(sql, options)
    98:         add_limit_offset!(sql, options) if options
    99:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#M001186
- :tinyuri: http://tinyurl.com/46pm4j
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - DatabaseStatements
  :method: add_limit_offset!
  :description: |+
    
        add_limit_offset!(sql, options)
    Appends LIMIT and OFFSET options to an SQL statement.
    This method modifies the sql parameter.
    
    Examples
    
     add_limit_offset!('SELECT * FROM suppliers', {:limit => 10, :offset => 50})
    
    
    generates
    
    
     SELECT * FROM suppliers LIMIT 10 OFFSET 50
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 107
    107:       def add_limit_offset!(sql, options)
    108:         if limit = options[:limit]
    109:           sql << " LIMIT #{limit}"
    110:           if offset = options[:offset]
    111:             sql << " OFFSET #{offset}"
    112:           end
    113:         end
    114:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#M001187
- :tinyuri: http://tinyurl.com/2r4go2
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - DatabaseStatements
  :method: add_lock!
  :description: |+
    
        add_lock!(sql, options)
    Appends a locking clause to an SQL statement. This method modifies
    the sql parameter.
    
    
      # SELECT * FROM suppliers FOR UPDATE
      add_lock! 'SELECT * FROM suppliers', :lock => true
      add_lock! 'SELECT * FROM suppliers', :lock => ' FOR UPDATE'
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 121
    121:       def add_lock!(sql, options)
    122:         case lock = options[:lock]
    123:           when true;   sql << ' FOR UPDATE'
    124:           when String; sql << " #{lock}"
    125:         end
    126:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#M001188
- :tinyuri: http://tinyurl.com/522c9z
  :path: 
  - ActiveRecord
  - Observer
  :method: add_observer!
  :description: |+
    
        add_observer!(klass)
    
    
         # File vendor/rails/activerecord/lib/active_record/observer.rb, line 176
    176:       def add_observer!(klass)
    177:         klass.add_observer(self)
    178:         klass.class_eval 'def after_find() end' unless klass.respond_to?(:after_find)
    179:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Observer.html#M001367
- :tinyuri: http://tinyurl.com/4c2odp
  :path: 
  - ActiveRecord
  - Errors
  :method: add_on_blank
  :description: |+
    
        add_on_blank(attributes, msg = @@default_error_messages[:blank])
    Will add an error message to each of the attributes in
    attributes that is blank (using Object#blank?).
    
    
    
        # File vendor/rails/activerecord/lib/active_record/validations.rb, line 79
    79:     def add_on_blank(attributes, msg = @@default_error_messages[:blank])
    80:       for attr in [attributes].flatten
    81:         value = @base.respond_to?(attr.to_s) ? @base.send(attr.to_s) : @base[attr.to_s]
    82:         add(attr, msg) if value.blank?
    83:       end
    84:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Errors.html#M001348
- :tinyuri: http://tinyurl.com/3uutb9
  :path: 
  - ActiveRecord
  - Errors
  :method: add_on_empty
  :description: |+
    
        add_on_empty(attributes, msg = @@default_error_messages[:empty])
    Will add an error message to each of the attributes in
    attributes that is empty.
    
    
    
        # File vendor/rails/activerecord/lib/active_record/validations.rb, line 70
    70:     def add_on_empty(attributes, msg = @@default_error_messages[:empty])
    71:       for attr in [attributes].flatten
    72:         value = @base.respond_to?(attr.to_s) ? @base.send(attr.to_s) : @base[attr.to_s]
    73:         is_empty = value.respond_to?("empty?") ? value.empty? : false
    74:         add(attr, msg) unless !value.nil? && !is_empty
    75:       end
    76:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Errors.html#M001347
- :tinyuri: http://tinyurl.com/3nsfay
  :path: 
  - Rails
  - Generator
  - Options
  :method: add_options!
  :description: |+
    
        add_options!(opt)
    Override to add your options to the
    parser:
    
    
      def add_options!(opt)
        opt.on('-v', '--verbose') { |value| options[:verbose] = value }
      end
    
    
    
         # File vendor/rails/railties/lib/rails_generator/options.rb, line 115
    115:         def add_options!(opt)
    116:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Options.html#M001483
- :tinyuri: http://tinyurl.com/4j55fx
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - SchemaStatements
  :method: add_order_by_for_association_limiting!
  :description: |+
    
        add_order_by_for_association_limiting!(sql, options)
    ORDER BY clause for the passed order option. PostgreSQL overrides this due
    to its stricter standards compliance.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 296
    296:       def add_order_by_for_association_limiting!(sql, options)
    297:         sql << " ORDER BY #{options[:order]}"
    298:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#M001163
- :tinyuri: http://tinyurl.com/45xach
  :path: 
  - Rails
  - Initializer
  :method: add_plugin_load_paths
  :description: |+
    
        add_plugin_load_paths()
    Adds all load paths from plugins to the global set of load paths, so that
    code from plugins can be required (explicitly or automatically via
    Dependencies).
    
    
    
         # File vendor/rails/railties/lib/initializer.rb, line 169
    169:     def add_plugin_load_paths
    170:       plugin_loader.add_plugin_load_paths
    171:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Initializer.html#M001579
- :tinyuri: http://tinyurl.com/5xaxhg
  :path: 
  - Rails
  - Initializer
  :method: add_support_load_paths
  :description: |+
    
        add_support_load_paths()
    Add the load paths used by support functions such as the info controller
    
    
    
         # File vendor/rails/railties/lib/initializer.rb, line 164
    164:     def add_support_load_paths
    165:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Initializer.html#M001578
- :tinyuri: http://tinyurl.com/3kaopu
  :path: 
  - ActiveResource
  - Errors
  :method: add_to_base
  :description: |+
    
        add_to_base(msg)
    Add an error to the base Active Resource object rather than an attribute.
    
    Examples
    
      my_folder = Folder.find(1)
      my_folder.errors.add_to_base("You can't edit an existing folder")
      my_folder.errors.on_base
      # => "You can't edit an existing folder"
    
      my_folder.errors.add_to_base("This folder has been tagged as frozen")
      my_folder.valid?
      # => false
      my_folder.errors.on_base
      # => ["You can't edit an existing folder", "This folder has been tagged as frozen"]
    
    
    
        # File vendor/rails/activeresource/lib/active_resource/validations.rb, line 31
    31:     def add_to_base(msg)
    32:       add(:base, msg)
    33:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Errors.html#M000800
- :tinyuri: http://tinyurl.com/4yfjsd
  :path: 
  - ActiveRecord
  - Errors
  :method: add_to_base
  :description: "\n  \n    add_to_base(msg)\n  \n  \n  \n\
    Adds an error to the base object instead of any particular attribute. This\n\
    is used to report errors that don\xE2\x80\x98t tie to any specific attribute,\n\
    but rather to the object as a whole. These error messages don\xE2\x80\x98t get\n\
    prepended with any field name when iterating with each_full, so they should be complete\n\
    56:     def add_to_base(msg)\n\
    57:       add(:base, msg)\n\
    58:     end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Errors.html#M001345
- :tinyuri: http://tinyurl.com/3ftscp
  :path: 
  - TimeZone
  :method: adjust
  :description: |+
    
        adjust(time)
    Adjust the given time to the time zone represented by self.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/values/time_zone.rb, line 47
    47:   def adjust(time)
    48:     time = time.to_time unless time.is_a?(::Time)
    49:     time + utc_offset - time.utc_offset
    50:   end
    
    
  :uri: http://api.rubyonrails.org/classes/TimeZone.html#M000020
- :tinyuri: http://tinyurl.com/3uynf8
  :path: 
  - ActiveSupport
  - CoreExtensions
  - DateTime
  - Calculations
  :method: advance
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/DateTime/Calculations.html#M000724
- :tinyuri: http://tinyurl.com/3mw9ex
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Date
  - Calculations
  :method: advance
  :description: |+
    
        advance(options)
    Provides precise Date calculations for years, months, and days. The
    options parameter takes a hash with any of these keys: :years,
    :months, :weeks, :days.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/date/calculations.rb, line 72
    72:         def advance(options)
    73:           d = self
    74:           d = d >> options.delete(:years) * 12 if options[:years]
    75:           d = d >> options.delete(:months)     if options[:months]
    76:           d = d +  options.delete(:weeks) * 7  if options[:weeks]
    77:           d = d +  options.delete(:days)       if options[:days]
    78:           d
    79:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Date/Calculations.html#M000688
- :tinyuri: http://tinyurl.com/4z8wzw
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Calculations
  :method: advance
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Calculations.html#M000576
- :tinyuri: http://tinyurl.com/4444gg
  :path: 
  - ActiveRecord
  - Callbacks
  :method: after_create
  :description: "\n  \n    after_create()\n  \n  \n  \n\
    Is called after Base.save\n\
    224:     def after_create() end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html#M001300
- :tinyuri: http://tinyurl.com/2twcog
  :path: 
  - ActiveRecord
  - Callbacks
  :method: after_destroy
  :description: |+
    
        after_destroy()
    Is called after Base.destroy (and all the attributes have
    been frozen).
    
    
     class Contact < ActiveRecord::Base
       after_destroy { |record| logger.info( "Contact #{record.id} was destroyed." ) }
     end
    
    
    
         # File vendor/rails/activerecord/lib/active_record/callbacks.rb, line 293
    293:     def after_destroy()  end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html#M001310
- :tinyuri: http://tinyurl.com/4wdrlf
  :path: 
  - ActionController
  - Dispatcher
  :method: after_dispatch
  :description: |+
    
        after_dispatch(*method_names, &block)
    Declare a block to be called after each dispatch. Run in reverse of the order
    declared.
    
    
    
        # File vendor/rails/actionpack/lib/action_controller/dispatcher.rb, line 21
    21:       def after_dispatch(*method_names, &block)
    22:         callbacks[:after].concat method_names
    23:         callbacks[:after] << block if block_given?
    24:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Dispatcher.html#M000466
- :tinyuri: http://tinyurl.com/3jeztt
  :path: 
  - ActionController
  - Filters
  - ClassMethods
  :method: after_filter
  :description: |
    
        after_filter(*filters, &block)
    Alias for append_after_filter
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Filters/ClassMethods.html#M000315
- :tinyuri: http://tinyurl.com/4xjdwc
  :path: 
  - Rails
  - Configuration
  :method: after_initialize
  :description: |+
    
        after_initialize(&after_initialize_block)
    Adds a block which will be executed after rails has been fully initialized.
    Useful for per-environment
    configuration which depends on the framework being fully initialized.
    
    
    
         # File vendor/rails/railties/lib/initializer.rb, line 525
    525:     def after_initialize(&after_initialize_block)
    526:       after_initialize_blocks << after_initialize_block if after_initialize_block
    527:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Configuration.html#M001611
- :tinyuri: http://tinyurl.com/4st44b
  :path: 
  - Rails
  - Initializer
  :method: after_initialize
  :description: |+
    
        after_initialize()
    Fires the user-supplied after_initialize block (Configuration#after_initialize)
    
    
    
         # File vendor/rails/railties/lib/initializer.rb, line 335
    335:     def after_initialize
    336:       configuration.after_initialize_blocks.each do |block|
    337:         block.call
    338:       end
    339:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Initializer.html#M001594
- :tinyuri: http://tinyurl.com/3qgwv4
  :path: 
  - Rails
  - Configuration
  :method: after_initialize_blocks
  :description: |+
    
        after_initialize_blocks()
    Returns the blocks added with Configuration#after_initialize
    
    
    
         # File vendor/rails/railties/lib/initializer.rb, line 530
    530:     def after_initialize_blocks
    531:       @after_initialize_blocks ||= []
    532:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Configuration.html#M001612
- :tinyuri: http://tinyurl.com/4lqn33
  :path: 
  - ActiveRecord
  - Callbacks
  :method: after_save
  :description: "\n  \n    after_save()\n  \n  \n  \n\
    Is called after Base.save\n\
    (regardless of whether it\xE2\x80\x98s a create or update\n\
    211:     def after_save()  end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html#M001298
- :tinyuri: http://tinyurl.com/47lsxk
  :path: 
  - ActiveRecord
  - Callbacks
  :method: after_update
  :description: |+
    
        after_update()
    Is called after Base.save
    on existing objects that have a record.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/callbacks.rb, line 237
    237:     def after_update() end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html#M001302
- :tinyuri: http://tinyurl.com/52vz5j
  :path: 
  - ActiveRecord
  - Callbacks
  :method: after_validation
  :description: |+
    
        after_validation()
    Is called after Validations.validate (which is
    part of the Base.save call).
    
    
    
         # File vendor/rails/activerecord/lib/active_record/callbacks.rb, line 251
    251:     def after_validation() end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html#M001304
- :tinyuri: http://tinyurl.com/3hm74r
  :path: 
  - ActiveRecord
  - Callbacks
  :method: after_validation_on_create
  :description: "\n  \n    after_validation_on_create()\n  \n  \n  \n\
    Is called after Validations.validate (which is\n\
    part of the Base.save call) on new\n\
    259:     def after_validation_on_create()  end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html#M001306
- :tinyuri: http://tinyurl.com/4cvu9q
  :path: 
  - ActiveRecord
  - Callbacks
  :method: after_validation_on_update
  :description: |+
    
        after_validation_on_update()
    Is called after Validations.validate (which is
    part of the Base.save call) on
    existing objects that have a record.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/callbacks.rb, line 267
    267:     def after_validation_on_update()  end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html#M001308
- :tinyuri: http://tinyurl.com/3vr27a
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Calculations
  :method: ago
  :description: |+
    
        ago(seconds)
    Returns a new Time representing the time a number of seconds ago, this is basically a wrapper
    around the Numeric extension Do not use this method in combination with x.months, use months_ago instead!
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/time/calculations.rb, line 85
    85:         def ago(seconds)
    86:           self.since(-seconds)
    87:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Calculations.html#M000577
- :tinyuri: http://tinyurl.com/3ool62
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Numeric
  - Time
  :method: ago
  :description: |+
    
        ago(time = ::Time.now)
    Reads best without arguments: 10.minutes.ago
    
    
      This method is also aliased as
      until
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/numeric/time.rb, line 74
    74:         def ago(time = ::Time.now)
    75:           time - self
    76:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Numeric/Time.html#M000654
- :tinyuri: http://tinyurl.com/4kybby
  :path: 
  - ActiveSupport
  - Duration
  :method: ago
  :description: |+
    
        ago(time = ::Time.now)
    Calculates a new Time or Date that is as far in the past as this Duration represents.
    
    
      This method is also aliased as
      until
    
    
    
        # File vendor/rails/activesupport/lib/active_support/duration.rb, line 61
    61:     def ago(time = ::Time.now)
    62:       sum(-1, time)
    63:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Duration.html#M000776
- :tinyuri: http://tinyurl.com/45tg8z
  :path: 
  - ActiveSupport
  - CoreExtensions
  - DateTime
  - Calculations
  :method: ago
  :description: |+
    
        ago(seconds)
    Returns a new DateTime representing the time a number of seconds ago Do not use this method in combination with x.months, use
    months_ago instead!
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 51
    51:         def ago(seconds)
    52:           self.since(-seconds)
    53:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/DateTime/Calculations.html#M000725
- :tinyuri: http://tinyurl.com/5y66dh
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Date
  - Calculations
  :method: ago
  :description: |+
    
        ago(seconds)
    Converts Date to a Time (or DateTime if necessary) with the time portion
    set to the beginning of the day (0:00) and then subtracts the specified
    number of seconds
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/date/calculations.rb, line 30
    30:         def ago(seconds)
    31:           to_time.since(-seconds)
    32:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Date/Calculations.html#M000680
- :tinyuri: http://tinyurl.com/36ujlu
  :path: 
  - ActionView
  - Helpers
  - PrototypeHelper
  - JavaScriptGenerator
  - GeneratorMethods
  :method: alert
  :description: |+
    
        alert(message)
    Displays an alert dialog with
    the given message.
    
    
    Example:
    
    
      # Generates: alert('This message is from Rails!')
      page.alert('This message is from Rails!')
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/prototype_helper.rb, line 832
    832:           def alert(message)
    833:             call 'alert', message
    834:           end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#M000984
- :tinyuri: http://tinyurl.com/4ggkqu
  :path: 
  - TimeZone
  :method: all
  :description: |+
    
        all()
    Return an array of all TimeZone objects. There are multiple TimeZone objects per time zone, in many cases, to
    make it easier for users to find their own time zone.
    
    
    
         # File vendor/rails/activesupport/lib/active_support/values/time_zone.rb, line 94
     94:     def all
     95:       unless @@zones
     96:         @@zones = []
     97:         [[-43_200, "International Date Line West" ],
     98:          [-39_600, "Midway Island", "Samoa" ],
     99:          [-36_000, "Hawaii" ],
    100:          [-32_400, "Alaska" ],
    101:          [-28_800, "Pacific Time (US & Canada)", "Tijuana" ],
    102:          [-25_200, "Mountain Time (US & Canada)", "Chihuahua", "Mazatlan", 
    103:                    "Arizona" ],
    104:          [-21_600, "Central Time (US & Canada)", "Saskatchewan", "Guadalajara",
    105:                    "Mexico City", "Monterrey", "Central America" ],
    106:          [-18_000, "Eastern Time (US & Canada)", "Indiana (East)", "Bogota",
    107:                    "Lima", "Quito" ],
    108:          [-14_400, "Atlantic Time (Canada)", "Caracas", "La Paz", "Santiago" ],
    109:          [-12_600, "Newfoundland" ],
    110:          [-10_800, "Brasilia", "Buenos Aires", "Georgetown", "Greenland" ],
    111:          [ -7_200, "Mid-Atlantic" ],
    112:          [ -3_600, "Azores", "Cape Verde Is." ],
    113:          [      0, "Dublin", "Edinburgh", "Lisbon", "London", "Casablanca",
    114:                    "Monrovia" ],
    115:          [  3_600, "Belgrade", "Bratislava", "Budapest", "Ljubljana", "Prague",
    116:                    "Sarajevo", "Skopje", "Warsaw", "Zagreb", "Brussels",
    117:                    "Copenhagen", "Madrid", "Paris", "Amsterdam", "Berlin",
    118:                    "Bern", "Rome", "Stockholm", "Vienna",
    119:                    "West Central Africa" ],
    120:          [  7_200, "Bucharest", "Cairo", "Helsinki", "Kyev", "Riga", "Sofia",
    121:                    "Tallinn", "Vilnius", "Athens", "Istanbul", "Minsk",
    122:                    "Jerusalem", "Harare", "Pretoria" ],
    123:          [ 10_800, "Moscow", "St. Petersburg", "Volgograd", "Kuwait", "Riyadh",
    124:                    "Nairobi", "Baghdad" ],
    125:          [ 12_600, "Tehran" ],
    126:          [ 14_400, "Abu Dhabi", "Muscat", "Baku", "Tbilisi", "Yerevan" ],
    127:          [ 16_200, "Kabul" ],
    128:          [ 18_000, "Ekaterinburg", "Islamabad", "Karachi", "Tashkent" ],
    129:          [ 19_800, "Chennai", "Kolkata", "Mumbai", "New Delhi" ],
    130:          [ 20_700, "Kathmandu" ],
    131:          [ 21_600, "Astana", "Dhaka", "Sri Jayawardenepura", "Almaty",
    132:                    "Novosibirsk" ],
    133:          [ 23_400, "Rangoon" ],
    134:          [ 25_200, "Bangkok", "Hanoi", "Jakarta", "Krasnoyarsk" ],
    135:          [ 28_800, "Beijing", "Chongqing", "Hong Kong", "Urumqi",
    136:                    "Kuala Lumpur", "Singapore", "Taipei", "Perth", "Irkutsk",
    137:                    "Ulaan Bataar" ],
    138:          [ 32_400, "Seoul", "Osaka", "Sapporo", "Tokyo", "Yakutsk" ],
    139:          [ 34_200, "Darwin", "Adelaide" ],
    140:          [ 36_000, "Canberra", "Melbourne", "Sydney", "Brisbane", "Hobart",
    141:                    "Vladivostok", "Guam", "Port Moresby" ],
    142:          [ 39_600, "Magadan", "Solomon Is.", "New Caledonia" ],
    143:          [ 43_200, "Fiji", "Kamchatka", "Marshall Is.", "Auckland",
    144:                    "Wellington" ],
    145:          [ 46_800, "Nuku'alofa" ]].
    146:         each do |offset, *places|
    147:           places.each { |place| @@zones << create(place, offset).freeze }
    148:         end
    149:         @@zones.sort!
    150:       end
    151:       @@zones
    152:     end
    
    
  :uri: http://api.rubyonrails.org/classes/TimeZone.html#M000026
- :tinyuri: http://tinyurl.com/42bpoe
  :path: 
  - Repositories
  :method: all
  :description: |+
    
        all()
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 299
    299:   def all
    300:     @repositories
    301:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Repositories.html#M000083
- :tinyuri: http://tinyurl.com/4ulftd
  :path: 
  - ActiveRecord
  - Migration
  :method: announce
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Migration.html#M001370
- :tinyuri: http://tinyurl.com/3s9bn6
  :path: 
  - vendor/rails/railties/lib/console_app.rb
  :method: app
  :description: |+
    
        app(create=false)
    reference the global "app" instance, created on
    demand. To recreate the instance, pass a non-false value as the parameter.
    
    
    
        # File vendor/rails/railties/lib/console_app.rb, line 8
     8: def app(create=false)
     9:   @app_integration_instance = nil if create
    10:   @app_integration_instance ||= new_session do |sess|
    11:     sess.host! "www.example.com"
    12:   end
    13: end
    
    
  :uri: http://api.rubyonrails.org/files/vendor/rails/railties/lib/console_app_rb.html#M000001
- :tinyuri: http://tinyurl.com/4njys5
  :path: 
  - ActionController
  - Filters
  - ClassMethods
  :method: append_after_filter
  :description: |+
    
        append_after_filter(*filters, &block)
    The passed filters will be appended to the array of filters that
    run after actions on this controller are performed.
    
    
      This method is also aliased as
      after_filter
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/filters.rb, line 265
    265:       def append_after_filter(*filters, &block)
    266:         append_filter_to_chain(filters, :after, &block)
    267:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Filters/ClassMethods.html#M000313
- :tinyuri: http://tinyurl.com/49e6pm
  :path: 
  - ActionController
  - Filters
  - ClassMethods
  :method: append_around_filter
  :description: |+
    
        append_around_filter(*filters, &block)
    If you append_around_filter A.new,
    B.new, the filter chain looks like
    
    
      B#before
        A#before
          # run the action
        A#after
      B#after
    
    
    With around filters which yield to the action block, before and after are
    the code before and after the yield.
    
    
      This method is also aliased as
      around_filter
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/filters.rb, line 289
    289:       def append_around_filter(*filters, &block)
    290:         filters, conditions = extract_conditions(filters, &block)
    291:         filters.map { |f| proxy_before_and_after_filter(f) }.each do |filter|
    292:           append_filter_to_chain([filter, conditions])
    293:         end
    294:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Filters/ClassMethods.html#M000316
- :tinyuri: http://tinyurl.com/3e77tk
  :path: 
  - ActionController
  - Filters
  - ClassMethods
  :method: append_before_filter
  :description: |+
    
        append_before_filter(*filters, &block)
    The passed filters will be appended to the filter_chain and will execute before
    the action on this controller is performed.
    
    
      This method is also aliased as
      before_filter
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/filters.rb, line 250
    250:       def append_before_filter(*filters, &block)
    251:         append_filter_to_chain(filters, :before, &block)
    252:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Filters/ClassMethods.html#M000310
- :tinyuri: http://tinyurl.com/3sc2w3
  :path: 
  - ActionController
  - Filters
  - ClassMethods
  :method: append_filter_to_chain
  :description: |+
    
        append_filter_to_chain(filters, filter_type = :around, &block)
    
    
         # File vendor/rails/actionpack/lib/action_controller/filters.rb, line 514
    514:         def append_filter_to_chain(filters, filter_type = :around, &block)
    515:           pos = find_filter_append_position(filters, filter_type)
    516:           update_filter_chain(filters, filter_type, pos, &block)
    517:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Filters/ClassMethods.html#M000323
- :tinyuri: http://tinyurl.com/3l9lus
  :path: 
  - Rails
  - Generator
  - Lookup
  - ClassMethods
  :method: append_sources
  :description: |+
    
        append_sources(*args)
    Add a source to the end of the list.
    
    
    
        # File vendor/rails/railties/lib/rails_generator/lookup.rb, line 68
    68:         def append_sources(*args)
    69:           sources.concat(args.flatten)
    70:           invalidate_cache!
    71:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Lookup/ClassMethods.html#M001534
- :tinyuri: http://tinyurl.com/4gjc2r
  :path: 
  - ActionController
  - Base
  :method: append_view_path
  :description: |+
    
        append_view_path(path)
    Adds a view_path to the end of the view_paths array. This change affects the
    current request only.
    
    
      self.append_view_path("views/default")
      self.append_view_path(["views/default", "views/custom"])
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/base.rb, line 668
    668:       def append_view_path(path)
    669:         (@template || self.class).append_view_path(path)
    670:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Base.html#M000451
- :tinyuri: http://tinyurl.com/42ehxb
  :path: 
  - ActionController
  - Base
  :method: append_view_path
  :description: |+
    
        append_view_path(path)
    Adds a view_path to the end of the view_paths array. If the current class has no
    view paths, copy them from the superclass. This change will be visible for
    all future requests.
    
    
      ArticleController.append_view_path("views/default")
      ArticleController.append_view_path(["views/default", "views/custom"])
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/base.rb, line 452
    452:       def append_view_path(path)
    453:         @view_paths = superclass.view_paths.dup if @view_paths.nil?
    454:         view_paths.push(*path)
    455:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Base.html#M000440
- :tinyuri: http://tinyurl.com/3hovdo
  :path: 
  - ActionView
  - Base
  :method: append_view_path
  :description: |+
    
        append_view_path(path)
    Adds a view_path to the end of the view_paths array. This change affects
    the current request only.
    
    
      @template.append_view_path("views/default")
      @template.append_view_path(["views/default", "views/custom"])
    
    
    
         # File vendor/rails/actionpack/lib/action_view/base.rb, line 440
    440:     def append_view_path(path)
    441:       @view_paths.push(*path)
    442:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Base.html#M001093
- :tinyuri: http://tinyurl.com/3vtqg7
  :path: 
  - ActionController
  - Routing
  - Optimisation
  - Optimiser
  :method: applicable?
  :description: |+
    
        applicable?()
    Temporarily disabled :url optimisation pending proper solution to Issues
    around request.host etc.
    
    
    
        # File vendor/rails/actionpack/lib/action_controller/routing_optimisation.rb, line 46
    46:         def applicable?
    47:           true
    48:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Routing/Optimisation/Optimiser.html#M000348
- :tinyuri: http://tinyurl.com/4r6gl6
  :path: 
  - ActionController
  - Routing
  - Optimisation
  - PositionalArgumentsWithAdditionalParams
  :method: applicable?
  :description: "\n  \n    applicable?()\n  \n  \n  \n\
    To avoid generating localhost/?host=foo.example.com\n\
    111:         def applicable?\n\
    112:           super && route.segment_keys.size > 0 \n\
    113:         end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionController/Routing/Optimisation/PositionalArgumentsWithAdditionalParams.html#M000343
- :tinyuri: http://tinyurl.com/3orcew
  :path: 
  - ActionController
  - Filters
  - ClassMethods
  :method: around_filter
  :description: |
    
        around_filter(*filters, &block)
    Alias for append_around_filter
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Filters/ClassMethods.html#M000318
- :tinyuri: http://tinyurl.com/4k42jv
  :path: 
  - ActionView
  - Helpers
  - JavaScriptHelper
  :method: array_or_string_for_javascript
  :description: |+
    
        array_or_string_for_javascript(option)
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/javascript_helper.rb, line 200
    200:       def array_or_string_for_javascript(option)
    201:         js_option = if option.kind_of?(Array)
    202:           "['#{option.join('\',\'')}']"
    203:         elsif !option.nil?
    204:           "'#{option}'"
    205:         end
    206:         js_option
    207:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/JavaScriptHelper.html#M001067
- :tinyuri: http://tinyurl.com/45w7hf
  :path: 
  - ActionController
  - Assertions
  - DomAssertions
  :method: assert_dom_equal
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionController/Assertions/DomAssertions.html#M000370
- :tinyuri: http://tinyurl.com/5y8ume
  :path: 
  - ActionController
  - Assertions
  - DomAssertions
  :method: assert_dom_not_equal
  :description: |+
    
        assert_dom_not_equal(expected, actual, message = "")
    The negated form of assert_dom_equivalent.
    
    Examples
    
      # assert that the referenced method does not generate the specified HTML string
      assert_dom_not_equal '<a href="http://www.example.com">Apples</a>', link_to("Oranges", "http://www.example.com")
    
    
    
        # File vendor/rails/actionpack/lib/action_controller/assertions/dom_assertions.rb, line 28
    28:       def assert_dom_not_equal(expected, actual, message = "")
    29:         clean_backtrace do
    30:           expected_dom = HTML::Document.new(expected).root
    31:           actual_dom   = HTML::Document.new(actual).root
    32:           full_message = build_message(message, "<?> expected to be != to\n<?>.", expected_dom.to_s, actual_dom.to_s)
    33: 
    34:           assert_block(full_message) { expected_dom != actual_dom }
    35:         end
    36:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Assertions/DomAssertions.html#M000371
- :tinyuri: http://tinyurl.com/3fwjlm
  :path: 
  - ActionController
  - Assertions
  - RoutingAssertions
  :method: assert_generates
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionController/Assertions/RoutingAssertions.html#M000367
- :tinyuri: http://tinyurl.com/4b99ql
  :path: 
  - ActionController
  - Assertions
  - TagAssertions
  :method: assert_no_tag
  :description: |+
    
        assert_no_tag(*opts)
    Identical to assert_tag, but
    asserts that a matching tag does not exist. (See assert_tag for a full discussion of
    the syntax.)
    
    Examples
    
      # Assert that there is not a "div" containing a "p"
      assert_no_tag :tag => "div", :descendant => { :tag => "p" }
    
      # Assert that an unordered list is empty
      assert_no_tag :tag => "ul", :descendant => { :tag => "li" }
    
      # Assert that there is not a "p" tag with between 1 to 3 "img" tags
      # as immediate children
      assert_no_tag :tag => "p",
                 :children => { :count => 1..3, :only => { :tag => "img" } }
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/assertions/tag_assertions.rb, line 121
    121:       def assert_no_tag(*opts)
    122:         clean_backtrace do
    123:           opts = opts.size > 1 ? opts.last.merge({ :tag => opts.first.to_s }) : opts.first
    124:           tag = find_tag(opts)
    125:           assert !tag, "expected no tag, but found tag matching #{opts.inspect} in:\n#{@response.body.inspect}"
    126:         end
    127:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Assertions/TagAssertions.html#M000358
- :tinyuri: http://tinyurl.com/4pe4t4
  :path: 
  - ActionController
  - Assertions
  - RoutingAssertions
  :method: assert_recognizes
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionController/Assertions/RoutingAssertions.html#M000366
- :tinyuri: http://tinyurl.com/492egj
  :path: 
  - ActionController
  - Assertions
  - ResponseAssertions
  :method: assert_redirected_to
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionController/Assertions/ResponseAssertions.html#M000355
- :tinyuri: http://tinyurl.com/4zbnrt
  :path: 
  - ActionController
  - Assertions
  - ResponseAssertions
  :method: assert_response
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionController/Assertions/ResponseAssertions.html#M000354
- :tinyuri: http://tinyurl.com/4wgzuc
  :path: 
  - ActionController
  - Assertions
  - RoutingAssertions
  :method: assert_routing
  :description: |+
    
        assert_routing(path, options, defaults={}, extras={}, message=nil)
    Asserts that path and options match both ways; in other words, it verifies
    that path generates options and then that
    options generates path. This essentially combines assert_recognizes and assert_generates into one step.
    
    
    The extras hash allows you to specify options that would normally
    be provided as a query string to the action. The message parameter
    allows you to specify a custom error message to display upon failure.
    
    Examples
    
     # Assert a basic route: a controller with the default action (index)
     assert_routing('/home', :controller => 'home', :action => 'index')
    
     # Test a route generated with a specific controller, action, and parameter (id)
     assert_routing('/entries/show/23', :controller => 'entries', :action => 'show', id => 23)
    
     # Assert a basic route (controller + default action), with an error message if it fails
     assert_routing('/store', { :controller => 'store', :action => 'index' }, {}, {}, 'Route for store index not generated properly')
    
     # Tests a route, providing a defaults hash
     assert_routing 'controller/action/9', {:id => "9", :item => "square"}, {:controller => "controller", :action => "action"}, {}, {:item => "square"}
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/assertions/routing_assertions.rb, line 117
    117:       def assert_routing(path, options, defaults={}, extras={}, message=nil)
    118:         assert_recognizes(options, path, extras, message)
    119:         
    120:         controller, default_controller = options[:controller], defaults[:controller] 
    121:         if controller && controller.include?(?/) && default_controller && default_controller.include?(?/)
    122:           options[:controller] = "/#{controller}"
    123:         end
    124:          
    125:         assert_generates(path, options, defaults, extras, message)
    126:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Assertions/RoutingAssertions.html#M000368
- :tinyuri: http://tinyurl.com/4erxap
  :path: 
  - ActionController
  - Assertions
  - SelectorAssertions
  :method: assert_select
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionController/Assertions/SelectorAssertions.html#M000360
- :tinyuri: http://tinyurl.com/4svsd8
  :path: 
  - ActionController
  - Assertions
  - SelectorAssertions
  :method: assert_select_email
  :description: |+
    
        assert_select_email { }
    
    Extracts the body of an email and runs nested assertions on it.
    
    
    You must enable deliveries for this assertion to work, use:
    
    
      ActionMailer::Base.perform_deliveries = true
    
    Examples
    
     assert_select_email do
       assert_select "h1", "Email alert"
     end
    
     assert_select_email do
       items = assert_select "ol>li"
       items.each do
          # Work with items here...
       end
     end
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/assertions/selector_assertions.rb, line 561
    561:       def assert_select_email(&block)
    562:         deliveries = ActionMailer::Base.deliveries
    563:         assert !deliveries.empty?, "No e-mail in delivery list"
    564: 
    565:         for delivery in deliveries
    566:           for part in delivery.parts
    567:             if part["Content-Type"].to_s =~ /^text\/html\W/
    568:               root = HTML::Document.new(part.body).root
    569:               assert_select root, ":root", &block
    570:             end
    571:           end
    572:         end
    573:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Assertions/SelectorAssertions.html#M000363
- :tinyuri: http://tinyurl.com/3qjo7y
  :path: 
  - ActionController
  - Assertions
  - SelectorAssertions
  :method: assert_select_encoded
  :description: |+
    
        assert_select_encoded(element?) { |elements| ... }
    
    Extracts the content of an element, treats it as encoded HTML and runs
    nested assertion on it.
    
    
    You typically call this method within another assertion to operate on all
    currently selected elements. You can also pass an element or array of
    elements.
    
    
    The content of each element is un-encoded, and wrapped in the root element
    encoded. It then calls the block with all un-encoded elements.
    
    Examples
    
      # Selects all bold tags from within the title of an ATOM feed's entries (perhaps to nab a section name prefix)
      assert_select_feed :atom, 1.0 do
        # Select each entry item and then the title item
        assert_select "entry>title" do
          # Run assertions on the encoded title elements
          assert_select_encoded do
            assert_select "b"
          end
        end
      end
    
      # Selects all paragraph tags from within the description of an RSS feed
      assert_select_feed :rss, 2.0 do
        # Select description element of each feed item.
        assert_select "channel>item>description" do
          # Run assertions on the encoded elements.
          assert_select_encoded do
            assert_select "p"
          end
        end
      end
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/assertions/selector_assertions.rb, line 507
    507:       def assert_select_encoded(element = nil, &block)
    508:         case element
    509:           when Array
    510:             elements = element
    511:           when HTML::Node
    512:             elements = [element]
    513:           when nil
    514:             unless elements = @selected
    515:               raise ArgumentError, "First argument is optional, but must be called from a nested assert_select"
    516:             end
    517:           else
    518:             raise ArgumentError, "Argument is optional, and may be node or array of nodes"
    519:         end
    520: 
    521:         fix_content = lambda do |node|
    522:           # Gets around a bug in the Rails 1.1 HTML parser.
    523:           node.content.gsub(/<!\[CDATA\[(.*)(\]\]>)?/m) { CGI.escapeHTML($1) }
    524:         end
    525: 
    526:         selected = elements.map do |element|
    527:           text = element.children.select{ |c| not c.tag? }.map{ |c| fix_content[c] }.join
    528:           root = HTML::Document.new(CGI.unescapeHTML("<encoded>#{text}</encoded>")).root
    529:           css_select(root, "encoded:root", &block)[0]
    530:         end
    531: 
    532:         begin
    533:           old_selected, @selected = @selected, selected
    534:           assert_select ":root", &block
    535:         ensure
    536:           @selected = old_selected
    537:         end
    538:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Assertions/SelectorAssertions.html#M000362
- :tinyuri: http://tinyurl.com/3b5u8a
  :path: 
  - ActionController
  - Assertions
  - SelectorAssertions
  :method: assert_select_rjs
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionController/Assertions/SelectorAssertions.html#M000361
- :tinyuri: http://tinyurl.com/4ltecx
  :path: 
  - ActionController
  - Assertions
  - TagAssertions
  :method: assert_tag
  :description: "\n  \n    assert_tag(*opts)\n  \n  \n  \n\
    Asserts that there is a tag/node/element in the body of the response that\n\
    meets all of the given conditions. The conditions parameter must\n\
    be a hash of any of the following keys (all are optional):\n\n\n\
    :tag: the node type must match the corresponding value\n\n\n\
    :attributes: a hash. The node\xE2\x80\x98s attributes must match the\n\
    corresponding values in the hash.\n\n\n\
    :parent: a hash. The node\xE2\x80\x98s parent must match the\n\
    corresponding hash.\n\n\n\
    :child: a hash. At least one of the node\xE2\x80\x98s immediate\n\
    children must meet the criteria described by the hash.\n\n\n\
    :ancestor: a hash. At least one of the node\xE2\x80\x98s ancestors must\n\
    meet the criteria described by the hash.\n\n\n\
    :descendant: a hash. At least one of the node\xE2\x80\x98s descendants\n\
    must meet the criteria described by the hash.\n\n\n\
    :sibling: a hash. At least one of the node\xE2\x80\x98s siblings must\n\
    meet the criteria described by the hash.\n\n\n\
    :after: a hash. The node must be after any sibling meeting the\n\
    criteria described by the hash, and at least one sibling must match.\n\n\n\
    :before: a hash. The node must be before any sibling meeting the\n\
    criteria described by the hash, and at least one sibling must match.\n\n\n\
    :children: a hash, for counting children of a node. Accepts the\n\
    keys:\n\n\n\
    :count: either a number or a range which must equal (or include)\n\
    the number of children that match.\n\n\n\
    :less_than: the number of matching children must be less than this\n\
    number.\n\n\n\
    :greater_than: the number of matching children must be greater\n\
    than this number.\n\n\n\
    :only: another hash consisting of the keys to use to match on the\n\
    children, and only matching children will be counted.\n\n\n\n\n\
    :content: the textual content of the node must match the given\n\
    value. This will not match HTML tags in the body of a tag\xE2\x80\x94only text.\n\n\n\n\n\
    Conditions are matched using the following algorithm:\n\n\n\
    if the condition is a string, it must be a substring of the value.\n\n\n\
    if the condition is a regexp, it must match the value.\n\n\n\
    if the condition is a number, the value must match number.to_s.\n\n\n\
    if the condition is true, the value must not be nil.\n\n\n\
    if the condition is false or nil, the value must be\n\
    nil.\n\n\n\n\
    Examples\n\n  # Assert that there is a \"span\" tag\n  assert_tag :tag => \"span\"\n\n  # Assert that there is a \"span\" tag with id=\"x\"\n  assert_tag :tag => \"span\", :attributes => { :id => \"x\" }\n\n  # Assert that there is a \"span\" tag using the short-hand\n  assert_tag :span\n\n  # Assert that there is a \"span\" tag with id=\"x\" using the short-hand\n  assert_tag :span, :attributes => { :id => \"x\" }\n\n  # Assert that there is a \"span\" inside of a \"div\"\n  assert_tag :tag => \"span\", :parent => { :tag => \"div\" }\n\n  # Assert that there is a \"span\" somewhere inside a table\n  assert_tag :tag => \"span\", :ancestor => { :tag => \"table\" }\n\n  # Assert that there is a \"span\" with at least one \"em\" child\n  assert_tag :tag => \"span\", :child => { :tag => \"em\" }\n\n  # Assert that there is a \"span\" containing a (possibly nested)\n  # \"strong\" tag.\n  assert_tag :tag => \"span\", :descendant => { :tag => \"strong\" }\n\n  # Assert that there is a \"span\" containing between 2 and 4 \"em\" tags\n  # as immediate children\n  assert_tag :tag => \"span\",\n             :children => { :count => 2..4, :only => { :tag => \"em\" } }\n\n  # Get funky: assert that there is a \"div\", with an \"ul\" ancestor\n  # and an \"li\" parent (with \"class\" = \"enum\"), and containing a\n  # \"span\" descendant that contains text matching /hello world/\n  assert_tag :tag => \"div\",\n             :ancestor => { :tag => \"ul\" },\n             :parent => { :tag => \"li\",\n                          :attributes => { :class => \"enum\" } },\n             :descendant => { :tag => \"span\",\n                              :child => /hello world/ }\n\n\n\
    Please note: assert_tag and\n\
    assert_no_tag only work with\n\
    well-formed XHTML. They recognize a few tags as implicitly self-closing\n\
    (like br and hr and such) but will not work correctly with tags that allow\n\
    optional closing tags (p, li, td). You must explicitly close all of\n\
    100:         clean_backtrace do\n\
    101:           opts = opts.size > 1 ? opts.last.merge({ :tag => opts.first.to_s }) : opts.first\n\
    102:           tag = find_tag(opts)\n\
    103:           assert tag, \"expected tag, but no tag found matching #{opts.inspect} in:\\n#{@response.body.inspect}\"\n\
    104:         end\n\
    105:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionController/Assertions/TagAssertions.html#M000357
- :tinyuri: http://tinyurl.com/47oj9h
  :path: 
  - ActionController
  - Assertions
  - ResponseAssertions
  :method: assert_template
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionController/Assertions/ResponseAssertions.html#M000356
- :tinyuri: http://tinyurl.com/53y9eg
  :path: 
  - ActionController
  - Assertions
  - ModelAssertions
  :method: assert_valid
  :description: |+
    
        assert_valid(record)
    Ensures that the passed record is valid by ActiveRecord standards and
    returns any error messages if it is not.
    
    Examples
    
      # assert that a newly created record is valid
      model = Model.new
      assert_valid(model)
    
    
    
        # File vendor/rails/actionpack/lib/action_controller/assertions/model_assertions.rb, line 12
    12:       def assert_valid(record)
    13:         clean_backtrace do
    14:           assert record.valid?, record.errors.full_messages.join("\n")
    15:         end
    16:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Assertions/ModelAssertions.html#M000369
- :tinyuri: http://tinyurl.com/4ad3uk
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Hash
  - Keys
  :method: assert_valid_keys
  :description: |+
    
        assert_valid_keys(*valid_keys)
    Validate all keys in a hash match *valid keys, raising ArgumentError on a
    mismatch. Note that keys are NOT treated indifferently, meaning if you use
    strings for keys but assert symbol as keys, this will fail. examples:
    
    
      { :name => "Rob", :years => "28" }.assert_valid_keys(:name, :age) # => raises "ArgumentError: Unknown key(s): years"
      { :name => "Rob", :age => "28" }.assert_valid_keys("name", "age") # => raises "ArgumentError: Unknown key(s): years, name"
      { :name => "Rob", :age => "28" }.assert_valid_keys(:name, :age) # => passes, raises nothing
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/hash/keys.rb, line 47
    47:         def assert_valid_keys(*valid_keys)
    48:           unknown_keys = keys - [valid_keys].flatten
    49:           raise(ArgumentError, "Unknown key(s): #{unknown_keys.join(", ")}") unless unknown_keys.empty?
    50:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Hash/Keys.html#M000622
- :tinyuri: http://tinyurl.com/3t88s4
  :path: 
  - ActionView
  - Helpers
  - PrototypeHelper
  - JavaScriptGenerator
  - GeneratorMethods
  :method: assign
  :description: |+
    
        assign(variable, value)
    Assigns the JavaScript variable the given value.
    
    
    Examples:
    
    
     # Generates: my_string = "This is mine!";
     page.assign 'my_string', 'This is mine!'
    
     # Generates: record_count = 33;
     page.assign 'record_count', 33
    
     # Generates: tabulated_total = 47
     page.assign 'tabulated_total', @total_from_cart
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/prototype_helper.rb, line 880
    880:           def assign(variable, value)
    881:             record "#{variable} = #{javascript_object_for(value)}"
    882:           end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#M000987
- :tinyuri: http://tinyurl.com/4ohwx3
  :path: 
  - ActionController
  - TestProcess
  :method: assigns
  :description: |+
    
        assigns(key = nil)
    
    
         # File vendor/rails/actionpack/lib/action_controller/test_process.rb, line 416
    416:     def assigns(key = nil) 
    417:       if key.nil? 
    418:         @response.template.assigns 
    419:       else 
    420:         @response.template.assigns[key.to_s] 
    421:       end 
    422:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/TestProcess.html#M000194
- :tinyuri: http://tinyurl.com/3m5rqt
  :path: 
  - ActiveSupport
  - CoreExtensions
  - String
  - Access
  :method: at
  :description: |+
    
        at(position)
    Returns the character at the
    position treating the string as an array (where 0 is the first character).
    
    
    Examples:
    
    
      "hello".at(0)  # => "h"
      "hello".at(4)  # => "o"
      "hello".at(10) # => nil
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/string/access.rb, line 12
    12:         def at(position)
    13:           chars[position, 1].to_s
    14:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/String/Access.html#M000754
- :tinyuri: http://tinyurl.com/4hfhvs
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Date
  - Calculations
  :method: at_beginning_of_day
  :description: |
    
        at_beginning_of_day()
    Alias for beginning_of_day
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Date/Calculations.html#M000686
- :tinyuri: http://tinyurl.com/4vkdyb
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Calculations
  :method: at_beginning_of_day
  :description: |
    
        at_beginning_of_day()
    Alias for beginning_of_day
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Calculations.html#M000595
- :tinyuri: http://tinyurl.com/3zl49p
  :path: 
  - ActiveSupport
  - CoreExtensions
  - DateTime
  - Calculations
  :method: at_beginning_of_day
  :description: |
    
        at_beginning_of_day()
    Alias for beginning_of_day
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/DateTime/Calculations.html#M000731
- :tinyuri: http://tinyurl.com/4dureo
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Date
  - Calculations
  :method: at_beginning_of_month
  :description: |
    
        at_beginning_of_month()
    Alias for beginning_of_month
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Date/Calculations.html#M000703
- :tinyuri: http://tinyurl.com/4s2mh7
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Calculations
  :method: at_beginning_of_month
  :description: |
    
        at_beginning_of_month()
    Alias for beginning_of_month
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Calculations.html#M000598
- :tinyuri: http://tinyurl.com/46sddg
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Calculations
  :method: at_beginning_of_quarter
  :description: |
    
        at_beginning_of_quarter()
    Alias for beginning_of_quarter
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Calculations.html#M000602
- :tinyuri: http://tinyurl.com/5253zf
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Date
  - Calculations
  :method: at_beginning_of_quarter
  :description: |
    
        at_beginning_of_quarter()
    Alias for beginning_of_quarter
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Date/Calculations.html#M000707
- :tinyuri: http://tinyurl.com/3gsphn
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Date
  - Calculations
  :method: at_beginning_of_week
  :description: |
    
        at_beginning_of_week()
    Alias for beginning_of_week
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Date/Calculations.html#M000700
- :tinyuri: http://tinyurl.com/4c5fmm
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Calculations
  :method: at_beginning_of_week
  :description: |
    
        at_beginning_of_week()
    Alias for beginning_of_week
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Calculations.html#M000590
- :tinyuri: http://tinyurl.com/3nv6zv
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Calculations
  :method: at_beginning_of_year
  :description: |
    
        at_beginning_of_year()
    Alias for beginning_of_year
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Calculations.html#M000604
- :tinyuri: http://tinyurl.com/4j7tnu
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Date
  - Calculations
  :method: at_beginning_of_year
  :description: |
    
        at_beginning_of_year()
    Alias for beginning_of_year
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Date/Calculations.html#M000709
- :tinyuri: http://tinyurl.com/3kdgyr
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Date
  - Calculations
  :method: at_end_of_month
  :description: |
    
        at_end_of_month()
    Alias for end_of_month
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Date/Calculations.html#M000705
- :tinyuri: http://tinyurl.com/4fn66q
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Calculations
  :method: at_end_of_month
  :description: |
    
        at_end_of_month()
    Alias for end_of_month
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Calculations.html#M000600
- :tinyuri: http://tinyurl.com/4yzb4a
  :path: 
  - ActiveSupport
  - CoreExtensions
  - DateTime
  - Calculations
  :method: at_midnight
  :description: |
    
        at_midnight()
    Alias for beginning_of_day
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/DateTime/Calculations.html#M000730
- :tinyuri: http://tinyurl.com/3rfu32
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Date
  - Calculations
  :method: at_midnight
  :description: |
    
        at_midnight()
    Alias for beginning_of_day
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Date/Calculations.html#M000685
- :tinyuri: http://tinyurl.com/4mpk8y
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Calculations
  :method: at_midnight
  :description: |
    
        at_midnight()
    Alias for beginning_of_day
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Calculations.html#M000594
- :tinyuri: http://tinyurl.com/48kp5z
  :path: 
  - ActionView
  - Helpers
  - AtomFeedHelper
  :method: atom_feed
  :description: |+
    
        atom_feed(options = {}) {|AtomFeedBuilder.new(xml, self)| ...}
    Full usage example:
    
    
      config/routes.rb:
        ActionController::Routing::Routes.draw do |map|
          map.resources :posts
          map.root :controller => "posts"
        end
    
      app/controllers/posts_controller.rb:
        class PostsController < ApplicationController::Base
          # GET /posts.html
          # GET /posts.atom
          def index
            @posts = Post.find(:all)
    
            respond_to do |format|
              format.html
              format.atom
            end
          end
        end
    
      app/views/posts/index.atom.builder:
        atom_feed do |feed|
          feed.title("My great blog!")
          feed.updated((@posts.first.created_at))
    
          for post in @posts
            feed.entry(post) do |entry|
              entry.title(post.title)
              entry.content(post.body, :type => 'html')
    
              entry.author do |author|
                author.name("DHH")
              end
            end
          end
        end
    
    
    The options are for atom_feed
    are:
    
    
    :language: Defaults to "en-US".
    
    
    :root_url: The HTML alternative that this feed is doubling for.
    Defaults to / on the current host.
    
    
    :url: The URL for this feed. Defaults to the current URL.
    
    
    
    
    atom_feed yields a AtomFeedBuilder instance.
    
    
    
        # File vendor/rails/actionpack/lib/action_view/helpers/atom_feed_helper.rb, line 52
    52:       def atom_feed(options = {}, &block)
    53:         xml = options[:xml] || eval("xml", block.binding)
    54:         xml.instruct!
    55: 
    56:         xml.feed "xml:lang" => options[:language] || "en-US", "xmlns" => 'http://www.w3.org/2005/Atom' do
    57:           xml.id("tag:#{request.host}:#{request.request_uri.split(".")[0].gsub("/", "")}")      
    58:           xml.link(:rel => 'alternate', :type => 'text/html', :href => options[:root_url] || (request.protocol + request.host_with_port))
    59: 
    60:           if options[:url]
    61:             xml.link(:rel => 'self', :type => 'application/atom+xml', :href => options[:url] || request.url)
    62:           end
    63: 
    64:           yield AtomFeedBuilder.new(xml, self)
    65:         end
    66:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/AtomFeedHelper.html#M000931
- :tinyuri: http://tinyurl.com/53ufah
  :path: 
  - File
  :method: atomic_write
  :description: "\n  \n    atomic_write(file_name, temp_dir = Dir.tmpdir) {|temp_file| ...}\n  \n  \n  \n\
    Write to a file atomically. Useful for situations where you don\xE2\x80\x98t\n\
    want other processes or threads to see half-written files.\n\n\n File.atomic_write(\"important.file\") do |file|\n   file.write(\"hello\")\n end\n\n\n\
    If your temp directory is not on the same filesystem as the file\n\
    you\xE2\x80\x98re trying to write, you can provide a different temporary\n\
    directory.\n\n\n\
    File.atomic_write(\"/data/something.imporant\",\n\
    \"/data/tmp\") do |f|\n\n\n  file.write(\"hello\")\n\n\n\
    16: def File.atomic_write(file_name, temp_dir = Dir.tmpdir)\n\
    17:   temp_file = Tempfile.new(File.basename(file_name), temp_dir)\n\
    18:   yield temp_file\n\
    19:   temp_file.close\n\
    20:   File.rename(temp_file.path, file_name)\n\
    21: end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/File.html#M000147
- :tinyuri: http://tinyurl.com/2srtxh
  :path: 
  - ActiveRecord
  - Base
  :method: attr_accessible
  :description: "\n  \n    attr_accessible(*attributes)\n  \n  \n  \n\
    Similar to the attr_protected macro, this\n\
    protects attributes of your model from\n\
    mass-assignment, such as new(attributes) and attributes=(attributes) however, it does it in the\n\
    opposite way. This locks all attributes and\n\
    only allows access to the attributes\n\
    specified. Assignment to attributes not in\n\
    this list will be ignored and need to be set using the direct writer\n\
    methods instead. This is meant to protect sensitive attributes from being overwritten by URL/form\n\
    hackers. If you\xE2\x80\x98d rather start from an all-open default and restrict\n\
    attributes as needed, have a look at attr_protected.\n\n\
    Options\n\n\
    *attributes A comma separated list\n\
    of symbols that represent columns\n\
    not to be protected\n\n\
    853:       def attr_accessible(*attributes)\n\
    854:         write_inheritable_attribute(\"attr_accessible\", Set.new(attributes.map(&:to_s)) + (accessible_attributes || []))\n\
    855:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001391
- :tinyuri: http://tinyurl.com/4o3czj
  :path: 
  - ActiveRecord
  - Base
  :method: attr_protected
  :description: |+
    
        attr_protected(*attributes)
    Attributes named in this macro are protected from mass-assignment, such as
    new(attributes) and attributes=(attributes). Their assignment will simply
    be ignored. Instead, you can use the direct writer methods to do
    assignment. This is meant to protect sensitive attributes from being overwritten by URL/form
    hackers. Example:
    
    
      class Customer < ActiveRecord::Base
        attr_protected :credit_rating
      end
    
      customer = Customer.new("name" => David, "credit_rating" => "Excellent")
      customer.credit_rating # => nil
      customer.attributes = { "description" => "Jolly fellow", "credit_rating" => "Superb" }
      customer.credit_rating # => nil
    
      customer.credit_rating = "Average"
      customer.credit_rating # => "Average"
    
    
    To start from an all-closed default and enable attributes as needed, have a look at attr_accessible.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/base.rb, line 819
    819:       def attr_protected(*attributes)
    820:         write_inheritable_attribute("attr_protected", Set.new(attributes.map(&:to_s)) + (protected_attributes || []))
    821:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001390
- :tinyuri: http://tinyurl.com/39xbeu
  :path: 
  - ActiveRecord
  - Base
  :method: attr_readonly
  :description: |+
    
        attr_readonly(*attributes)
    Attributes listed as readonly can be set for a new record, but will be ignored in database
    updates afterwards.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/base.rb, line 863
    863:        def attr_readonly(*attributes)
    864:          write_inheritable_attribute("attr_readonly", Set.new(attributes.map(&:to_s)) + (readonly_attributes || []))
    865:        end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001392
- :tinyuri: http://tinyurl.com/4v5qjr
  :path: 
  - ActiveRecord
  - Base
  :method: attribute_for_inspect
  :description: |+
    
        attribute_for_inspect(attr_name)
    Format attributes nicely for inspect.
    
    
    
          # File vendor/rails/activerecord/lib/active_record/base.rb, line 2152
    2152:       def attribute_for_inspect(attr_name)
    2153:         value = read_attribute(attr_name)
    2154: 
    2155:         if value.is_a?(String) && value.length > 50
    2156:           "#{value[0..50]}...".inspect
    2157:         elsif value.is_a?(Date) || value.is_a?(Time)
    2158:           %("#{value.to_s(:db)}")
    2159:         else
    2160:           value.inspect
    2161:         end
    2162:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001450
- :tinyuri: http://tinyurl.com/4dg8x7
  :path: 
  - HTML
  - Selector
  :method: attribute_match
  :description: |+
    
        attribute_match(equality, value)
    Create a regular expression to match an
    attribute value based on the equality operator (=, ^=, |=, etc).
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/vendor/html-scanner/html/selector.rb, line 687
    687:     def attribute_match(equality, value)
    688:       regexp = value.is_a?(Regexp) ? value : Regexp.escape(value.to_s)
    689:       case equality
    690:         when "=" then
    691:           # Match the attribute value in full
    692:           Regexp.new("^#{regexp}$")
    693:         when "~=" then
    694:           # Match a space-separated word within the attribute value
    695:           Regexp.new("(^|\s)#{regexp}($|\s)")
    696:         when "^="
    697:           # Match the beginning of the attribute value
    698:           Regexp.new("^#{regexp}")
    699:         when "$="
    700:           # Match the end of the attribute value
    701:           Regexp.new("#{regexp}$")
    702:         when "*="
    703:           # Match substring of the attribute value
    704:           regexp.is_a?(Regexp) ? regexp : Regexp.new(regexp)
    705:         when "|=" then
    706:           # Match the first space-separated item of the attribute value
    707:           Regexp.new("^#{regexp}($|\s)")
    708:         else
    709:           raise InvalidSelectorError, "Invalid operation/value" unless value.empty?
    710:           # Match all attributes values (existence check)
    711:           //
    712:       end
    713:     end
    
    
  :uri: http://api.rubyonrails.org/classes/HTML/Selector.html#M000172
- :tinyuri: http://tinyurl.com/4rl32n
  :path: 
  - ActiveRecord
  - AttributeMethods
  - ClassMethods
  :method: attribute_method_suffix
  :description: |+
    
        attribute_method_suffix(*suffixes)
    Declare a method available for all attributes with the given suffix. Uses
    method_missing and respond_to? to rewrite the method
    
    
      #{attr}#{suffix}(*args, &block)
    
    
    to
    
    
      attribute#{suffix}(#{attr}, *args, &block)
    
    
    An attribute#{suffix} instance method must exist and accept at least the
    attr argument.
    
    
    For example:
    
    
      class Person < ActiveRecord::Base
        attribute_method_suffix '_changed?'
    
        private
          def attribute_changed?(attr)
            ...
          end
      end
    
      person = Person.find(1)
      person.name_changed?    # => false
      person.name = 'Hubert'
      person.name_changed?    # => true
    
    
    
        # File vendor/rails/activerecord/lib/active_record/attribute_methods.rb, line 38
    38:       def attribute_method_suffix(*suffixes)
    39:         attribute_method_suffixes.concat suffixes
    40:         rebuild_attribute_method_regexp
    41:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/AttributeMethods/ClassMethods.html#M001094
- :tinyuri: http://tinyurl.com/46dqvw
  :path: 
  - ActiveRecord
  - Base
  :method: attribute_names
  :description: |+
    
        attribute_names()
    Returns an array of names for the attributes available on this object sorted
    alphabetically.
    
    
    
          # File vendor/rails/activerecord/lib/active_record/base.rb, line 2177
    2177:       def attribute_names
    2178:         @attributes.keys.sort
    2179:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001453
- :tinyuri: http://tinyurl.com/3ge636
  :path: 
  - ActiveRecord
  - Base
  :method: attribute_present?
  :description: |+
    
        attribute_present?(attribute)
    Returns true if the specified attribute has been set by the user
    or by a database load and is neither nil nor empty? (the latter only
    applies to objects that respond to empty?, most notably Strings).
    
    
    
          # File vendor/rails/activerecord/lib/active_record/base.rb, line 2166
    2166:       def attribute_present?(attribute)
    2167:         value = read_attribute(attribute)
    2168:         !value.blank?
    2169:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001451
- :tinyuri: http://tinyurl.com/3ujy5m
  :path: 
  - ActiveRecord
  - Base
  :method: attributes
  :description: |+
    
        attributes(options = nil)
    Returns a hash of all the attributes with their names as keys and clones
    of their objects as values.
    
    
    
          # File vendor/rails/activerecord/lib/active_record/base.rb, line 2126
    2126:       def attributes(options = nil)
    2127:         attributes = clone_attributes :read_attribute
    2128: 
    2129:         if options.nil?
    2130:           attributes
    2131:         else
    2132:           if except = options[:except]
    2133:             except = Array(except).collect { |attribute| attribute.to_s }
    2134:             except.each { |attribute_name| attributes.delete(attribute_name) }
    2135:             attributes
    2136:           elsif only = options[:only]
    2137:             only = Array(only).collect { |attribute| attribute.to_s }
    2138:             attributes.delete_if { |key, value| !only.include?(key) }
    2139:             attributes
    2140:           else
    2141:             raise ArgumentError, "Options does not specify :except or :only (#{options.keys.inspect})"
    2142:           end
    2143:         end
    2144:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001448
- :tinyuri: http://tinyurl.com/4psoal
  :path: 
  - Rails
  - Generator
  - NamedBase
  :method: attributes
  :description: |+
    
        attributes()
    
    
         # File vendor/rails/railties/lib/rails_generator/base.rb, line 220
    220:         def attributes
    221:           @attributes ||= @args.collect do |attribute|
    222:             Rails::Generator::GeneratedAttribute.new(*attribute.split(":"))
    223:           end
    224:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/NamedBase.html#M001546
- :tinyuri: http://tinyurl.com/3ngk4e
  :path: 
  - ActiveRecord
  - Base
  :method: attributes=
  :description: "\n  \n    attributes=(new_attributes, guard_protected_attributes = true)\n  \n  \n  \n\
    Allows you to set all the attributes at\n\
    once by passing in a hash with keys\n\
    matching the attribute names (which again matches the column names).\n\
    Sensitive attributes can be protected from\n\
    this form of mass-assignment by using the attr_protected macro. Or you can\n\
    alternatively specify which attributes\n\
    can be accessed with the attr_accessible macro. Then all the attributes not included in that won\xE2\x80\x98t be\n\
    2109:       def attributes=(new_attributes, guard_protected_attributes = true)\n\
    2110:         return if new_attributes.nil?\n\
    2111:         attributes = new_attributes.dup\n\
    2112:         attributes.stringify_keys!\n\
    2113: \n\
    2114:         multi_parameter_attributes = []\n\
    2115:         attributes = remove_attributes_protected_from_mass_assignment(attributes) if guard_protected_attributes\n\
    2116: \n\
    2117:         attributes.each do |k, v|\n\
    2118:           k.include?(\"(\") ? multi_parameter_attributes << [ k, v ] : send(k + \"=\", v)\n\
    2119:         end\n\
    2120: \n\
    2121:         assign_multiparameter_attributes(multi_parameter_attributes)\n\
    2122:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001447
- :tinyuri: http://tinyurl.com/4zqa9d
  :path: 
  - ActiveRecord
  - Base
  :method: attributes_before_type_cast
  :description: |+
    
        attributes_before_type_cast()
    Returns a hash of cloned attributes before typecasting and
    deserialization.
    
    
    
          # File vendor/rails/activerecord/lib/active_record/base.rb, line 2147
    2147:       def attributes_before_type_cast
    2148:         clone_attributes :read_attribute_before_type_cast
    2149:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001449
- :tinyuri: http://tinyurl.com/44lf6u
  :path: 
  - ActionController
  - HttpAuthentication
  - Basic
  :method: authenticate
  :description: |+
    
        authenticate(controller, &login_procedure)
    
    
        # File vendor/rails/actionpack/lib/action_controller/http_authentication.rb, line 95
    95:       def authenticate(controller, &login_procedure)
    96:         unless authorization(controller.request).blank?
    97:           login_procedure.call(*user_name_and_password(controller.request))
    98:         end
    99:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/HttpAuthentication/Basic.html#M000207
- :tinyuri: http://tinyurl.com/4wv5bt
  :path: 
  - ActionController
  - HttpAuthentication
  - Basic
  - ControllerMethods
  :method: authenticate_or_request_with_http_basic
  :description: |+
    
        authenticate_or_request_with_http_basic(realm = "Application", &login_procedure)
    
    
        # File vendor/rails/actionpack/lib/action_controller/http_authentication.rb, line 82
    82:         def authenticate_or_request_with_http_basic(realm = "Application", &login_procedure)
    83:           authenticate_with_http_basic(&login_procedure) || request_http_basic_authentication(realm)
    84:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/HttpAuthentication/Basic/ControllerMethods.html#M000213
- :tinyuri: http://tinyurl.com/3jvtka
  :path: 
  - ActionController
  - HttpAuthentication
  - Basic
  - ControllerMethods
  :method: authenticate_with_http_basic
  :description: |+
    
        authenticate_with_http_basic(&login_procedure)
    
    
        # File vendor/rails/actionpack/lib/action_controller/http_authentication.rb, line 86
    86:         def authenticate_with_http_basic(&login_procedure)
    87:           HttpAuthentication::Basic.authenticate(self, &login_procedure)
    88:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/HttpAuthentication/Basic/ControllerMethods.html#M000214
- :tinyuri: http://tinyurl.com/4y3omq
  :path: 
  - ActionController
  - HttpAuthentication
  - Basic
  :method: authentication_request
  :description: |+
    
        authentication_request(controller, realm)
    
    
         # File vendor/rails/actionpack/lib/action_controller/http_authentication.rb, line 120
    120:       def authentication_request(controller, realm)
    121:         controller.headers["WWW-Authenticate"] = %(Basic realm="#{realm.gsub(/"/, "")}")
    122:         controller.send! :render, :text => "HTTP Basic: Access denied.\n", :status => :unauthorized
    123:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/HttpAuthentication/Basic.html#M000212
- :tinyuri: http://tinyurl.com/4tderp
  :path: 
  - ActionController
  - RequestForgeryProtection
  :method: authenticity_token_from_cookie_session
  :description: |+
    
        authenticity_token_from_cookie_session()
    No secret was given, so assume this is a cookie session store.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/request_forgery_protection.rb, line 123
    123:       def authenticity_token_from_cookie_session
    124:         session[:csrf_id] ||= CGI::Session.generate_unique_id
    125:         session.dbman.generate_digest(session[:csrf_id])
    126:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/RequestForgeryProtection.html#M000298
- :tinyuri: http://tinyurl.com/3ryalz
  :path: 
  - ActionController
  - RequestForgeryProtection
  :method: authenticity_token_from_session_id
  :description: |+
    
        authenticity_token_from_session_id()
    Generates a unique digest using the session_id and the CSRF secret.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/request_forgery_protection.rb, line 112
    112:       def authenticity_token_from_session_id
    113:         key = if request_forgery_protection_options[:secret].respond_to?(:call)
    114:           request_forgery_protection_options[:secret].call(@session)
    115:         else
    116:           request_forgery_protection_options[:secret]
    117:         end
    118:         digest = request_forgery_protection_options[:digest] ||= 'SHA1'
    119:         OpenSSL::HMAC.hexdigest(OpenSSL::Digest::Digest.new(digest), key.to_s, session.session_id.to_s)
    120:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/RequestForgeryProtection.html#M000297
- :tinyuri: http://tinyurl.com/4mbxqh
  :path: 
  - ActionController
  - HttpAuthentication
  - Basic
  :method: authorization
  :description: |+
    
        authorization(request)
    
    
         # File vendor/rails/actionpack/lib/action_controller/http_authentication.rb, line 105
    105:       def authorization(request)
    106:         request.env['HTTP_AUTHORIZATION']   ||
    107:         request.env['X-HTTP_AUTHORIZATION'] ||
    108:         request.env['X_HTTP_AUTHORIZATION'] ||
    109:         request.env['REDIRECT_X_HTTP_AUTHORIZATION']
    110:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/HttpAuthentication/Basic.html#M000209
- :tinyuri: http://tinyurl.com/4865oy
  :path: 
  - ActionView
  - Helpers
  - AssetTagHelper
  :method: auto_discovery_link_tag
  :description: |+
    
        auto_discovery_link_tag(type = :rss, url_options = {}, tag_options = {})
    Returns a link tag that browsers and news readers can use to auto-detect an
    RSS or ATOM feed. The type can either be :rss (default)
    or :atom. Control the link options in url_for format using the
    url_options. You can modify the LINK tag itself in
    tag_options.
    
    Options:
    
    :rel - Specify the relation of this link, defaults to
    "alternate"
    
    
    :type - Override the auto-generated mime type
    
    
    :title - Specify the title of the link, defaults to the
    type
    
    
    
    Examples
    
     auto_discovery_link_tag # =>
        <link rel="alternate" type="application/rss+xml" title="RSS" href="http://www.currenthost.com/controller/action" />
     auto_discovery_link_tag(:atom) # =>
        <link rel="alternate" type="application/atom+xml" title="ATOM" href="http://www.currenthost.com/controller/action" />
     auto_discovery_link_tag(:rss, {:action => "feed"}) # =>
        <link rel="alternate" type="application/rss+xml" title="RSS" href="http://www.currenthost.com/controller/feed" />
     auto_discovery_link_tag(:rss, {:action => "feed"}, {:title => "My RSS"}) # =>
        <link rel="alternate" type="application/rss+xml" title="My RSS" href="http://www.currenthost.com/controller/feed" />
     auto_discovery_link_tag(:rss, {:controller => "news", :action => "feed"}) # =>
        <link rel="alternate" type="application/rss+xml" title="RSS" href="http://www.currenthost.com/news/feed" />
     auto_discovery_link_tag(:rss, "http://www.example.com/feed.rss", {:title => "Example RSS"}) # =>
        <link rel="alternate" type="application/rss+xml" title="Example RSS" href="http://www.example.com/feed" />
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/asset_tag_helper.rb, line 116
    116:       def auto_discovery_link_tag(type = :rss, url_options = {}, tag_options = {})
    117:         tag(
    118:           "link",
    119:           "rel"   => tag_options[:rel] || "alternate",
    120:           "type"  => tag_options[:type] || Mime::Type.lookup_by_extension(type.to_s).to_s,
    121:           "title" => tag_options[:title] || type.to_s.upcase,
    122:           "href"  => url_options.is_a?(Hash) ? url_for(url_options.merge(:only_path => false)) : url_options
    123:         )
    124:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/AssetTagHelper.html#M001021
- :tinyuri: http://tinyurl.com/53fstx
  :path: 
  - ActiveSupport
  - BufferedLogger
  :method: auto_flush
  :description: |+
    
        auto_flush()
    
    
         # File vendor/rails/activesupport/lib/active_support/buffered_logger.rb, line 104
    104:       def auto_flush
    105:         flush if @buffer.size >= @auto_flushing
    106:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/BufferedLogger.html#M000770
- :tinyuri: http://tinyurl.com/3fzx75
  :path: 
  - ActiveSupport
  - BufferedLogger
  :method: auto_flushing=
  :description: "\n  \n    auto_flushing=(period)\n  \n  \n  \n\
    Set the auto-flush period. Set to\n\
    true to flush after every log\n\
    message, to an integer to flush\n\
    every N messages, or to false, nil, or zero to never auto-flush. If you turn auto-flushing\n\
    off, be sure to regularly flush\n\
    83:     def auto_flushing=(period)\n\
    84:       @auto_flushing =\n\
    85:         case period\n\
    86:         when true;                1\n\
    87:         when false, nil, 0;       MAX_BUFFER_SIZE\n\
    88:         when Integer;             period\n\
    89:         else raise ArgumentError, \"Unrecognized auto_flushing period: #{period.inspect}\"\n\
    90:         end\n\
    91:     end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/BufferedLogger.html#M000767
- :tinyuri: http://tinyurl.com/2t2bmy
  :path: 
  - ActionView
  - Helpers
  - TextHelper
  :method: auto_link
  :description: |+
    
        auto_link(text, link = :all, href_options = {}, &block)
    Turns all URLs and e-mail addresses into clickable links. The link
    parameter will limit what should be linked. You can add HTML attributes to
    the links using href_options. Options for link are
    :all (default), :email_addresses, and :urls. If
    a block is given, each URL and e-mail address is yielded and the result is
    used as the link text.
    
    Examples
    
      auto_link("Go to http://www.rubyonrails.org and say hello to david@loudthinking.com")
      # => "Go to <a href=\"http://www.rubyonrails.org\">http://www.rubyonrails.org</a> and
      #     say hello to <a href=\"mailto:david@loudthinking.com\">david@loudthinking.com</a>"
    
      auto_link("Visit http://www.loudthinking.com/ or e-mail david@loudthinking.com", :urls)
      # => "Visit <a href=\"http://www.loudthinking.com/\">http://www.loudthinking.com/</a>
      #     or e-mail david@loudthinking.com"
    
      auto_link("Visit http://www.loudthinking.com/ or e-mail david@loudthinking.com", :email_addresses)
      # => "Visit http://www.loudthinking.com/ or e-mail <a href=\"mailto:david@loudthinking.com\">david@loudthinking.com</a>"
    
      post_body = "Welcome to my new blog at http://www.myblog.com/.  Please e-mail me at me@email.com."
      auto_link(post_body, :all, :target => '_blank') do |text|
        truncate(text, 15)
      end
      # => "Welcome to my new blog at <a href=\"http://www.myblog.com/\" target=\"_blank\">http://www.m...</a>.
            Please e-mail me at <a href=\"mailto:me@email.com\">me@email.com</a>."
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/text_helper.rb, line 307
    307:       def auto_link(text, link = :all, href_options = {}, &block)
    308:         return '' if text.blank?
    309:         case link
    310:           when :all             then auto_link_email_addresses(auto_link_urls(text, href_options, &block), &block)
    311:           when :email_addresses then auto_link_email_addresses(text, &block)
    312:           when :urls            then auto_link_urls(text, href_options, &block)
    313:         end
    314:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/TextHelper.html#M001058
- :tinyuri: http://tinyurl.com/4arnc4
  :path: 
  - ActiveRecord
  - Calculations
  - ClassMethods
  :method: average
  :description: |+
    
        average(column_name, options = {})
    Calculates the average value on a
    given column. The value is returned as a float. See calculate for examples with options.
    
    
      Person.average('age')
    
    
    
        # File vendor/rails/activerecord/lib/active_record/calculations.rb, line 52
    52:       def average(column_name, options = {})
    53:         calculate(:avg, column_name, options)
    54:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Calculations/ClassMethods.html#M001338
- :tinyuri: http://tinyurl.com/3tms9l
  :path: 
  - Rails
  - Generator
  - Scripts
  - Base
  :method: banner
  :description: |+
    
        banner()
    Override with your own script usage banner.
    
    
    
        # File vendor/rails/railties/lib/rails_generator/scripts.rb, line 40
    40:           def banner
    41:             "Usage: #{$0} generator [options] [args]"
    42:           end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Scripts/Base.html#M001472
- :tinyuri: http://tinyurl.com/3mke8d
  :path: 
  - Rails
  - Generator
  - NamedBase
  :method: banner
  :description: |+
    
        banner()
    Override with your own usage banner.
    
    
    
         # File vendor/rails/railties/lib/rails_generator/base.rb, line 216
    216:         def banner
    217:           "Usage: #{$0} #{spec.name} #{spec.name.camelize}Name [options]"
    218:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/NamedBase.html#M001545
- :tinyuri: http://tinyurl.com/4hu4dc
  :path: 
  - Rails
  - Generator
  - Base
  :method: banner
  :description: |+
    
        banner()
    Override with your own usage banner.
    
    
    
         # File vendor/rails/railties/lib/rails_generator/base.rb, line 164
    164:         def banner
    165:           "Usage: #{$0} #{spec.name} [options]"
    166:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Base.html#M001568
- :tinyuri: http://tinyurl.com/43p9at
  :path: 
  - Rails
  - Generator
  - Options
  :method: banner
  :description: |+
    
        banner()
    Override with your own usage banner.
    
    
    
         # File vendor/rails/railties/lib/rails_generator/options.rb, line 107
    107:         def banner
    108:           "Usage: #{$0} [options]"
    109:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Options.html#M001482
- :tinyuri: http://tinyurl.com/4wywfs
  :path: 
  - ActiveRecord
  - Base
  :method: base_class
  :description: |+
    
        base_class()
    Returns the base AR subclass that this class descends from. If A extends
    AR::Base, A.base_class will return A. If B descends from A through some
    arbitrarily deep hierarchy, B.base_class will return A.
    
    
    
          # File vendor/rails/activerecord/lib/active_record/base.rb, line 1211
    1211:       def base_class
    1212:         class_of_active_record_descendant(self)
    1213:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001414
- :tinyuri: http://tinyurl.com/3j2no9
  :path: 
  - ActiveRecord
  - Base
  :method: becomes
  :description: |+
    
        becomes(klass)
    Returns an instance of the specified klass with the attributes of the current record. This is
    mostly useful in relation to single-table inheritance structures where you
    want a subclass to appear as the superclass. This can be used along with
    record identification in Action Pack to allow, say, Client < Company to
    do something like render :partial => @client.becomes(Company) to render
    that instance using the companies/company partial instead of
    clients/client.
    
    
    Note: The new instance will share a link to
    the same attributes as the original class.
    So any change to the attributes in either
    instance will affect the other.
    
    
    
          # File vendor/rails/activerecord/lib/active_record/base.rb, line 2015
    2015:       def becomes(klass)
    2016:         returning klass.new do |became|
    2017:           became.instance_variable_set("@attributes", @attributes)
    2018:           became.instance_variable_set("@attributes_cache", @attributes_cache)
    2019:           became.instance_variable_set("@new_record", new_record?)
    2020:         end
    2021:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001434
- :tinyuri: http://tinyurl.com/4ecdt8
  :path: 
  - ActiveRecord
  - Callbacks
  :method: before_create
  :description: "\n  \n    before_create()\n  \n  \n  \n\
    Is called before Base.save on new objects that\n\
    221:     def before_create() end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html#M001299
- :tinyuri: http://tinyurl.com/4sh8vo
  :path: 
  - ActiveRecord
  - Callbacks
  :method: before_destroy
  :description: |+
    
        before_destroy()
    Is called before Base.destroy.
    
    
    Note: If you need to destroy or nullify associated
    records first, use the :dependent option on your associations.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/callbacks.rb, line 286
    286:     def before_destroy() end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html#M001309
- :tinyuri: http://tinyurl.com/3q54ph
  :path: 
  - ActionController
  - Dispatcher
  :method: before_dispatch
  :description: |+
    
        before_dispatch(*method_names, &block)
    Declare a block to be called before each dispatch. Run in the order declared.
    
    
    
        # File vendor/rails/actionpack/lib/action_controller/dispatcher.rb, line 14
    14:       def before_dispatch(*method_names, &block)
    15:         callbacks[:before].concat method_names
    16:         callbacks[:before] << block if block_given?
    17:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Dispatcher.html#M000465
- :tinyuri: http://tinyurl.com/4lerug
  :path: 
  - ActionController
  - Filters
  - ClassMethods
  :method: before_filter
  :description: |
    
        before_filter(*filters, &block)
    Alias for append_before_filter
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Filters/ClassMethods.html#M000312
- :tinyuri: http://tinyurl.com/2dz2ea
  :path: 
  - ActiveRecord
  - Callbacks
  :method: before_save
  :description: "\n  \n    before_save()\n  \n  \n  \n\
    Is called before Base.save (regardless of whether\n\
    204:     def before_save() end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html#M001297
- :tinyuri: http://tinyurl.com/479wsx
  :path: 
  - ActiveRecord
  - Callbacks
  :method: before_update
  :description: |+
    
        before_update()
    Is called before Base.save on existing objects that have a
    record.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/callbacks.rb, line 234
    234:     def before_update() end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html#M001301
- :tinyuri: http://tinyurl.com/3habw7
  :path: 
  - ActiveRecord
  - Callbacks
  :method: before_validation
  :description: |+
    
        before_validation()
    Is called before Validations.validate (which is
    part of the Base.save call).
    
    
    
         # File vendor/rails/activerecord/lib/active_record/callbacks.rb, line 248
    248:     def before_validation() end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html#M001303
- :tinyuri: http://tinyurl.com/4ck246
  :path: 
  - ActiveRecord
  - Callbacks
  :method: before_validation_on_create
  :description: "\n  \n    before_validation_on_create()\n  \n  \n  \n\
    Is called before Validations.validate (which is\n\
    part of the Base.save call) on new\n\
    255:     def before_validation_on_create() end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html#M001305
- :tinyuri: http://tinyurl.com/3vf7yn
  :path: 
  - ActiveRecord
  - Callbacks
  :method: before_validation_on_update
  :description: |+
    
        before_validation_on_update()
    Is called before Validations.validate (which is
    part of the Base.save call) on
    existing objects that have a record.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/callbacks.rb, line 263
    263:     def before_validation_on_update() end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html#M001307
- :tinyuri: http://tinyurl.com/4qou6m
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - DatabaseStatements
  :method: begin_db_transaction
  :description: |+
    
        begin_db_transaction()
    Begins the transaction (and
    turns off auto-committing).
    
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 87
    87:       def begin_db_transaction()    end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#M001183
- :tinyuri: http://tinyurl.com/4jmg5e
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - PostgreSQLAdapter
  :method: begin_db_transaction
  :description: |+
    
        begin_db_transaction()
    Begins a transaction.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 422
    422:       def begin_db_transaction
    423:         execute "BEGIN"
    424:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#M001263
- :tinyuri: http://tinyurl.com/45hl2v
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Calculations
  :method: beginning_of_day
  :description: |+
    
        beginning_of_day()
    Returns a new Time representing the start of the day (0:00)
    
    
      This method is also aliased as
      midnight
      at_midnight
      at_beginning_of_day
    
    
    
         # File vendor/rails/activesupport/lib/active_support/core_ext/time/calculations.rb, line 157
    157:         def beginning_of_day
    158:           (self - self.seconds_since_midnight).change(:usec => 0)
    159:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Calculations.html#M000592
- :tinyuri: http://tinyurl.com/3ks2gb
  :path: 
  - ActiveSupport
  - CoreExtensions
  - DateTime
  - Calculations
  :method: beginning_of_day
  :description: |+
    
        beginning_of_day()
    Returns a new DateTime representing the start of the day (0:00)
    
    
      This method is also aliased as
      midnight
      at_midnight
      at_beginning_of_day
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 63
    63:         def beginning_of_day
    64:           change(:hour => 0)
    65:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/DateTime/Calculations.html#M000728
- :tinyuri: http://tinyurl.com/4ywuzr
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Date
  - Calculations
  :method: beginning_of_day
  :description: |+
    
        beginning_of_day()
    Converts Date to a Time (or DateTime if necessary) with the time portion
    set to the beginning of the day (0:00)
    
    
      This method is also aliased as
      midnight
      at_midnight
      at_beginning_of_day
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/date/calculations.rb, line 42
    42:         def beginning_of_day
    43:           to_time
    44:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Date/Calculations.html#M000683
- :tinyuri: http://tinyurl.com/4u9knq
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Date
  - Calculations
  :method: beginning_of_month
  :description: |+
    
        beginning_of_month()
    Returns a new ; DateTime objects will have time set to 0:00DateTime
    representing the start of the month (1st of the month; DateTime objects
    will have time set to 0:00)
    
    
      This method is also aliased as
      at_beginning_of_month
    
    
    
         # File vendor/rails/activesupport/lib/active_support/core_ext/date/calculations.rb, line 152
    152:         def beginning_of_month
    153:           self.acts_like?(:time) ? change(:day => 1,:hour => 0, :min => 0, :sec => 0) : change(:day => 1)
    154:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Date/Calculations.html#M000702
- :tinyuri: http://tinyurl.com/4n76mz
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Calculations
  :method: beginning_of_month
  :description: |+
    
        beginning_of_month()
    Returns a new Time representing the start of the month (1st of the month,
    0:00)
    
    
      This method is also aliased as
      at_beginning_of_month
    
    
    
         # File vendor/rails/activesupport/lib/active_support/core_ext/time/calculations.rb, line 170
    170:         def beginning_of_month
    171:           #self - ((self.mday-1).days + self.seconds_since_midnight)
    172:           change(:day => 1,:hour => 0, :min => 0, :sec => 0, :usec => 0)
    173:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Calculations.html#M000597
- :tinyuri: http://tinyurl.com/54cypy
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Date
  - Calculations
  :method: beginning_of_quarter
  :description: |+
    
        beginning_of_quarter()
    Returns a new Date/DateTime representing the start of the quarter (1st of
    january, april, july, october; DateTime objects will have time set to 0:00)
    
    
      This method is also aliased as
      at_beginning_of_quarter
    
    
    
         # File vendor/rails/activesupport/lib/active_support/core_ext/date/calculations.rb, line 165
    165:         def beginning_of_quarter
    166:           beginning_of_month.change(:month => [10, 7, 4, 1].detect { |m| m <= self.month })
    167:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Date/Calculations.html#M000706
- :tinyuri: http://tinyurl.com/3eehkc
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Calculations
  :method: beginning_of_quarter
  :description: |+
    
        beginning_of_quarter()
    Returns a new Time representing the start of the quarter (1st of january,
    april, july, october, 0:00)
    
    
      This method is also aliased as
      at_beginning_of_quarter
    
    
    
         # File vendor/rails/activesupport/lib/active_support/core_ext/time/calculations.rb, line 185
    185:         def beginning_of_quarter
    186:           beginning_of_month.change(:month => [10, 7, 4, 1].detect { |m| m <= self.month })
    187:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Calculations.html#M000601
- :tinyuri: http://tinyurl.com/3sjcms
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Date
  - Calculations
  :method: beginning_of_week
  :description: |+
    
        beginning_of_week()
    Returns a new Date/DateTime representing the "start" of this week
    (i.e, Monday; DateTime objects will have time set to 0:00)
    
    
      This method is also aliased as
      monday
      at_beginning_of_week
    
    
    
         # File vendor/rails/activesupport/lib/active_support/core_ext/date/calculations.rb, line 136
    136:         def beginning_of_week
    137:           days_to_monday = self.wday!=0 ? self.wday-1 : 6
    138:           result = self - days_to_monday
    139:           self.acts_like?(:time) ? result.midnight : result
    140:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Date/Calculations.html#M000698
- :tinyuri: http://tinyurl.com/3lgvlk
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Calculations
  :method: beginning_of_week
  :description: |+
    
        beginning_of_week()
    Returns a new Time representing the "start" of this week (Monday,
    0:00)
    
    
      This method is also aliased as
      monday
      at_beginning_of_week
    
    
    
         # File vendor/rails/activesupport/lib/active_support/core_ext/time/calculations.rb, line 143
    143:         def beginning_of_week
    144:           days_to_monday = self.wday!=0 ? self.wday-1 : 6
    145:           (self - days_to_monday.days).midnight
    146:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Calculations.html#M000588
- :tinyuri: http://tinyurl.com/3hw84g
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Calculations
  :method: beginning_of_year
  :description: |+
    
        beginning_of_year()
    Returns a new Time representing the start of the year (1st of january,
    0:00)
    
    
      This method is also aliased as
      at_beginning_of_year
    
    
    
         # File vendor/rails/activesupport/lib/active_support/core_ext/time/calculations.rb, line 191
    191:         def beginning_of_year
    192:           change(:month => 1,:day => 1,:hour => 0, :min => 0, :sec => 0, :usec => 0)
    193:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Calculations.html#M000603
- :tinyuri: http://tinyurl.com/4d8v9f
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Date
  - Calculations
  :method: beginning_of_year
  :description: |+
    
        beginning_of_year()
    Returns a new Date/DateTime representing the start of the year (1st of
    january; DateTime objects will have time set to 0:00)
    
    
      This method is also aliased as
      at_beginning_of_year
    
    
    
         # File vendor/rails/activesupport/lib/active_support/core_ext/date/calculations.rb, line 171
    171:         def beginning_of_year
    172:           self.acts_like?(:time) ? change(:month => 1, :day => 1, :hour => 0, :min => 0, :sec => 0) : change(:month => 1, :day => 1)
    173:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Date/Calculations.html#M000708
- :tinyuri: http://tinyurl.com/39os2p
  :path: 
  - ActiveRecord
  - Associations
  - ClassMethods
  :method: belongs_to
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html#M001105
- :tinyuri: http://tinyurl.com/466h87
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - TableDefinition
  :method: belongs_to
  :description: |
    
        belongs_to(*args)
    Alias for references
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#M001225
- :tinyuri: http://tinyurl.com/3uboeu
  :path: 
  - ActionController
  - RequestProfiler
  - Sandbox
  :method: benchmark
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionController/RequestProfiler/Sandbox.html#M000391
- :tinyuri: http://tinyurl.com/44e5g5
  :path: 
  - ActionController
  - Benchmarking
  - ClassMethods
  :method: benchmark
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionController/Benchmarking/ClassMethods.html#M000290
- :tinyuri: http://tinyurl.com/3jojtz
  :path: 
  - ActionController
  - RequestProfiler
  :method: benchmark
  :description: |+
    
        benchmark(sandbox)
    
    
        # File vendor/rails/actionpack/lib/action_controller/request_profiler.rb, line 81
    81:     def benchmark(sandbox)
    82:       sandbox.request_count = 0
    83:       elapsed = sandbox.benchmark(options[:n]).to_f
    84:       count = sandbox.request_count.to_i
    85:       puts '%.2f sec, %d requests, %d req/sec' % [elapsed, count, count / elapsed]
    86:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/RequestProfiler.html#M000383
- :tinyuri: http://tinyurl.com/4t654x
  :path: 
  - ActiveRecord
  - Base
  :method: benchmark
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001411
- :tinyuri: http://tinyurl.com/538j58
  :path: 
  - ActionView
  - Helpers
  - BenchmarkHelper
  :method: benchmark
  :description: "\n  \n    benchmark(message = \"Benchmarking\", level = :info) {|| ...}\n  \n  \n  \n\
    Allows you to measure the execution time of a block in a template and\n\
    records the result to the log. Wrap this block around expensive operations\n\
    or possible bottlenecks to get a time reading for the operation. For\n\
    example, let\xE2\x80\x98s say you thought your file processing method was taking\n\
    too long; you could wrap it in a benchmark block.\n\n\n <% benchmark \"Process data files\" do %>\n   <%= expensive_files_operation %>\n <% end %>\n\n\n\
    That would add something like \"Process data files (0.34523)\" to\n\
    the log, which you can then use to compare timings when optimizing your\n\
    code.\n\n\n\
    You may give an optional logger level as the second argument (:debug,\n\
    23:       def benchmark(message = \"Benchmarking\", level = :info)\n\
    24:         if @logger\n\
    25:           real = Benchmark.realtime { yield }\n\
    26:           @logger.send level, \"#{message} (#{'%.5f' % real})\"\n\
    27:         end\n\
    28:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/BenchmarkHelper.html#M000930
- :tinyuri: http://tinyurl.com/4op8ns
  :path: 
  - ActionController
  - RequestProfiler
  - Sandbox
  :method: benchmark
  :description: |+
    
        benchmark(n, script)
    
    
        # File vendor/rails/actionpack/lib/action_controller/request_profiler.rb, line 10
    10:       def self.benchmark(n, script)
    11:         new(script).benchmark(n)
    12:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/RequestProfiler/Sandbox.html#M000389
- :tinyuri: http://tinyurl.com/4hmrmk
  :path: 
  - RailsEnvironment
  :method: best_install_method
  :description: |+
    
        best_install_method()
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 115
    115:   def best_install_method
    116:     return :http unless use_svn?
    117:     case
    118:       when use_externals? then :externals
    119:       when use_checkout? then :checkout
    120:       else :export
    121:     end
    122:   end
    
    
  :uri: http://api.rubyonrails.org/classes/RailsEnvironment.html#M000059
- :tinyuri: http://tinyurl.com/4vrmp3
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - Column
  :method: binary_to_string
  :description: |+
    
        binary_to_string(value)
    Used to convert from BLOBs to Strings
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 111
    111:         def binary_to_string(value)
    112:           value
    113:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/Column.html#M001206
- :tinyuri: http://tinyurl.com/565eu4
  :path: 
  - Object
  :method: blank?
  :description: "\n  \n    blank?()\n  \n  \n  \n\
    An object is blank if it\xE2\x80\x98s nil, empty, or a whitespace string. For\n\
    example, \"\", \" \", nil, [], and {} are blank.\n\n\n\
    This simplifies\n\n\n  if !address.nil? && !address.empty?\n\n\n\
    10:     respond_to?(:empty?) ? empty? : !self\n\
    11:   end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/Object.html#M000133
- :tinyuri: http://tinyurl.com/4s9w7w
  :path: 
  - ActionController
  - AbstractRequest
  :method: body
  :description: |+
    
        body()
    The request body is an IO input
    stream.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/request.rb, line 316
    316:     def body
    317:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/AbstractRequest.html#M000428
- :tinyuri: http://tinyurl.com/52cd97
  :path: 
  - Kernel
  :method: breakpoint
  :description: |+
    
        breakpoint()
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/kernel/debugger.rb, line 9
     9:   def breakpoint
    10:     RAILS_DEFAULT_LOGGER.info "\n***** The 'breakpoint' command has been renamed 'debugger' -- please change *****\n"
    11:     debugger
    12:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Kernel.html#M001638
- :tinyuri: http://tinyurl.com/3v7uav
  :path: 
  - Rails
  - Configuration
  :method: breakpoint_server
  :description: |+
    
        breakpoint_server(_ = nil)
    Deprecated options:
    
    
      This method is also aliased as
      breakpoint_server=
    
    
    
         # File vendor/rails/railties/lib/initializer.rb, line 449
    449:     def breakpoint_server(_ = nil)
    450:       $stderr.puts %(
    451:       *******************************************************************
    452:       * config.breakpoint_server has been deprecated and has no effect. *
    453:       *******************************************************************
    454:       )
    455:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Configuration.html#M001604
- :tinyuri: http://tinyurl.com/5xkyh5
  :path: 
  - Rails
  - Configuration
  :method: breakpoint_server=
  :description: |
    
        breakpoint_server=(_ = nil)
    Alias for breakpoint_server
    
  :uri: http://api.rubyonrails.org/classes/Rails/Configuration.html#M001605
- :tinyuri: http://tinyurl.com/3rn6qr
  :path: 
  - ActionView
  - Helpers
  - PrototypeHelper
  :method: build_callbacks
  :description: |+
    
        build_callbacks(options)
    
    
          # File vendor/rails/actionpack/lib/action_view/helpers/prototype_helper.rb, line 1055
    1055:       def build_callbacks(options)
    1056:         callbacks = {}
    1057:         options.each do |callback, code|
    1058:           if CALLBACKS.include?(callback)
    1059:             name = 'on' + callback.to_s.capitalize
    1060:             callbacks[name] = "function(request){#{code}}"
    1061:           end
    1062:         end
    1063:         callbacks
    1064:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/PrototypeHelper.html#M000973
- :tinyuri: http://tinyurl.com/3et4yt
  :path: 
  - ActionView
  - Helpers
  - PrototypeHelper
  :method: build_observer
  :description: |+
    
        build_observer(klass, name, options = {})
    
    
          # File vendor/rails/actionpack/lib/action_view/helpers/prototype_helper.rb, line 1038
    1038:       def build_observer(klass, name, options = {})
    1039:         if options[:with] && (options[:with] !~ /[\{=(.]/)
    1040:           options[:with] = "'#{options[:with]}=' + value"
    1041:         else
    1042:           options[:with] ||= 'value' unless options[:function]
    1043:         end
    1044: 
    1045:         callback = options[:function] || remote_function(options)
    1046:         javascript  = "new #{klass}('#{name}', "
    1047:         javascript << "#{options[:frequency]}, " if options[:frequency]
    1048:         javascript << "function(element, value) {"
    1049:         javascript << "#{callback}}"
    1050:         javascript << ", '#{options[:on]}'" if options[:on]
    1051:         javascript << ")"
    1052:         javascript_tag(javascript)
    1053:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/PrototypeHelper.html#M000972
- :tinyuri: http://tinyurl.com/3lvz34
  :path: 
  - ActionController
  - TestProcess
  :method: build_request_uri
  :description: |+
    
        build_request_uri(action, parameters)
    
    
         # File vendor/rails/actionpack/lib/action_controller/test_process.rb, line 440
    440:     def build_request_uri(action, parameters)
    441:       unless @request.env['REQUEST_URI']
    442:         options = @controller.send!(:rewrite_options, parameters)
    443:         options.update(:only_path => true, :action => action)
    444: 
    445:         url = ActionController::UrlRewriter.new(@request, parameters)
    446:         @request.set_REQUEST_URI(url.rewrite(options))
    447:       end
    448:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/TestProcess.html#M000199
- :tinyuri: http://tinyurl.com/4vd3aj
  :path: 
  - Rails
  - Configuration
  :method: builtin_directories
  :description: 
  :uri: http://api.rubyonrails.org/classes/Rails/Configuration.html#M001614
- :tinyuri: http://tinyurl.com/3wzmlg
  :path: 
  - ActionView
  - Helpers
  - UrlHelper
  :method: button_to
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/UrlHelper.html#M000914
- :tinyuri: http://tinyurl.com/3pg8k8
  :path: 
  - ActionView
  - Helpers
  - JavaScriptHelper
  :method: button_to_function
  :description: "\n  \n    button_to_function(name, *args, &block)\n  \n  \n  \n\
    Returns a button that\xE2\x80\x98ll trigger a JavaScript function using\n\
    the onclick handler.\n\n\n\
    The function argument can be omitted in favor of an\n\
    update_page block, which evaluates to a string when the template\n\
    is rendered (instead of making an Ajax request first).\n\n\n\
    113:       def button_to_function(name, *args, &block)\n\
    114:         html_options = args.extract_options!\n\
    115:         function = args[0] || ''\n\
    116: \n\
    117:         html_options.symbolize_keys!\n\
    118:         function = update_page(&block) if block_given?\n\
    119:         tag(:input, html_options.merge({ \n\
    120:           :type => \"button\", :value => name, \n\
    121:           :onclick => (html_options[:onclick] ? \"#{html_options[:onclick]}; \" : \"\") + \"#{function};\" \n\
    122:         }))\n\
    123:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/JavaScriptHelper.html#M001062
- :tinyuri: http://tinyurl.com/3glfqv
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Numeric
  - Bytes
  :method: byte
  :description: |
    
        byte()
    Alias for bytes
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Numeric/Bytes.html#M000659
- :tinyuri: http://tinyurl.com/3uqate
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Numeric
  - Bytes
  :method: bytes
  :description: |+
    
        bytes()
    
      This method is also aliased as
      byte
    
    
    
       # File vendor/rails/activesupport/lib/active_support/core_ext/numeric/bytes.rb, line 6
    6:         def bytes
    7:           self
    8:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Numeric/Bytes.html#M000658
- :tinyuri: http://tinyurl.com/4q3yyd
  :path: 
  - ActionView
  - Helpers
  - CacheHelper
  :method: cache
  :description: "\n  \n    cache(name = {}, &block)\n  \n  \n  \n\
    A method for caching fragments of a view rather than an entire action or\n\
    page. This technique is useful caching pieces like menus, lists of news\n\
    topics, static HTML fragments, and so on. This method takes a block that\n\
    contains the content you wish to cache. See ActionController::Caching::Fragments\n\
    for more information.\n\n\
    Examples\n\n\
    If you wanted to cache a navigation\n\
    menu, you could do the following.\n\n\n  <% cache do %>\n    <%= render :partial => \"menu\" %>\n  <% end %>\n\n\n\
    You can also cache static\n\
    content\xE2\x80\xA6\n\n\n  <% cache do %>\n     <p>Hello users!  Welcome to our website!</p>\n  <% end %>\n\n\n\
    34:       def cache(name = {}, &block)\n\
    35:         @controller.cache_erb_fragment(block, name)\n\
    36:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/CacheHelper.html#M001001
- :tinyuri: http://tinyurl.com/3nnts6
  :path: 
  - ActiveRecord
  - QueryCache
  :method: cache
  :description: |+
    
        cache() {|| ...}
    Enable the query cache within the
    block if Active Record is configured.
    
    
    
        # File vendor/rails/activerecord/lib/active_record/query_cache.rb, line 4
     4:     def cache(&block)
     5:       if ActiveRecord::Base.configurations.blank?
     6:         yield
     7:       else
     8:         connection.cache(&block)
     9:       end
    10:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/QueryCache.html#M001133
- :tinyuri: http://tinyurl.com/44soum
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - QueryCache
  :method: cache
  :description: |+
    
        cache() {|| ...}
    Enable the query cache within the
    block.
    
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb, line 31
    31:       def cache
    32:         old, @query_cache_enabled = @query_cache_enabled, true
    33:         @query_cache ||= {}
    34:         yield
    35:       ensure
    36:         clear_query_cache
    37:         @query_cache_enabled = old
    38:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/QueryCache.html#M001141
- :tinyuri: http://tinyurl.com/3k66b2
  :path: 
  - ActiveRecord
  - AttributeMethods
  - ClassMethods
  :method: cache_attribute?
  :description: |+
    
        cache_attribute?(attr_name)
    
    
         # File vendor/rails/activerecord/lib/active_record/attribute_methods.rb, line 107
    107:       def cache_attribute?(attr_name)
    108:         cached_attributes.include?(attr_name)
    109:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/AttributeMethods/ClassMethods.html#M001102
- :tinyuri: http://tinyurl.com/4fftgy
  :path: 
  - ActiveRecord
  - AttributeMethods
  - ClassMethods
  :method: cache_attributes
  :description: |+
    
        cache_attributes(*attribute_names)
    cache_attributes allows
    you to declare which converted attribute values should be cached. Usually
    caching only pays off for attributes with expensive conversion methods,
    like date columns (e.g. created_at, updated_at).
    
    
    
        # File vendor/rails/activerecord/lib/active_record/attribute_methods.rb, line 97
    97:       def cache_attributes(*attribute_names)
    98:         attribute_names.each {|attr| cached_attributes << attr.to_s}
    99:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/AttributeMethods/ClassMethods.html#M001100
- :tinyuri: http://tinyurl.com/4ybydz
  :path: 
  - ActionController
  - Caching
  - Fragments
  :method: cache_erb_fragment
  :description: |+
    
        cache_erb_fragment(block, name = {}, options = nil)
    Called by CacheHelper#cache
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/caching.rb, line 375
    375:       def cache_erb_fragment(block, name = {}, options = nil)
    376:         unless perform_caching then block.call; return end
    377: 
    378:         buffer = eval(ActionView::Base.erb_variable, block.binding)
    379: 
    380:         if cache = read_fragment(name, options)
    381:           buffer.concat(cache)
    382:         else
    383:           pos = buffer.length
    384:           block.call
    385:           write_fragment(name, buffer[pos..-1], options)
    386:         end
    387:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Caching/Fragments.html#M000260
- :tinyuri: http://tinyurl.com/48dfeq
  :path: 
  - Fixtures
  :method: cache_fixtures
  :description: |+
    
        cache_fixtures(connection, fixtures)
    
    
         # File vendor/rails/activerecord/lib/active_record/fixtures.rb, line 469
    469:   def self.cache_fixtures(connection, fixtures)
    470:     cache_for_connection(connection).update(fixtures.index_by(&:table_name))
    471:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Fixtures.html#M000153
- :tinyuri: http://tinyurl.com/3tu5xd
  :path: 
  - Fixtures
  :method: cache_for_connection
  :description: |+
    
        cache_for_connection(connection)
    
    
         # File vendor/rails/activerecord/lib/active_record/fixtures.rb, line 451
    451:   def self.cache_for_connection(connection)
    452:     @@all_cached_fixtures[connection.object_id] ||= {}
    453:     @@all_cached_fixtures[connection.object_id]
    454:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Fixtures.html#M000150
- :tinyuri: http://tinyurl.com/43wjyl
  :path: 
  - ActionController
  - Caching
  - Pages
  - ClassMethods
  :method: cache_page
  :description: |+
    
        cache_page(content, path)
    Manually cache the content in the key determined by path.
    Example:
    
    
      cache_page "I'm the cached content", "/lists/show"
    
    
    
        # File vendor/rails/actionpack/lib/action_controller/caching.rb, line 90
    90:         def cache_page(content, path)
    91:           return unless perform_caching
    92: 
    93:           benchmark "Cached page: #{page_cache_file(path)}" do
    94:             FileUtils.makedirs(File.dirname(page_cache_path(path)))
    95:             File.open(page_cache_path(path), "wb+") { |f| f.write(content) }
    96:           end
    97:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Caching/Pages/ClassMethods.html#M000256
- :tinyuri: http://tinyurl.com/4ejnkx
  :path: 
  - ActionController
  - Caching
  - Pages
  :method: cache_page
  :description: |+
    
        cache_page(content = nil, options = nil)
    Manually cache the content in the key determined by
    options. If no content is provided, the contents of response.body
    is used If no options are provided, the requested url is used. Example:
    
    
      cache_page "I'm the cached content", :controller => "lists", :action => "show"
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/caching.rb, line 140
    140:       def cache_page(content = nil, options = nil)
    141:         return unless perform_caching && caching_allowed
    142: 
    143:         path = case options
    144:           when Hash
    145:             url_for(options.merge(:only_path => true, :skip_relative_url_root => true, :format => params[:format]))
    146:           when String
    147:             options
    148:           else
    149:             request.path
    150:         end
    151: 
    152:         self.class.cache_page(content || response.body, path)
    153:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Caching/Pages.html#M000254
- :tinyuri: http://tinyurl.com/3qceg9
  :path: 
  - ActiveRecord
  - AttributeMethods
  - ClassMethods
  :method: cached_attributes
  :description: |+
    
        cached_attributes()
    returns the attributes where
    
    
    
         # File vendor/rails/activerecord/lib/active_record/attribute_methods.rb, line 102
    102:       def cached_attributes
    103:         @cached_attributes ||=
    104:           columns.select{|c| attribute_types_cached_by_default.include?(c.type)}.map(&:name).to_set
    105:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/AttributeMethods/ClassMethods.html#M001101
- :tinyuri: http://tinyurl.com/52qwno
  :path: 
  - Fixtures
  :method: cached_fixtures
  :description: |+
    
        cached_fixtures(connection, keys_to_fetch = nil)
    
    
         # File vendor/rails/activerecord/lib/active_record/fixtures.rb, line 460
    460:   def self.cached_fixtures(connection, keys_to_fetch = nil)
    461:     if keys_to_fetch
    462:       fixtures = cache_for_connection(connection).values_at(*keys_to_fetch)
    463:     else
    464:       fixtures = cache_for_connection(connection).values
    465:     end
    466:     fixtures.size > 1 ? fixtures : fixtures.first
    467:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Fixtures.html#M000152
- :tinyuri: http://tinyurl.com/3vmgpf
  :path: 
  - ActionController
  - Caching
  - Actions
  - ClassMethods
  :method: caches_action
  :description: |+
    
        caches_action(*actions)
    Declares that actions should be cached. See ActionController::Caching::Actions for details.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/caching.rb, line 207
    207:         def caches_action(*actions)
    208:           return unless perform_caching
    209:           around_filter(ActionCacheFilter.new(*actions))
    210:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Caching/Actions/ClassMethods.html#M000266
- :tinyuri: http://tinyurl.com/45ouqn
  :path: 
  - ActionController
  - Caching
  - Pages
  - ClassMethods
  :method: caches_page
  :description: "\n  \n    caches_page(*actions)\n  \n  \n  \n\
    Caches the actions using the page-caching approach that\xE2\x80\x98ll\n\
    store the cache in a path within the page_cache_directory that matches the\n\
    101:         def caches_page(*actions)\n\
    102:           return unless perform_caching\n\
    103:           actions = actions.map(&:to_s)\n\
    104:           after_filter { |c| c.cache_page if actions.include?(c.action_name) }\n\
    105:         end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionController/Caching/Pages/ClassMethods.html#M000257
- :tinyuri: http://tinyurl.com/4uguez
  :path: 
  - ActiveRecord
  - Calculations
  - ClassMethods
  :method: calculate
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Calculations/ClassMethods.html#M001342
- :tinyuri: http://tinyurl.com/3s4q8b
  :path: 
  - Logger
  - SimpleFormatter
  :method: call
  :description: 
  :uri: http://api.rubyonrails.org/classes/Logger/SimpleFormatter.html#M000128
- :tinyuri: http://tinyurl.com/499lar
  :path: 
  - ActionView
  - Helpers
  - PrototypeHelper
  - JavaScriptGenerator
  - GeneratorMethods
  :method: call
  :description: "\n  \n    call(function, *arguments, &block)\n  \n  \n  \n\
    Calls the JavaScript function, optionally with the given\n\
    arguments.\n\n\n\
    If a block is given, the block will be passed to a new JavaScriptGenerator;\n\
    the resulting JavaScript code will then be wrapped inside function() {\n\
    \xE2\x80\xA6 } and passed as the called function\xE2\x80\x98s final argument.\n\n\n\
    863:           def call(function, *arguments, &block)\n\
    864:             record \"#{function}(#{arguments_for_call(arguments, block)})\"\n\
    865:           end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#M000986
- :tinyuri: http://tinyurl.com/3eat8g
  :path: 
  - Logger
  - Formatter
  :method: call
  :description: |+
    
        call(severity, time, progname, msg)
    
    
        # File vendor/rails/activesupport/lib/active_support/clean_logger.rb, line 66
    66:       def call(severity, time, progname, msg)
    67:         Format % [severity[0..0], format_datetime(time), $$, severity, progname,
    68:         msg2str(msg)]
    69:       end
    
    
  :uri: http://api.rubyonrails.org/classes/Logger/Formatter.html#M000130
- :tinyuri: http://tinyurl.com/4npefv
  :path: 
  - ActiveSupport
  - CoreExtensions
  - String
  - Inflections
  :method: camelcase
  :description: |
    
        camelcase(first_letter = :upper)
    Alias for camelize
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/String/Inflections.html#M000743
- :tinyuri: http://tinyurl.com/42z5c7
  :path: 
  - ActiveSupport
  - CoreExtensions
  - String
  - Inflections
  :method: camelize
  :description: "\n  \n    camelize(first_letter = :upper)\n  \n  \n  \n\
    By default, camelize converts\n\
    strings to UpperCamelCase. If the argument to camelize is set to \":lower\"\n\
    then camelize produces\n\
    lowerCamelCase.\n\n\n\
    camelize will also convert\n\
    \xE2\x80\x99/\xE2\x80\x99 to \xE2\x80\x99::\xE2\x80\x99 which is useful for converting paths to\n\
    namespaces\n\n\n\
    46:         def camelize(first_letter = :upper)\n\
    47:           case first_letter\n\
    48:             when :upper then Inflector.camelize(self, true)\n\
    49:             when :lower then Inflector.camelize(self, false)\n\
    50:           end\n\
    51:         end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/String/Inflections.html#M000742
- :tinyuri: http://tinyurl.com/3hsjpk
  :path: 
  - Inflector
  :method: camelize
  :description: "\n  \n    camelize(lower_case_and_underscored_word, first_letter_in_uppercase = true)\n  \n  \n  \n\
    By default, camelize converts strings\n\
    to UpperCamelCase. If the argument to camelize is set to \":lower\"\n\
    then camelize produces lowerCamelCase.\n\n\n\
    camelize will also convert\n\
    \xE2\x80\x99/\xE2\x80\x99 to \xE2\x80\x99::\xE2\x80\x99 which is useful for converting paths to\n\
    namespaces\n\n\n\
    147:   def camelize(lower_case_and_underscored_word, first_letter_in_uppercase = true)\n\
    148:     if first_letter_in_uppercase\n\
    149:       lower_case_and_underscored_word.to_s.gsub(/\\/(.?)/) { \"::\" + $1.upcase }.gsub(/(^|_)(.)/) { $2.upcase }\n\
    150:     else\n\
    151:       lower_case_and_underscored_word.first + camelize(lower_case_and_underscored_word)[1..-1]\n\
    152:     end\n\
    153:   end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/Inflector.html#M001619
- :tinyuri: http://tinyurl.com/4ra5x2
  :path: 
  - ActiveSupport
  - Multibyte
  - Handlers
  - UTF8Handler
  :method: capitalize
  :description: |+
    
        capitalize(str)
    Returns a copy of str with the first character converted to
    uppercase and the remainder to lowercase
    
    
    
         # File vendor/rails/activesupport/lib/active_support/multibyte/handlers/utf8_handler.rb, line 276
    276:       def capitalize(str)
    277:         upcase(slice(str, 0..0)) + downcase(slice(str, 1..-1) || '')
    278:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Handlers/UTF8Handler.html#M000529
- :tinyuri: http://tinyurl.com/462stb
  :path: 
  - ActionView
  - Helpers
  - CaptureHelper
  :method: capture
  :description: "\n  \n    capture(*args, &block)\n  \n  \n  \n\
    The capture method allows you to\n\
    extract part of a template into a variable. You can then use this variable\n\
    anywhere in your templates or layout.\n\n\
    Examples\n\n\
    The capture method can be used in\n\
    ERb templates\xE2\x80\xA6\n\n\n  <% @greeting = capture do %>\n    Welcome to my shiny new web page!  The date and time is\n    <%= Time.now %>\n  <% end %>\n\n\n\
    \xE2\x80\xA6and Builder (RXML) templates.\n\n\n  @timestamp = capture do\n    \"The current timestamp is #{Time.now}.\"\n  end\n\n\n\
    33:       def capture(*args, &block)\n\
    34:         # execute the block\n\
    35:         begin\n\
    36:           buffer = eval(ActionView::Base.erb_variable, block.binding)\n\
    37:         rescue\n\
    38:           buffer = nil\n\
    39:         end\n\
    40:         \n\
    41:         if buffer.nil?\n\
    42:           capture_block(*args, &block).to_s\n\
    43:         else\n\
    44:           capture_erb_with_buffer(buffer, *args, &block).to_s\n\
    45:         end\n\
    46:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/CaptureHelper.html#M001068
- :tinyuri: http://tinyurl.com/3u833y
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - SQLiteAdapter
  :method: catch_schema_changes
  :description: |+
    
        catch_schema_changes() {|| ...}
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/sqlite_adapter.rb, line 345
    345:         def catch_schema_changes
    346:           return yield
    347:         rescue ActiveRecord::StatementInvalid => exception
    348:           if exception.message =~ /database schema has changed/
    349:             reconnect!
    350:             retry
    351:           else
    352:             raise
    353:           end
    354:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#M001248
- :tinyuri: http://tinyurl.com/4zfc6p
  :path: 
  - Builder
  - XmlMarkup
  :method: cdata!
  :description: |+
    
        cdata!(text)
    Insert a CDATA section into the XML markup.
    
    
    For example:
    
    
       xml.cdata!("text to be included in cdata")
           #=> <![CDATA[text to be included in cdata]]>
    
    
    
         # File vendor/rails/activesupport/lib/active_support/vendor/builder-2.1.2/builder/xmlmarkup.rb, line 259
    259:     def cdata!(text)
    260:       _ensure_no_block block_given?
    261:       _special("<![CDATA[", "]]>", text, nil)
    262:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Builder/XmlMarkup.html#M000895
- :tinyuri: http://tinyurl.com/44ah49
  :path: 
  - ActionView
  - Helpers
  - TagHelper
  :method: cdata_section
  :description: |+
    
        cdata_section(content)
    Returns a CDATA section with the given content. CDATA sections are
    used to escape blocks of text containing characters which would otherwise
    be recognized as markup. CDATA sections begin with the string
    <![CDATA[ and end with (and may not contain) the string
    ]]>.
    
    Examples
    
      cdata_section("<hello world>")
      # => <![CDATA[<hello world>]]>
    
      cdata_section(File.read("hello_world.txt"))
      # => <![CDATA[<hello from a text file]]>
    
    
    
        # File vendor/rails/actionpack/lib/action_view/helpers/tag_helper.rb, line 89
    89:       def cdata_section(content)
    90:         "<![CDATA[#{content}]]>"
    91:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/TagHelper.html#M001034
- :tinyuri: http://tinyurl.com/3qnczu
  :path: 
  - ActiveSupport
  - Multibyte
  - Handlers
  - UTF8Handler
  :method: center
  :description: "\n  \n    center(str, integer, padstr=' ')\n  \n  \n  \n\
    Works just like String#center, only integer specifies characters instead of\n\
    bytes.\n\n\n\
    217:       def center(str, integer, padstr=' ')\n\
    218:         justify(str, integer, :center, padstr)\n\
    219:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Handlers/UTF8Handler.html#M000520
- :tinyuri: http://tinyurl.com/534uqc
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Calculations
  :method: change
  :description: |+
    
        change(options)
    Returns a new Time where one or more of the elements have been changed
    according to the options parameter. The time options (hour,
    minute, sec, usec) reset cascadingly, so if only the hour is passed, then
    minute, sec, and usec is set to 0. If the hour and minute is passed, then
    sec and usec is set to 0.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/time/calculations.rb, line 61
    61:         def change(options)
    62:           ::Time.send(
    63:             self.utc? ? :utc_time : :local_time,
    64:             options[:year]  || self.year,
    65:             options[:month] || self.month,
    66:             options[:day]   || self.day,
    67:             options[:hour]  || self.hour,
    68:             options[:min]   || (options[:hour] ? 0 : self.min),
    69:             options[:sec]   || ((options[:hour] || options[:min]) ? 0 : self.sec),
    70:             options[:usec]  || ((options[:hour] || options[:min] || options[:sec]) ? 0 : self.usec)
    71:           )
    72:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Calculations.html#M000575
- :tinyuri: http://tinyurl.com/4agp9g
  :path: 
  - ActiveSupport
  - CoreExtensions
  - DateTime
  - Calculations
  :method: change
  :description: |+
    
        change(options)
    Returns a new DateTime where one or more of the elements have been changed
    according to the options parameter. The time options (hour,
    minute, sec) reset cascadingly, so if only the hour is passed, then minute
    and sec is set to 0. If the hour and minute is passed, then sec is set to
    0.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 27
    27:         def change(options)
    28:           ::DateTime.civil(
    29:             options[:year]  || self.year,
    30:             options[:month] || self.month,
    31:             options[:day]   || self.day,
    32:             options[:hour]  || self.hour,
    33:             options[:min]   || (options[:hour] ? 0 : self.min),
    34:             options[:sec]   || ((options[:hour] || options[:min]) ? 0 : self.sec),
    35:             options[:offset]  || self.offset,
    36:             options[:start]  || self.start
    37:           )
    38:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/DateTime/Calculations.html#M000723
- :tinyuri: http://tinyurl.com/4olkbw
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Date
  - Calculations
  :method: change
  :description: |+
    
        change(options)
    Returns a new Date where one or more of the elements have been changed
    according to the options parameter.
    
    
    Examples:
    
    
      Date.new(2007, 5, 12).change(:day => 1)                  # => Date.new(2007, 5, 1)
      Date.new(2007, 5, 12).change(:year => 2005, :month => 1) # => Date.new(2005, 1, 12)
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/date/calculations.rb, line 87
    87:         def change(options)
    88:           ::Date.new(
    89:             options[:year]  || self.year,
    90:             options[:month] || self.month,
    91:             options[:day]   || self.day
    92:           )
    93:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Date/Calculations.html#M000689
- :tinyuri: http://tinyurl.com/4voyd7
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - PostgreSQLAdapter
  :method: change_column
  :description: |+
    
        change_column(table_name, column_name, type, options = {})
    Changes the column of a table.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 606
    606:       def change_column(table_name, column_name, type, options = {})
    607:         begin
    608:           execute "ALTER TABLE #{table_name} ALTER COLUMN #{quote_column_name(column_name)} TYPE #{type_to_sql(type, options[:limit], options[:precision], options[:scale])}"
    609:         rescue ActiveRecord::StatementInvalid
    610:           # This is PostgreSQL 7.x, so we have to use a more arcane way of doing it.
    611:           begin_db_transaction
    612:           tmp_column_name = "#{column_name}_ar_tmp"
    613:           add_column(table_name, tmp_column_name, type, options)
    614:           execute "UPDATE #{table_name} SET #{quote_column_name(tmp_column_name)} = CAST(#{quote_column_name(column_name)} AS #{type_to_sql(type, options[:limit], options[:precision], options[:scale])})"
    615:           remove_column(table_name, column_name)
    616:           rename_column(table_name, tmp_column_name, column_name)
    617:           commit_db_transaction
    618:         end
    619: 
    620:         change_column_default(table_name, column_name, options[:default]) if options_include_default?(options)
    621:         change_column_null(table_name, column_name, options[:null], options[:default]) if options.key?(:null)
    622:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#M001275
- :tinyuri: http://tinyurl.com/4s6at3
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - SchemaStatements
  :method: change_column
  :description: "\n  \n    change_column(table_name, column_name, type, options = {})\n  \n  \n  \n\
    Changes the column\xE2\x80\x98s definition according to the new options. See TableDefinition#column for details\n\
    of the options you can use.\n\n\
    139:       def change_column(table_name, column_name, type, options = {})\n\
    140:         raise NotImplementedError, \"change_column is not implemented\"\n\
    141:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#M001155
- :tinyuri: http://tinyurl.com/46wypc
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - SchemaStatements
  :method: change_column_default
  :description: |+
    
        change_column_default(table_name, column_name, default)
    Sets a new default value for a column. If you want to set the default value
    to NULL, you are out of luck. You need to DatabaseStatements#execute the
    appropriate SQL statement yourself.
    
    Examples
    
     change_column_default(:suppliers, :qualification, 'new')
     change_column_default(:accounts, :authorized, 1)
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 149
    149:       def change_column_default(table_name, column_name, default)
    150:         raise NotImplementedError, "change_column_default is not implemented"
    151:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#M001156
- :tinyuri: http://tinyurl.com/4c94yz
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - PostgreSQLAdapter
  :method: change_column_default
  :description: |+
    
        change_column_default(table_name, column_name, default)
    Changes the default value of a table column.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 625
    625:       def change_column_default(table_name, column_name, default)
    626:         execute "ALTER TABLE #{table_name} ALTER COLUMN #{quote_column_name(column_name)} SET DEFAULT #{quote(default)}"
    627:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#M001276
- :tinyuri: http://tinyurl.com/4qdw4y
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - PostgreSQLAdapter
  :method: change_column_null
  :description: |+
    
        change_column_null(table_name, column_name, null, default = nil)
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 629
    629:       def change_column_null(table_name, column_name, null, default = nil)
    630:         unless null || default.nil?
    631:           execute("UPDATE #{table_name} SET #{quote_column_name(column_name)}=#{quote(default)} WHERE #{quote_column_name(column_name)} IS NULL")
    632:         end
    633:         execute("ALTER TABLE #{table_name} ALTER #{quote_column_name(column_name)} #{null ? 'DROP' : 'SET'} NOT NULL")
    634:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#M001277
- :tinyuri: http://tinyurl.com/456nxa
  :path: 
  - ActiveSupport
  - CoreExtensions
  - String
  - Unicode
  :method: chars
  :description: "\n  \n    chars()\n  \n  \n  \n\
    chars is a Unicode safe proxy for string methods. It creates\n\
    and returns an instance of the ActiveSupport::Multibyte::Chars class\n\
    which encapsulates the original string. A Unicode safe version of all the String methods are\n\
    defined on this proxy class. Undefined methods are forwarded to String, so\n\
    all of the string overrides can also be called through the chars proxy.\n\n\n  name = 'Claus M\xC3\xBCller'\n  name.reverse #=> \"rell??M sualC\"\n  name.length #=> 13\n\n  name.chars.reverse.to_s #=> \"rell\xC3\xBCM sualC\"\n  name.chars.length #=> 12\n\n\n\
    All the methods on the chars proxy which\n\
    normally return a string will return a Chars object. This allows method\n\
    chaining on the result of any of these methods.\n\n\n  name.chars.reverse.length #=> 12\n\n\n\
    The Char object tries to be as interchangeable with String objects as\n\
    possible: sorting and comparing between String and Char work like expected.\n\
    The bang! methods change the internal string representation in the Chars\n\
    object. Interoperability problems can be resolved easily with a\n\
    to_s call.\n\n\n\
    For more information about the methods defined on the Chars proxy see ActiveSupport::Multibyte::Chars and\n\
    30:         def chars\n\
    31:           ActiveSupport::Multibyte::Chars.new(self)\n\
    32:         end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/String/Unicode.html#M000734
- :tinyuri: http://tinyurl.com/4ylwg6
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - MysqlAdapter
  :method: charset
  :description: |+
    
        charset()
    Returns the database character set.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb, line 376
    376:       def charset
    377:         show_variable 'character_set_database'
    378:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#M001237
- :tinyuri: http://tinyurl.com/4mt8ju
  :path: 
  - ActionView
  - Helpers
  - FormHelper
  :method: check_box
  :description: "\n  \n    check_box(object_name, method, options = {}, checked_value = \"1\", unchecked_value = \"0\")\n  \n  \n  \n\
    Returns a checkbox tag tailored for accessing a specified attribute\n\
    (identified by method) on an object assigned to the template\n\
    (identified by object). It\xE2\x80\x98s intended that method\n\
    returns an integer and if that integer is above zero, then the checkbox is\n\
    checked. Additional options on the input tag can be passed as a hash with\n\
    options. The checked_value defaults to 1 while the\n\
    default unchecked_value is set to 0 which is convenient for\n\
    boolean values. Since HTTP standards say that unchecked checkboxes\n\
    don\xE2\x80\x98t post anything, we add a hidden value with the same name as the\n\
    checkbox as a work around.\n\n\
    401:       def check_box(object_name, method, options = {}, checked_value = \"1\", unchecked_value = \"0\")\n\
    402:         InstanceTag.new(object_name, method, self, nil, options.delete(:object)).to_check_box_tag(options, checked_value, unchecked_value)\n\
    403:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/FormHelper.html#M000928
- :tinyuri: http://tinyurl.com/3epfnx
  :path: 
  - ActionView
  - Helpers
  - FormTagHelper
  :method: check_box_tag
  :description: |+
    
        check_box_tag(name, value = "1", checked = false, options = {})
    Creates a check box form input tag.
    
    Options
    
    :disabled - If set to true, the user will not be able to use this
    input.
    
    
    Any other key creates standard HTML options for the tag.
    
    
    
    Examples
    
      check_box_tag 'accept'
      # => <input id="accept" name="accept" type="checkbox" value="1" />
    
      check_box_tag 'rock', 'rock music'
      # => <input id="rock" name="rock" type="checkbox" value="rock music" />
    
      check_box_tag 'receive_email', 'yes', true
      # => <input checked="checked" id="receive_email" name="receive_email" type="checkbox" value="yes" />
    
      check_box_tag 'tos', 'yes', false, :class => 'accept_tos'
      # => <input class="accept_tos" id="tos" name="tos" type="checkbox" value="yes" />
    
      check_box_tag 'eula', 'accepted', false, :disabled => true
      # => <input disabled="disabled" id="eula" name="eula" type="checkbox" value="accepted" />
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/form_tag_helper.rb, line 265
    265:       def check_box_tag(name, value = "1", checked = false, options = {})
    266:         html_options = { "type" => "checkbox", "name" => name, "id" => name, "value" => value }.update(options.stringify_keys)
    267:         html_options["checked"] = "checked" if checked
    268:         tag :input, html_options
    269:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/FormTagHelper.html#M001043
- :tinyuri: http://tinyurl.com/4o7xuf
  :path: 
  - Builder
  :method: check_for_name_collision
  :description: |+
    
        check_for_name_collision(klass, method_name, defined_constant=nil)
    
    
        # File vendor/rails/activesupport/lib/active_support/vendor/builder-2.1.2/builder/xchar.rb, line 12
    12:   def self.check_for_name_collision(klass, method_name, defined_constant=nil)
    13:     if klass.instance_methods.include?(method_name.to_s)
    14:       fail RuntimeError,
    15:         "Name Collision: Method '#{method_name}' is already defined in #{klass}"
    16:     end
    17:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Builder.html#M000883
- :tinyuri: http://tinyurl.com/3za674
  :path: 
  - Rails
  - Initializer
  :method: check_ruby_version
  :description: |+
    
        check_ruby_version()
    Check for valid Ruby version This is done in an external file, so we can
    use it from the `rails` program as well without duplication.
    
    
    
         # File vendor/rails/railties/lib/initializer.rb, line 122
    122:     def check_ruby_version
    123:       require 'ruby_version_check'
    124:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Initializer.html#M001574
- :tinyuri: http://tinyurl.com/3pck8c
  :path: 
  - Builder
  - CSS
  :method: class!
  :description: |+
    
        class!(arg, &block)
    
    
         # File vendor/rails/activesupport/lib/active_support/vendor/builder-2.1.2/builder/css.rb, line 145
    145:     def class!(arg, &block)
    146:       _start_container('.'+arg.to_s, nil, block_given?)
    147:       _css_block(block) if block
    148:       _unify_block
    149:       self
    150:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Builder/CSS.html#M000904
- :tinyuri: http://tinyurl.com/5yr5fr
  :path: 
  - Rails
  - Generator
  - Commands
  - List
  :method: class_collisions
  :description: |+
    
        class_collisions(*class_names)
    
    
         # File vendor/rails/railties/lib/rails_generator/commands.rb, line 519
    519:         def class_collisions(*class_names)
    520:           logger.class_collisions class_names.join(', ')
    521:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Commands/List.html#M001510
- :tinyuri: http://tinyurl.com/3ummhz
  :path: 
  - Rails
  - Generator
  - Commands
  - Base
  :method: class_collisions
  :description: |+
    
        class_collisions(*class_names)
    Does nothing for all commands except Create.
    
    
    
        # File vendor/rails/railties/lib/rails_generator/commands.rb, line 52
    52:         def class_collisions(*class_names)
    53:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Commands/Base.html#M001500
- :tinyuri: http://tinyurl.com/44p3zq
  :path: 
  - Rails
  - Generator
  - Commands
  - Create
  :method: class_collisions
  :description: "\n  \n    class_collisions(*class_names)\n  \n  \n  \n\
    Check whether the given class names are already taken by Ruby or Rails. In the future, expand to check other\n\
    168:         def class_collisions(*class_names)\n\
    169:           class_names.flatten.each do |class_name|\n\
    170:             # Convert to string to allow symbol arguments.\n\
    171:             class_name = class_name.to_s\n\
    172: \n\
    173:             # Skip empty strings.\n\
    174:             next if class_name.strip.empty?\n\
    175: \n\
    176:             # Split the class from its module nesting.\n\
    177:             nesting = class_name.split('::')\n\
    178:             name = nesting.pop\n\
    179: \n\
    180:             # Extract the last Module in the nesting.\n\
    181:             last = nesting.inject(Object) { |last, nest|\n\
    182:               break unless last.const_defined?(nest)\n\
    183:               last.const_get(nest)\n\
    184:             }\n\
    185: \n\
    186:             # If the last Module exists, check whether the given\n\
    187:             # class exists and raise a collision if so.\n\
    188:             if last and last.const_defined?(name.camelize)\n\
    189:               raise_class_collision(class_name)\n\
    190:             end\n\
    191:           end\n\
    192:         end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Commands/Create.html#M001522
- :tinyuri: http://tinyurl.com/53jh7t
  :path: 
  - Rails
  - Generator
  - Spec
  :method: class_file
  :description: |+
    
        class_file()
    
    
        # File vendor/rails/railties/lib/rails_generator/spec.rb, line 24
    24:       def class_file
    25:         "#{path}/#{name}_generator.rb"
    26:       end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Spec.html#M001555
- :tinyuri: http://tinyurl.com/4g8ex6
  :path: 
  - ActiveRecord
  - Reflection
  - MacroReflection
  :method: class_name
  :description: |+
    
        class_name()
    
    
         # File vendor/rails/activerecord/lib/active_record/reflection.rb, line 103
    103:       def class_name
    104:         @class_name ||= options[:class_name] || derive_class_name
    105:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Reflection/MacroReflection.html#M001131
- :tinyuri: http://tinyurl.com/4ud92m
  :path: 
  - Rails
  - Generator
  - Spec
  :method: class_name
  :description: |+
    
        class_name()
    
    
        # File vendor/rails/railties/lib/rails_generator/spec.rb, line 28
    28:       def class_name
    29:         "#{name.camelize}Generator"
    30:       end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Spec.html#M001556
- :tinyuri: http://tinyurl.com/3sy4tf
  :path: 
  - ActiveRecord
  - Base
  :method: class_of_active_record_descendant
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001419
- :tinyuri: http://tinyurl.com/4nasye
  :path: 
  - Inflector
  :method: classify
  :description: |+
    
        classify(table_name)
    Create a class name from a table name like Rails
    does for table names to models. Note that this returns a string and not a
    Class. (To convert to an actual class follow classify with constantize.)
    
    
    Examples
    
    
      "egg_and_hams".classify #=> "EggAndHam"
      "post".classify #=> "Post"
    
    
    
         # File vendor/rails/activesupport/lib/active_support/inflector.rb, line 228
    228:   def classify(table_name)
    229:     # strip out any leading schema name
    230:     camelize(singularize(table_name.to_s.sub(/.*\./, '')))
    231:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Inflector.html#M001626
- :tinyuri: http://tinyurl.com/54fn3u
  :path: 
  - ActiveSupport
  - CoreExtensions
  - String
  - Inflections
  :method: classify
  :description: |+
    
        classify()
    Create a class name from a table name like Rails does for table names to models. Note
    that this returns a string and not a Class. (To convert to an actual class
    follow classify with constantize.)
    
    
    Examples
    
    
      "egg_and_hams".classify #=> "EggAndHam"
      "post".classify #=> "Post"
    
    
    
         # File vendor/rails/activesupport/lib/active_support/core_ext/string/inflections.rb, line 114
    114:         def classify
    115:           Inflector.classify(self)
    116:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/String/Inflections.html#M000750
- :tinyuri: http://tinyurl.com/3ez5w8
  :path: 
  - ActionController
  - Assertions
  :method: clean_backtrace
  :description: |+
    
        clean_backtrace() {|| ...}
    
    
        # File vendor/rails/actionpack/lib/action_controller/assertions.rb, line 53
    53:     def clean_backtrace(&block)
    54:       yield
    55:     rescue Test::Unit::AssertionFailedError => error
    56:       framework_path = Regexp.new(File.expand_path("#{File.dirname(__FILE__)}/assertions"))
    57:       error.backtrace.reject! { |line| File.expand_path(line) =~ framework_path }
    58:       raise
    59:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Assertions.html#M000353
- :tinyuri: http://tinyurl.com/49rt47
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Pathname
  - CleanWithin
  :method: clean_within
  :description: |+
    
        clean_within(string)
    Clean the paths contained in the provided string.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/pathname/clean_within.rb, line 6
     6:         def clean_within(string)
     7:           string.gsub(%r{[\w. ]+(/[\w. ]+)+(\.rb)?(\b|$)}) do |path|
     8:             new(path).cleanpath
     9:           end
    10:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Pathname/CleanWithin.html#M000714
- :tinyuri: http://tinyurl.com/3snyyo
  :path: 
  - ActionController
  - Dispatcher
  :method: cleanup_application
  :description: |+
    
        cleanup_application(force = false)
    Cleanup the application by clearing out loaded classes so they can be
    reloaded on the next request without restarting the server.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/dispatcher.rb, line 156
    156:     def cleanup_application(force = false)
    157:       if Dependencies.load? || force
    158:         ActiveRecord::Base.reset_subclasses if defined?(ActiveRecord)
    159:         Dependencies.clear
    160:         ActiveRecord::Base.clear_reloadable_connections! if defined?(ActiveRecord)
    161:       end
    162:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Dispatcher.html#M000474
- :tinyuri: http://tinyurl.com/4nwo6n
  :path: 
  - Inflector
  - Inflections
  :method: clear
  :description: |+
    
        clear(scope = :all)
    Clears the loaded inflections within a given scope (default is :all). Give
    the scope as a symbol of the inflection type, the options are: :plurals,
    :singulars, :uncountables
    
    
    Examples:
    
    
      clear :all
      clear :plurals
    
    
    
        # File vendor/rails/activesupport/lib/active_support/inflector.rb, line 77
    77:     def clear(scope = :all)
    78:       case scope
    79:         when :all
    80:           @plurals, @singulars, @uncountables = [], [], []
    81:         else
    82:           instance_variable_set "@#{scope}", []
    83:       end
    84:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Inflector/Inflections.html#M001635
- :tinyuri: http://tinyurl.com/3lkkxg
  :path: 
  - ActiveResource
  - Errors
  :method: clear
  :description: |+
    
        clear()
    
    
         # File vendor/rails/activeresource/lib/active_resource/validations.rb, line 178
    178:     def clear
    179:       @errors = {}
    180:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Errors.html#M000809
- :tinyuri: http://tinyurl.com/4gua5f
  :path: 
  - ActiveRecord
  - Errors
  :method: clear
  :description: |+
    
        clear()
    Removes all errors that have been added.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/validations.rb, line 192
    192:     def clear
    193:       @errors = {}
    194:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Errors.html#M001357
- :tinyuri: http://tinyurl.com/4dcjlb
  :path: 
  - ActiveRecord
  - Base
  :method: clear_active_connections!
  :description: |+
    
        clear_active_connections!()
    Clears the cache which maps classes to connections.
    
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_specification.rb, line 84
    84:       def clear_active_connections!
    85:         clear_cache!(@@active_connections) do |name, conn|
    86:           conn.disconnect!
    87:         end
    88:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001464
- :tinyuri: http://tinyurl.com/4rhenr
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - QueryCache
  :method: clear_query_cache
  :description: |+
    
        clear_query_cache()
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb, line 48
    48:       def clear_query_cache
    49:         @query_cache.clear if @query_cache
    50:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/QueryCache.html#M001143
- :tinyuri: http://tinyurl.com/3p5ahk
  :path: 
  - ActiveRecord
  - Base
  :method: clear_reloadable_connections!
  :description: |+
    
        clear_reloadable_connections!()
    Clears the cache which maps classes
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_specification.rb, line 91
     91:       def clear_reloadable_connections!
     92:         if @@allow_concurrency
     93:           # With concurrent connections @@active_connections is
     94:           # a hash keyed by thread id.
     95:           @@active_connections.each do |thread_id, conns|
     96:             conns.each do |name, conn|
     97:               if conn.requires_reloading?
     98:                 conn.disconnect!
     99:                 @@active_connections[thread_id].delete(name)
    100:               end
    101:             end
    102:           end
    103:         else
    104:           @@active_connections.each do |name, conn|
    105:             if conn.requires_reloading?
    106:               conn.disconnect!
    107:               @@active_connections.delete(name)
    108:             end
    109:           end
    110:         end
    111:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001465
- :tinyuri: http://tinyurl.com/4kfxmj
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - PostgreSQLAdapter
  :method: client_min_messages
  :description: |+
    
        client_min_messages()
    Returns the current client message level.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 510
    510:       def client_min_messages
    511:         query('SHOW client_min_messages')[0][0]
    512:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#M001271
- :tinyuri: http://tinyurl.com/3gahoa
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - PostgreSQLAdapter
  :method: client_min_messages=
  :description: |+
    
        client_min_messages=(level)
    Set the client message level.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 515
    515:       def client_min_messages=(level)
    516:         execute("SET client_min_messages TO '#{level}'")
    517:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#M001272
- :tinyuri: http://tinyurl.com/4bk7t9
  :path: 
  - ActiveRecord
  - Base
  :method: clone
  :description: "\n  \n    clone()\n  \n  \n  \n\
    Returns a clone of the record that\n\
    hasn\xE2\x80\x98t been assigned an id yet and is\n\
    treated as a new record. Note that this is\n\
    a \"shallow\" clone: it copies the\n\
    object\xE2\x80\x98s attributes only, not its\n\
    associations. The extent of a \"deep\" clone is application-specific and is therefore\n\
    2000:       def clone\n\
    2001:         attrs = self.attributes_before_type_cast\n\
    2002:         attrs.delete(self.class.primary_key)\n\
    2003:         record = self.class.new\n\
    2004:         record.send :instance_variable_set, '@attributes', attrs\n\
    2005:         record\n\
    2006:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001433
- :tinyuri: http://tinyurl.com/3ufcqq
  :path: 
  - ActiveSupport
  - BufferedLogger
  :method: close
  :description: |+
    
        close()
    
    
         # File vendor/rails/activesupport/lib/active_support/buffered_logger.rb, line 97
     97:     def close
     98:       flush
     99:       @log.close if @log.respond_to?(:close)
    100:       @log = nil
    101:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/BufferedLogger.html#M000769
- :tinyuri: http://tinyurl.com/4pp2vp
  :path: 
  - RailsFCGIHandler
  :method: close_connection
  :description: |+
    
        close_connection(cgi)
    
    
         # File vendor/rails/railties/lib/fcgi_handler.rb, line 220
    220:     def close_connection(cgi)
    221:       cgi.instance_variable_get("@request").finish if cgi
    222:     end
    
    
  :uri: http://api.rubyonrails.org/classes/RailsFCGIHandler.html#M000050
- :tinyuri: http://tinyurl.com/3ncvpz
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - MysqlAdapter
  :method: collation
  :description: |+
    
        collation()
    Returns the database collation
    strategy.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb, line 381
    381:       def collation
    382:         show_variable 'collation_database'
    383:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#M001238
- :tinyuri: http://tinyurl.com/4zmluh
  :path: 
  - ActiveResource
  - Base
  :method: collection_path
  :description: "\n  \n    collection_path(prefix_options = {}, query_options = nil)\n  \n  \n  \n\
    Gets the collection path for the REST resources. If the\n\
    query_options parameter is omitted, Rails will split from the prefix_options.\n\n\
    Options\n\n\
    prefix_options:A hash to add a prefix to the request for nested URL\xE2\x80\x98s\n\
    (e.g., :account_id => 19 would yield a URL like\n\
    /accounts/19/purchases.xml).\n\n\n\
    query_options:A hash to add items to the query string for\n\
    the request.\n\n\n\n\
    302:       def collection_path(prefix_options = {}, query_options = nil)\n\
    303:         prefix_options, query_options = split_options(prefix_options) if query_options.nil?\n\
    304:         \"#{prefix(prefix_options)}#{collection_name}.#{format.extension}#{query_string(query_options)}\"\n\
    305:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Base.html#M000834
- :tinyuri: http://tinyurl.com/4wrhxx
  :path: 
  - ActiveResource
  - Base
  :method: collection_path
  :description: |+
    
        collection_path(options = nil)
    
    
         # File vendor/rails/activeresource/lib/active_resource/base.rb, line 825
    825:       def collection_path(options = nil)
    826:         self.class.collection_path(options || prefix_options)
    827:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Base.html#M000861
- :tinyuri: http://tinyurl.com/35vzga
  :path: 
  - ActionView
  - Helpers
  - FormOptionsHelper
  :method: collection_select
  :description: "\n  \n    collection_select(object, method, collection, value_method, text_method, options = {}, html_options = {})\n  \n  \n  \n\
    Returns <select> and\n\
    <option> tags for the collection of existing return values\n\
    of method for object\xE2\x80\x98s class. The value returned\n\
    from calling method on the instance object will be\n\
    selected. If calling method returns nil, no selection is\n\
    made without including :prompt or :include_blank in the\n\
    options hash.\n\n\n\
    The :value_method and :text_method parameters are methods\n\
    to be called on each member of collection. The return values are\n\
    used as the value attribute and contents of each\n\
    <option> tag, respectively.\n\n\n\
    Example object structure for use with this method:\n\n\n  class Post < ActiveRecord::Base\n    belongs_to :author\n  end\n  class Author < ActiveRecord::Base\n    has_many :posts\n    def name_with_initial\n      \"#{first_name.first}. #{last_name}\"\n    end\n  end\n\n\n\
    Sample usage (selecting the associated Author for an instance of\n\
    Post, @post):\n\n\n  collection_select(:post, :author_id, Author.find(:all), :id, :name_with_initial, {:prompt => true})\n\n\n\
    117:       def collection_select(object, method, collection, value_method, text_method, options = {}, html_options = {})\n\
    118:         InstanceTag.new(object, method, self, nil, options.delete(:object)).to_collection_select_tag(collection, value_method, text_method, options, html_options)\n\
    119:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/FormOptionsHelper.html#M000941
- :tinyuri: http://tinyurl.com/2cq4hw
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - TableDefinition
  :method: column
  :description: "\n  \n    column(name, type, options = {})\n  \n  \n  \n\
    Instantiates a new column for the table. The\n\
    type parameter is normally one of the migrations native types,\n\
    which is one of the following: :primary_key, :string,\n\
    :text, :integer, :float, :decimal,\n\
    :datetime, :timestamp, :time, :date,\n\
    :binary, :boolean.\n\n\n\
    You may use a type not in this list as long as it is supported by your\n\
    database (for example, \"polygon\" in MySQL), but this will not be\n\
    database agnostic and should usually be avoided.\n\n\n\
    Available options are (none of these exists by default):\n\n\n\
    :limit - Requests a maximum column length (:string,\n\
    :text, :binary or :integer columns only)\n\n\n\
    :default - The column\xE2\x80\x98s default value. Use\n\
    nil for NULL.\n\n\n\
    :null - Allows or disallows NULL values in the column. This option could have been\n\
    named :null_allowed.\n\n\n\
    :precision - Specifies the precision for a :decimal column.\n\n\n\
    :scale - Specifies the scale for a :decimal column.\n\n\n\n\n\
    Please be aware of different RDBMS implementations behavior with\n\
    :decimal columns:\n\n\n\
    The SQL standard says the default scale should be 0, :scale <=\n\
    :precision, and makes no comments about the requirements of\n\
    :precision.\n\n\n\
    MySQL: :precision [1..63], :scale [0..30]. Default is\n\
    (10,0).\n\n\n\
    PostgreSQL: :precision [1..infinity], :scale\n\
    [0..infinity]. No default.\n\n\n\
    SQLite2: Any :precision and :scale may be used. Internal\n\
    storage as strings. No default.\n\n\n\
    SQLite3: No restrictions on :precision and :scale, but\n\
    the maximum supported :precision is 16. No default.\n\n\n\
    Oracle: :precision [1..38], :scale [-84..127]. Default is\n\
    (38,0).\n\n\n\
    DB2: :precision [1..63], :scale [0..62]. Default unknown.\n\n\n\
    Firebird: :precision [1..18], :scale [0..18]. Default\n\
    (9,0). Internal types NUMERIC and DECIMAL have different storage rules,\n\
    decimal being better.\n\n\n\
    FrontBase?: :precision [1..38], :scale [0..38]. Default\n\
    (38,0). WARNING Max :precision/:scale for NUMERIC is 19,\n\
    and DECIMAL is 38.\n\n\n\
    SqlServer?: :precision [1..38], :scale [0..38]. Default\n\
    (38,0).\n\n\n\
    Sybase: :precision [1..38], :scale [0..38]. Default\n\
    (38,0).\n\n\n\
    OpenBase?: Documentation unclear. Claims storage in double.\n\n\n\n\n\
    This method returns self.\n\n\
    Examples\n\n # Assuming td is an instance of TableDefinition\n td.column(:granted, :boolean)\n   #=> granted BOOLEAN\n\n td.column(:picture, :binary, :limit => 2.megabytes)\n   #=> picture BLOB(2097152)\n\n td.column(:sales_stage, :string, :limit => 20, :default => 'new', :null => false)\n   #=> sales_stage VARCHAR(20) DEFAULT 'new' NOT NULL\n\n def.column(:bill_gates_money, :decimal, :precision => 15, :scale => 2)\n   #=> bill_gates_money DECIMAL(15,2)\n\n def.column(:sensor_reading, :decimal, :precision => 30, :scale => 20)\n   #=> sensor_reading DECIMAL(30,20)\n\n # While <tt>:scale</tt> defaults to zero on most databases, it\n # probably wouldn't hurt to include it.\n def.column(:huge_integer, :decimal, :precision => 30)\n   #=> huge_integer DECIMAL(30)\n\n\
    Short-hand examples\n\n\
    Instead of calling column\n\
    directly, you can also work with the short-hand definitions for the default\n\
    types. They use the type as the method name instead of as a parameter and\n\
    allow for multiple columns to be defined in a single statement.\n\n\n\
    What can be written like this with the regular calls to column:\n\n\n  create_table \"products\", :force => true do |t|\n    t.column \"shop_id\",    :integer\n    t.column \"creator_id\", :integer\n    t.column \"name\",       :string,   :default => \"Untitled\"\n    t.column \"value\",      :string,   :default => \"Untitled\"\n    t.column \"created_at\", :datetime\n    t.column \"updated_at\", :datetime\n  end\n\n\n\
    Can also be written as follows using the short-hand:\n\n\n  create_table :products do |t|\n    t.integer :shop_id, :creator_id\n    t.string  :name, :value, :default => \"Untitled\"\n    t.timestamps\n  end\n\n\n\
    There\xE2\x80\x98s a short-hand method for each of the type values declared at\n\
    the top. And then there\xE2\x80\x98s TableDefinition#timestamps\n\
    that\xE2\x80\x98ll add created_at and updated_at as datetimes.\n\n\n\
    TableDefinition#references will\n\
    add an appropriately-named _id column, plus a corresponding _type\n\
    column if the :polymorphic\n\
    option is supplied. If :polymorphic is a hash of options, these will be\n\
    used when creating the _type column. So what can be written like\n\
    this:\n\n\n  create_table :taggings do |t|\n    t.integer :tag_id, :tagger_id, :taggable_id\n    t.string  :tagger_type\n    t.string  :taggable_type, :default => 'Photo'\n  end\n\n\n\
    418:       def column(name, type, options = {})\n\
    419:         column = self[name] || ColumnDefinition.new(@base, name, type)\n\
    420:         column.limit = options[:limit] || native[type.to_sym][:limit] if options[:limit] or native[type.to_sym]\n\
    421:         column.precision = options[:precision]\n\
    422:         column.scale = options[:scale]\n\
    423:         column.default = options[:default]\n\
    424:         column.null = options[:null]\n\
    425:         @columns << column unless @columns.include? column\n\
    426:         self\n\
    427:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#M001222
- :tinyuri: http://tinyurl.com/4yx3au
  :path: 
  - ActiveRecord
  - Base
  :method: column_for_attribute
  :description: |+
    
        column_for_attribute(name)
    Returns the column object for the named attribute.
    
    
    
          # File vendor/rails/activerecord/lib/active_record/base.rb, line 2182
    2182:       def column_for_attribute(name)
    2183:         self.class.columns_hash[name.to_s]
    2184:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001454
- :tinyuri: http://tinyurl.com/3qum9m
  :path: 
  - ActiveRecord
  - Base
  :method: column_names
  :description: |+
    
        column_names()
    Returns an array of column names as strings.
    
    
    
          # File vendor/rails/activerecord/lib/active_record/base.rb, line 1092
    1092:       def column_names
    1093:         @column_names ||= columns.map { |column| column.name }
    1094:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001406
- :tinyuri: http://tinyurl.com/4m7cel
  :path: 
  - ActiveRecord
  - Base
  :method: columns
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001404
- :tinyuri: http://tinyurl.com/482hc5
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - SchemaStatements
  :method: columns
  :description: |+
    
        columns(table_name, name = nil)
    Returns an array of Column objects for the table
    specified by table_name. See the concrete implementation for
    details on the expected parameter values.
    
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 28
    28:       def columns(table_name, name = nil) end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#M001149
- :tinyuri: http://tinyurl.com/53c7h4
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - PostgreSQLAdapter
  :method: columns
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#M001268
- :tinyuri: http://tinyurl.com/3febs9
  :path: 
  - ActiveRecord
  - Base
  :method: columns_hash
  :description: |+
    
        columns_hash()
    Returns a hash of column objects for the
    table associated with this class.
    
    
    
          # File vendor/rails/activerecord/lib/active_record/base.rb, line 1087
    1087:       def columns_hash
    1088:         @columns_hash ||= columns.inject({}) { |hash, column| hash[column.name] = column; hash }
    1089:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001405
- :tinyuri: http://tinyurl.com/4ao2x8
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - QueryCache
  :method: columns_with_query_cache
  :description: |+
    
        columns_with_query_cache(*args)
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb, line 60
    60:       def columns_with_query_cache(*args)
    61:         if @query_cache_enabled
    62:           @query_cache["SHOW FIELDS FROM #{args.first}"] ||= columns_without_query_cache(*args)
    63:         else
    64:           columns_without_query_cache(*args)
    65:         end
    66:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/QueryCache.html#M001145
- :tinyuri: http://tinyurl.com/3tj6up
  :path: 
  - Builder
  - CSS
  :method: comment!
  :description: |+
    
        comment!(comment_text)
    Create a comment string in the output.
    
    
    
         # File vendor/rails/activesupport/lib/active_support/vendor/builder-2.1.2/builder/css.rb, line 134
    134:     def comment!(comment_text)
    135:       @target << "/* #{comment_text} */\n"
    136:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Builder/CSS.html#M000902
- :tinyuri: http://tinyurl.com/4hqgyg
  :path: 
  - Builder
  - XmlMarkup
  :method: comment!
  :description: |+
    
        comment!(comment_text)
    
    
         # File vendor/rails/activesupport/lib/active_support/vendor/builder-2.1.2/builder/xmlmarkup.rb, line 197
    197:     def comment!(comment_text)
    198:       _ensure_no_block block_given?
    199:       _special("<!-- ", " -->", comment_text, nil)
    200:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Builder/XmlMarkup.html#M000892
- :tinyuri: http://tinyurl.com/4vvb3w
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - PostgreSQLAdapter
  :method: commit_db_transaction
  :description: |+
    
        commit_db_transaction()
    Commits a transaction.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 427
    427:       def commit_db_transaction
    428:         execute "COMMIT"
    429:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#M001264
- :tinyuri: http://tinyurl.com/4e8phc
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - DatabaseStatements
  :method: commit_db_transaction
  :description: |+
    
        commit_db_transaction()
    Commits the transaction (and
    turns on auto-committing).
    
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 90
    90:       def commit_db_transaction()   end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#M001184
- :tinyuri: http://tinyurl.com/4x3uet
  :path: 
  - ActionView
  - TemplateHandlers
  - Builder
  :method: compile
  :description: |+
    
        compile(template)
    
    
        # File vendor/rails/actionpack/lib/action_view/template_handlers/builder.rb, line 10
    10:       def compile(template)
    11:         content_type_handler = (@view.send!(:controller).respond_to?(:response) ? "controller.response" : "controller")
    12:         "#{content_type_handler}.content_type ||= Mime::XML\n" +
    13:         "xml = Builder::XmlMarkup.new(:indent => 2)\n" +
    14:         template +
    15:         "\nxml.target!\n"
    16:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/TemplateHandlers/Builder.html#M001073
- :tinyuri: http://tinyurl.com/3qygdl
  :path: 
  - ActionView
  - TemplateHandler
  :method: compile
  :description: |+
    
        compile(template)
    
    
        # File vendor/rails/actionpack/lib/action_view/template_handler.rb, line 14
    14:     def compile(template)
    15:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/TemplateHandler.html#M001085
- :tinyuri: http://tinyurl.com/4lb6zk
  :path: 
  - ActionView
  - TemplateHandlers
  - RJS
  :method: compile
  :description: |+
    
        compile(template)
    
    
        # File vendor/rails/actionpack/lib/action_view/template_handlers/rjs.rb, line 8
     8:       def compile(template)
     9:         "controller.response.content_type ||= Mime::JS\n" +
    10:         "update_page do |page|\n#{template}\nend"
    11:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/TemplateHandlers/RJS.html#M001071
- :tinyuri: http://tinyurl.com/476bg4
  :path: 
  - ActionView
  - TemplateHandlers
  - ERB
  :method: compile
  :description: |+
    
        compile(template)
    
    
        # File vendor/rails/actionpack/lib/action_view/template_handlers/erb.rb, line 16
    16:       def compile(template)
    17:         ::ERB.new(template, nil, @view.erb_trim_mode).src
    18:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/TemplateHandlers/ERB.html#M001074
- :tinyuri: http://tinyurl.com/3vbzmr
  :path: 
  - ActionView
  - CompiledTemplates
  :method: compile_source
  :description: |+
    
        compile_source(identifier, arg_names, source, initial_line_number = 0, file_name = nil)
    Compile the provided source code for the given argument names and with the
    given initial line number. The identifier should be unique to this source.
    
    
    The file_name, if provided will appear in backtraces. If not provided, the
    file_name defaults to the identifier.
    
    
    This method will return the selector for the compiled version
    of this method.
    
    
    
        # File vendor/rails/actionpack/lib/action_view/compiled_templates.rb, line 46
    46:     def compile_source(identifier, arg_names, source, initial_line_number = 0, file_name = nil)
    47:       file_name ||= identifier
    48:       name = method_names[full_key(identifier, arg_names)]
    49:       arg_desc = arg_names.empty? ? '' : "(#{arg_names * ', '})"
    50:       fake_file_name = "#{file_name}#{arg_desc}" # Include the arguments for this version (for now)
    51:       
    52:       method_def = wrap_source(name, arg_names, source)
    53:       
    54:       begin
    55:         module_eval(method_def, fake_file_name, initial_line_number)
    56:         @mtimes[full_key(identifier, arg_names)] = Time.now
    57:       rescue Exception => e  # errors from compiled source
    58:         e.blame_file! identifier
    59:         raise
    60:       end
    61:       name
    62:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/CompiledTemplates.html#M001080
- :tinyuri: http://tinyurl.com/4ql8rq
  :path: 
  - ActionView
  - CompiledTemplates
  :method: compiled?
  :description: |
    
        compiled?(identifier, arg_names)
    Alias for selector
    
  :uri: http://api.rubyonrails.org/classes/ActionView/CompiledTemplates.html#M001078
- :tinyuri: http://tinyurl.com/45dwo2
  :path: 
  - Rails
  - Generator
  - Commands
  - Update
  :method: complex_template
  :description: |+
    
        complex_template(relative_source, relative_destination, template_options = {})
    
    
         # File vendor/rails/railties/lib/rails_generator/commands.rb, line 564
    564:         def complex_template(relative_source, relative_destination, template_options = {})
    565: 
    566:            begin
    567:              dest_file = destination_path(relative_destination)
    568:              source_to_update = File.readlines(dest_file).join
    569:            rescue Errno::ENOENT
    570:              logger.missing relative_destination
    571:              return
    572:            end
    573: 
    574:            logger.refreshing "#{template_options[:insert].gsub(/\.erb/,'')} inside #{relative_destination}"
    575: 
    576:            begin_mark = Regexp.quote(template_part_mark(template_options[:begin_mark], template_options[:mark_id]))
    577:            end_mark = Regexp.quote(template_part_mark(template_options[:end_mark], template_options[:mark_id]))
    578: 
    579:            # Refreshing inner part of the template with freshly rendered part.
    580:            rendered_part = render_template_part(template_options)
    581:            source_to_update.gsub!(/#{begin_mark}.*?#{end_mark}/m, rendered_part)
    582: 
    583:            File.open(dest_file, 'w') { |file| file.write(source_to_update) }
    584:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Commands/Update.html#M001520
- :tinyuri: http://tinyurl.com/3koe4f
  :path: 
  - Rails
  - Generator
  - Commands
  - List
  :method: complex_template
  :description: |+
    
        complex_template(relative_source, relative_destination, options = {})
    
    
         # File vendor/rails/railties/lib/rails_generator/commands.rb, line 531
    531:         def complex_template(relative_source, relative_destination, options = {})
    532:           logger.template "#{options[:insert]} inside #{relative_destination}"
    533:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Commands/List.html#M001513
- :tinyuri: http://tinyurl.com/4yt96v
  :path: 
  - Rails
  - Generator
  - Commands
  - Create
  :method: complex_template
  :description: |+
    
        complex_template(relative_source, relative_destination, template_options = {})
    
    
         # File vendor/rails/railties/lib/rails_generator/commands.rb, line 299
    299:         def complex_template(relative_source, relative_destination, template_options = {})
    300:           options = template_options.dup
    301:           options[:assigns] ||= {}
    302:           options[:assigns]['template_for_inclusion'] = render_template_part(template_options)
    303:           template(relative_source, relative_destination, options)
    304:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Commands/Create.html#M001526
- :tinyuri: http://tinyurl.com/4n3zam
  :path: 
  - Rails
  - Generator
  - Commands
  - Destroy
  :method: complex_template
  :description: |+
    
        complex_template(*args)
    
    
         # File vendor/rails/railties/lib/rails_generator/commands.rb, line 484
    484:         def complex_template(*args)
    485:           # nothing should be done here
    486:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Commands/Destroy.html#M001494
- :tinyuri: http://tinyurl.com/48vn86
  :path: 
  - ActiveSupport
  - Multibyte
  - Handlers
  - UTF8Handler
  :method: compose
  :description: |+
    
        compose(str)
    Perform composition on the characters in the string
    
    
    
         # File vendor/rails/activesupport/lib/active_support/multibyte/handlers/utf8_handler.rb, line 312
    312:       def compose(str)
    313:         compose_codepoints u_unpack(str).pack('U*')
    314:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Handlers/UTF8Handler.html#M000532
- :tinyuri: http://tinyurl.com/4a9fzo
  :path: 
  - ActiveSupport
  - Multibyte
  - Handlers
  - UTF8Handler
  :method: compose_codepoints
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Handlers/UTF8Handler.html#M000546
- :tinyuri: http://tinyurl.com/2n226s
  :path: 
  - ActiveRecord
  - Aggregations
  - ClassMethods
  :method: composed_of
  :description: "\n  \n    composed_of(part_id, options = {}, &block)\n  \n  \n  \n\
    Adds reader and writer methods for manipulating a value object: composed_of :address adds\n\
    address and address=(new_address) methods.\n\n\n\
    Options are:\n\n\n\
    :class_name - specify the class name of the association. Use it\n\
    only if that name can\xE2\x80\x98t be inferred from the part id. So composed_of :address will by\n\
    default be linked to the Address class, but if the real class name\n\
    is CompanyAddress, you\xE2\x80\x98ll have to specify it with this\n\
    option.\n\n\n\
    :mapping - specifies a number of mapping arrays (attribute,\n\
    parameter) that bind an attribute name to a constructor parameter on the\n\
    value class.\n\n\n\
    :allow_nil - specifies that the aggregate object will not be\n\
    instantiated when all mapped attributes are nil. Setting the\n\
    aggregate class to nil has the effect of writing nil to\n\
    all mapped attributes. This defaults to false.\n\n\n\n\n\
    An optional block can be passed to convert the argument that is passed to\n\
    the writer method into an instance of :class_name. The block will\n\
    only be called if the argument is not already an instance of\n\
    :class_name.\n\n\n\
    135:       def composed_of(part_id, options = {}, &block)\n\
    136:         options.assert_valid_keys(:class_name, :mapping, :allow_nil)\n\
    137: \n\
    138:         name        = part_id.id2name\n\
    139:         class_name  = options[:class_name] || name.camelize\n\
    140:         mapping     = options[:mapping]    || [ name, name ]\n\
    141:         mapping     = [ mapping ] unless mapping.first.is_a?(Array)\n\
    142:         allow_nil   = options[:allow_nil]  || false\n\
    143: \n\
    144:         reader_method(name, class_name, mapping, allow_nil)\n\
    145:         writer_method(name, class_name, mapping, allow_nil, block)\n\
    146:         \n\
    147:         create_reflection(:composed_of, part_id, options, self)\n\
    148:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Aggregations/ClassMethods.html#M001344
- :tinyuri: http://tinyurl.com/3m26fx
  :path: 
  - ActiveRecord
  - Base
  :method: compute_type
  :description: |+
    
        compute_type(type_name)
    Returns the class type of the record using the current module as a prefix.
    So descendents of MyApp::Business::Account would appear as
    MyApp::Business::AccountSubclass.
    
    
    
          # File vendor/rails/activerecord/lib/active_record/base.rb, line 1745
    1745:         def compute_type(type_name)
    1746:           modularized_name = type_name_with_module(type_name)
    1747:           begin
    1748:             class_eval(modularized_name, __FILE__, __LINE__)
    1749:           rescue NameError
    1750:             class_eval(type_name, __FILE__, __LINE__)
    1751:           end
    1752:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001418
- :tinyuri: http://tinyurl.com/437yhg
  :path: 
  - ActionView
  - Helpers
  - TextHelper
  :method: concat
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/TextHelper.html#M001048
- :tinyuri: http://tinyurl.com/3zhfut
  :path: 
  - ActiveRecord
  - Validations
  - ClassMethods
  :method: condition_block?
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Validations/ClassMethods.html#M001322
- :tinyuri: http://tinyurl.com/4dr62s
  :path: 
  - ActionController
  - Filters
  - ClassMethods
  :method: condition_hash
  :description: |+
    
        condition_hash(filters, *actions)
    
    
         # File vendor/rails/actionpack/lib/action_controller/filters.rb, line 618
    618:         def condition_hash(filters, *actions)
    619:           actions = actions.flatten.map(&:to_s)
    620:           filters.inject({}) { |h,f| h.update( f => (actions.blank? ? nil : actions)) }
    621:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Filters/ClassMethods.html#M000330
- :tinyuri: http://tinyurl.com/3wmbxc
  :path: 
  - ActionController
  - Routing
  - RouteSet
  - Mapper
  :method: connect
  :description: |+
    
        connect(path, options = {})
    Create an unnamed route with the provided path and
    options. See ActionController::Routing for an introduction
    to routes.
    
    
    
          # File vendor/rails/actionpack/lib/action_controller/routing.rb, line 1064
    1064:         def connect(path, options = {})
    1065:           @set.add_route(path, options)
    1066:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Routing/RouteSet/Mapper.html#M000349
- :tinyuri: http://tinyurl.com/3pjtw4
  :path: 
  - ActiveRecord
  - Base
  :method: connected?
  :description: "\n  \n    connected?()\n  \n  \n  \n\
    Returns true if a connection that\xE2\x80\x98s\n\
    268:     def self.connected?\n\
    269:       active_connections[active_connection_name] ? true : false\n\
    270:     end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001468
- :tinyuri: http://tinyurl.com/4ktk43
  :path: 
  - ActiveResource
  - Base
  :method: connection
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Base.html#M000828
- :tinyuri: http://tinyurl.com/46opyk
  :path: 
  - ActiveRecord
  - Base
  :method: connection
  :description: "\n  \n    connection()\n  \n  \n  \n\
    Returns the connection currently associated\n\
    with the class. This can also be used to \"borrow\" the connection to do database work that\n\
    173:     def connection\n\
    174:       self.class.connection\n\
    175:     end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001466
- :tinyuri: http://tinyurl.com/52yf6j
  :path: 
  - ActiveResource
  - Base
  :method: connection
  :description: |+
    
        connection(refresh = false)
    
    
         # File vendor/rails/activeresource/lib/active_resource/base.rb, line 791
    791:       def connection(refresh = false)
    792:         self.class.connection(refresh)
    793:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Base.html#M000855
- :tinyuri: http://tinyurl.com/4cyraq
  :path: 
  - ActiveRecord
  - Base
  :method: connection
  :description: |+
    
        connection()
    Returns the connection currently associated
    with the class. This can also be used to "borrow" the connection to do database work unrelated to
    any of the specific Active Records.
    
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_specification.rb, line 73
    73:       def connection
    74:         if @active_connection_name && (conn = active_connections[@active_connection_name])
    75:           conn
    76:         else
    77:           # retrieve_connection sets the cache key.
    78:           conn = retrieve_connection
    79:           active_connections[@active_connection_name] = conn
    80:         end
    81:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001463
- :tinyuri: http://tinyurl.com/48h4wv
  :path: 
  - Inflector
  :method: constantize
  :description: |+
    
        constantize(camel_cased_word)
    Constantize tries to find a declared constant with the name specified in
    the string. It raises a NameError when the name is not in CamelCase or is
    not initialized.
    
    
    Examples
    
    
      "Module".constantize #=> Module
      "Class".constantize #=> Class
    
    
    
         # File vendor/rails/activesupport/lib/active_support/inflector.rb, line 252
    252:   def constantize(camel_cased_word)
    253:     unless /\A(?:::)?([A-Z]\w*(?:::[A-Z]\w*)*)\z/ =~ camel_cased_word
    254:       raise NameError, "#{camel_cased_word.inspect} is not a valid constant name!"
    255:     end
    256: 
    257:     Object.module_eval("::#{$1}", __FILE__, __LINE__)
    258:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Inflector.html#M001628
- :tinyuri: http://tinyurl.com/5x93eh
  :path: 
  - ActiveSupport
  - CoreExtensions
  - String
  - Inflections
  :method: constantize
  :description: |+
    
        constantize()
    Constantize tries to find a declared constant with the name specified in
    the string. It raises a NameError when the name is not in CamelCase or is
    not initialized.
    
    
    Examples
    
    
      "Module".constantize #=> Module
      "Class".constantize #=> Class
    
    
    
         # File vendor/rails/activesupport/lib/active_support/core_ext/string/inflections.rb, line 147
    147:         def constantize
    148:           Inflector.constantize(self)
    149:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/String/Inflections.html#M000753
- :tinyuri: http://tinyurl.com/4fjhru
  :path: 
  - ActiveRecord
  - Calculations
  - ClassMethods
  :method: construct_count_options_from_args
  :description: |+
    
        construct_count_options_from_args(*args)
    
    
         # File vendor/rails/activerecord/lib/active_record/calculations.rb, line 130
    130:         def construct_count_options_from_args(*args)
    131:           options     = {}
    132:           column_name = :all
    133:           
    134:           # We need to handle
    135:           #   count()
    136:           #   count(:column_name=:all)
    137:           #   count(options={})
    138:           #   count(column_name=:all, options={})
    139:           case args.size
    140:           when 1
    141:             args[0].is_a?(Hash) ? options = args[0] : column_name = args[0]
    142:           when 2
    143:             column_name, options = args
    144:           else
    145:             raise ArgumentError, "Unexpected parameters passed to count(): #{args.inspect}"
    146:           end if args.size > 0
    147:           
    148:           [column_name, options]
    149:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Calculations/ClassMethods.html#M001343
- :tinyuri: http://tinyurl.com/3rc8o6
  :path: 
  - ActiveSupport
  - Multibyte
  - Handlers
  - UTF8Handler
  :method: consumes?
  :description: |+
    
        consumes?(str)
    Checks if the string is valid UTF8.
    
    
    
         # File vendor/rails/activesupport/lib/active_support/multibyte/handlers/utf8_handler.rb, line 342
    342:       def consumes?(str)
    343:         # Unpack is a little bit faster than regular expressions
    344:         begin
    345:           str.unpack('U*')
    346:           true
    347:         rescue ArgumentError
    348:           false
    349:         end
    350:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Handlers/UTF8Handler.html#M000534
- :tinyuri: http://tinyurl.com/4mlvt5
  :path: 
  - HTML
  - WhiteListSanitizer
  :method: contains_bad_protocols?
  :description: |+
    
        contains_bad_protocols?(attr_name, value)
    
    
         # File vendor/rails/actionpack/lib/action_controller/vendor/html-scanner/html/sanitizer.rb, line 168
    168:     def contains_bad_protocols?(attr_name, value)
    169:       uri_attributes.include?(attr_name) && 
    170:       (value =~ /(^[^\/:]*):|(&#0*58)|(&#x70)|(%|%)3A/ && !allowed_protocols.include?(value.split(protocol_separator).first))
    171:     end
    
    
  :uri: http://api.rubyonrails.org/classes/HTML/WhiteListSanitizer.html#M000180
- :tinyuri: http://tinyurl.com/48h3qm
  :path: 
  - ActiveRecord
  - Base
  :method: content_columns
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001407
- :tinyuri: http://tinyurl.com/53qqvl
  :path: 
  - ActionView
  - Helpers
  - CaptureHelper
  :method: content_for
  :description: "\n  \n    content_for(name, content = nil, &block)\n  \n  \n  \n\
    Calling content_for stores a block\n\
    of markup in an identifier for later use. You can make subsequent calls to\n\
    the stored content in other templates or the layout by passing the\n\
    identifier as an argument to yield.\n\n\
    Examples\n\n  <% content_for :not_authorized do %>\n    alert('You are not authorized to do that!')\n  <% end %>\n\n\n\
    You can then use yield :not_authorized anywhere in your templates.\n\n\n  <%= yield :not_authorized if current_user.nil? %>\n\n\n\
    You can also use this syntax alongside an existing call to yield\n\
    in a layout. For example:\n\n\n  <%# This is the layout %>\n  <html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n  <head>\n    <title>My Website</title>\n    <%= yield :script %>\n  </head>\n  <body>\n    <%= yield %>\n  </body>\n  </html>\n\n\n\
    And now, we\xE2\x80\x98ll create a view that has a content_for call that creates the\n\
    script identifier.\n\n\n  <%# This is our view %>\n  Please login!\n\n  <% content_for :script do %>\n    <script type=\"text/javascript\">alert('You are not authorized to view this page!')</script>\n  <% end %>\n\n\n\
    Then, in another view, you could to do something like this:\n\n\n  <%= link_to_remote 'Logout', :action => 'logout' %>\n\n  <% content_for :script do %>\n    <%= javascript_include_tag :defaults %>\n  <% end %>\n\n\n\
    That will place <script> tags for Prototype, Scriptaculous, and\n\
    application.js (if it exists) on the page; this technique is useful if\n\
    you\xE2\x80\x98ll only be using these scripts in a few views.\n\n\n\
    Note that content_for concatenates\n\
    the blocks it is given for a particular identifier in order. For example:\n\n\n  <% content_for :navigation do %>\n    <li><%= link_to 'Home', :action => 'index' %></li>\n  <% end %>\n\n  <%#  Add some other content, or use a different template: %>\n\n  <% content_for :navigation do %>\n    <li><%= link_to 'Login', :action => 'login' %></li>\n  <% end %>\n\n\n\
    Then, in another template or layout, this code would render both links in\n\
    order:\n\n\n  <ul><%= yield :navigation %></ul>\n\n\n\
    Lastly, simple content can be passed as a parameter:\n\n\n  <% content_for :script, javascript_include_tag(:defaults) %>\n\n\n\
    WARNING: content_for is ignored in\n\
    caches. So you shouldn\xE2\x80\x98t use it for elements that will be fragment\n\
    cached.\n\n\n\
    The deprecated way of accessing a content_for block is to use an\n\
    instance variable named @content_for_#{name_of_the_content_block}.\n\
    So <%= content_for :footer\n\
    %> would be available as <%= @content_for_footer %>.\n\
    124:       def content_for(name, content = nil, &block)\n\
    125:         existing_content_for = instance_variable_get(\"@content_for_#{name}\").to_s\n\
    126:         new_content_for      = existing_content_for + (block_given? ? capture(&block) : content)\n\
    127:         instance_variable_set(\"@content_for_#{name}\", new_content_for)\n\
    128:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/CaptureHelper.html#M001069
- :tinyuri: http://tinyurl.com/4z82gx
  :path: 
  - ActionController
  - AbstractRequest
  :method: content_length
  :description: |+
    
        content_length()
    
    
        # File vendor/rails/actionpack/lib/action_controller/request.rb, line 68
    68:     def content_length
    69:       @content_length ||= env['CONTENT_LENGTH'].to_i
    70:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/AbstractRequest.html#M000401
- :tinyuri: http://tinyurl.com/4437dh
  :path: 
  - ActionView
  - Helpers
  - TagHelper
  :method: content_tag
  :description: |+
    
        content_tag(name, content_or_options_with_block = nil, options = nil, escape = true, &block)
    Returns an HTML block tag of type
    name surrounding the content. Add HTML attributes by
    passing an attributes hash to options. Instead of passing the
    content as an argument, you can also use a block in which case, you pass
    your options as the second parameter. Set escape to false to
    disable attribute value escaping.
    
    Options
    
    The options hash is used with attributes with no value like
    (disabled and readonly), which you can give a value of
    true in the options hash. You can use symbols or strings for the
    attribute names.
    
    Examples
    
      content_tag(:p, "Hello world!")
       # => <p>Hello world!</p>
      content_tag(:div, content_tag(:p, "Hello world!"), :class => "strong")
       # => <div class="strong"><p>Hello world!</p></div>
      content_tag("select", options, :multiple => true)
       # => <select multiple="multiple">...options...</select>
    
      <% content_tag :div, :class => "strong" do -%>
        Hello world!
      <% end -%>
       # => <div class="strong"><p>Hello world!</p></div>
    
    
    
        # File vendor/rails/actionpack/lib/action_view/helpers/tag_helper.rb, line 66
    66:       def content_tag(name, content_or_options_with_block = nil, options = nil, escape = true, &block)
    67:         if block_given?
    68:           options = content_or_options_with_block if content_or_options_with_block.is_a?(Hash)
    69:           content = capture(&block)
    70:           content_tag = content_tag_string(name, content, options, escape)
    71:           block_is_within_action_view?(block) ? concat(content_tag, block.binding) : content_tag
    72:         else
    73:           content = content_or_options_with_block
    74:           content_tag_string(name, content, options, escape)
    75:         end
    76:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/TagHelper.html#M001033
- :tinyuri: http://tinyurl.com/4wcuzg
  :path: 
  - ActionView
  - Helpers
  - RecordTagHelper
  :method: content_tag_for
  :description: |+
    
        content_tag_for(tag_name, record, *args, &block)
    content_tag_for creates an HTML
    element with id and class parameters that relate to the specified
    ActiveRecord object. For example:
    
    
       <% content_tag_for(:tr, @person) do %>
         <td><%=h @person.first_name %></td>
         <td><%=h @person.last_name %></td>
       <% end %>
    
    
    would produce hthe following HTML (assuming @person is an instance of a
    Person object, with an id value of 123):
    
    
       <tr id="person_123" class="person">....</tr>
    
    
    If you require the HTML id attribute to have a prefix, you can specify it:
    
    
       <% content_tag_for(:tr, @person, :foo) do %> ...
    
    
    produces:
    
    
       <tr id="foo_person_123" class="person">...
    
    
    content_tag_for also accepts a
    hash of options, which will be converted to additional HTML attributes. If
    you specify a :class value, it will be combined with the default
    class name for your object. For example:
    
    
       <% content_tag_for(:li, @person, :class => "bar") %>...
    
    
    produces:
    
    
       <li id="person_123" class="person bar">...
    
    
    
        # File vendor/rails/actionpack/lib/action_view/helpers/record_tag_helper.rb, line 50
    50:       def content_tag_for(tag_name, record, *args, &block)
    51:         prefix  = args.first.is_a?(Hash) ? nil : args.shift
    52:         options = args.first.is_a?(Hash) ? args.shift : {}
    53:         concat content_tag(tag_name, capture(&block), 
    54:           options.merge({ :class => "#{dom_class(record)} #{options[:class]}".strip, :id => dom_id(record, prefix) })), 
    55:           block.binding
    56:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/RecordTagHelper.html#M000957
- :tinyuri: http://tinyurl.com/3jdlqu
  :path: 
  - ActionController
  - AbstractRequest
  :method: content_type
  :description: |+
    
        content_type()
    The MIME type of the HTTP request, such as Mime::XML.
    
    
    For backward compatibility, the post format is extracted from the
    X-Post-Data-Format HTTP header if present.
    
    
    
        # File vendor/rails/actionpack/lib/action_controller/request.rb, line 76
    76:     def content_type
    77:       @content_type ||= Mime::Type.lookup(content_type_without_parameters)
    78:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/AbstractRequest.html#M000402
- :tinyuri: http://tinyurl.com/4enbvt
  :path: 
  - ActionController
  - AbstractRequest
  :method: content_type_with_parameters
  :description: "\n  \n    content_type_with_parameters()\n  \n  \n  \n\
    The raw content type string. Use when you need parameters such as charset or\n\
    boundary which aren\xE2\x80\x98t included in the content_type MIME type. Overridden\n\
    342:       def content_type_with_parameters\n\
    343:         content_type_from_legacy_post_data_format_header ||\n\
    344:           env['CONTENT_TYPE'].to_s\n\
    345:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionController/AbstractRequest.html#M000429
- :tinyuri: http://tinyurl.com/4xzgtd
  :path: 
  - ActionController
  - AbstractRequest
  :method: content_type_without_parameters
  :description: |+
    
        content_type_without_parameters()
    The raw content type string with its parameters stripped off.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/request.rb, line 348
    348:       def content_type_without_parameters
    349:         @content_type_without_parameters ||= self.class.extract_content_type_without_parameters(content_type_with_parameters)
    350:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/AbstractRequest.html#M000430
- :tinyuri: http://tinyurl.com/3qg2s5
  :path: 
  - ActionController
  - TestCase
  :method: controller_class
  :description: |+
    
        controller_class()
    
    
        # File vendor/rails/actionpack/lib/action_controller/test_case.rb, line 24
    24:       def controller_class
    25:         if current_controller_class = read_inheritable_attribute(:controller_class)
    26:           current_controller_class
    27:         else
    28:           self.controller_class= determine_default_controller_class(name)
    29:         end
    30:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/TestCase.html#M000374
- :tinyuri: http://tinyurl.com/4lpqx4
  :path: 
  - ActionController
  - TestCase
  :method: controller_class=
  :description: |+
    
        controller_class=(new_class)
    
    
        # File vendor/rails/actionpack/lib/action_controller/test_case.rb, line 19
    19:       def controller_class=(new_class)
    20:         prepare_controller_class(new_class)
    21:         write_inheritable_attribute(:controller_class, new_class)
    22:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/TestCase.html#M000373
- :tinyuri: http://tinyurl.com/2xjm2x
  :path: 
  - ActionController
  - Base
  :method: controller_class_name
  :description: |+
    
        controller_class_name()
    Converts the class name from something like
    "OneModule::TwoModule::NeatController" to
    "NeatController".
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/base.rb, line 623
    623:       def controller_class_name
    624:         self.class.controller_class_name
    625:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Base.html#M000444
- :tinyuri: http://tinyurl.com/3hlays
  :path: 
  - ActionController
  - Base
  :method: controller_class_name
  :description: |+
    
        controller_class_name()
    Converts the class name from something like
    "OneModule::TwoModule::NeatController" to
    "NeatController".
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/base.rb, line 392
    392:       def controller_class_name
    393:         @controller_class_name ||= name.demodulize
    394:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Base.html#M000432
- :tinyuri: http://tinyurl.com/4cvx6r
  :path: 
  - ActionController
  - Base
  :method: controller_name
  :description: |+
    
        controller_name()
    Converts the class name from something like
    "OneModule::TwoModule::NeatController" to "neat".
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/base.rb, line 397
    397:       def controller_name
    398:         @controller_name ||= controller_class_name.sub(/Controller$/, '').underscore
    399:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Base.html#M000433
- :tinyuri: http://tinyurl.com/4r2s9a
  :path: 
  - ActionController
  - Base
  :method: controller_name
  :description: |+
    
        controller_name()
    Converts the class name from something like
    "OneModule::TwoModule::NeatController" to "neat".
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/base.rb, line 628
    628:       def controller_name
    629:         self.class.controller_name
    630:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Base.html#M000445
- :tinyuri: http://tinyurl.com/45sj5j
  :path: 
  - ActionMailer
  - Base
  :method: controller_name
  :description: |
    
        controller_name(value = nil)
    Alias for mailer_name
    
  :uri: http://api.rubyonrails.org/classes/ActionMailer/Base.html#M000877
- :tinyuri: http://tinyurl.com/2pqq5p
  :path: 
  - ActionController
  - Base
  :method: controller_path
  :description: |+
    
        controller_path()
    Converts the class name from something like
    "OneModule::TwoModule::NeatController" to
    "one_module/two_module/neat".
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/base.rb, line 633
    633:       def controller_path
    634:         self.class.controller_path
    635:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Base.html#M000446
- :tinyuri: http://tinyurl.com/4ukzqe
  :path: 
  - ActionMailer
  - Base
  :method: controller_path
  :description: |
    
        controller_path(value = nil)
    Alias for mailer_name
    
  :uri: http://api.rubyonrails.org/classes/ActionMailer/Base.html#M000878
- :tinyuri: http://tinyurl.com/49d9mn
  :path: 
  - ActionController
  - Base
  :method: controller_path
  :description: |+
    
        controller_path()
    Converts the class name from something like
    "OneModule::TwoModule::NeatController" to
    "one_module/two_module/neat".
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/base.rb, line 402
    402:       def controller_path
    403:         @controller_path ||= name.gsub(/Controller$/, '').underscore
    404:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Base.html#M000434
- :tinyuri: http://tinyurl.com/3sdu5y
  :path: 
  - ActionController
  - Routing
  :method: controller_relative_to
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionController/Routing.html#M000336
- :tinyuri: http://tinyurl.com/3hqpjm
  :path: 
  - HashWithIndifferentAccess
  :method: convert_key
  :description: |+
    
        convert_key(key)
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/hash/indifferent_access.rb, line 74
    74:     def convert_key(key)
    75:       key.kind_of?(Symbol) ? key.to_s : key
    76:     end
    
    
  :uri: http://api.rubyonrails.org/classes/HashWithIndifferentAccess.html#M000076
- :tinyuri: http://tinyurl.com/4r8ar4
  :path: 
  - HashWithIndifferentAccess
  :method: convert_value
  :description: |+
    
        convert_value(value)
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/hash/indifferent_access.rb, line 78
    78:     def convert_value(value)
    79:       case value
    80:       when Hash
    81:         value.with_indifferent_access
    82:       when Array
    83:         value.collect { |e| e.is_a?(Hash) ? e.with_indifferent_access : e }
    84:       else
    85:         value
    86:       end
    87:     end
    
    
  :uri: http://api.rubyonrails.org/classes/HashWithIndifferentAccess.html#M000077
- :tinyuri: http://tinyurl.com/5yaosc
  :path: 
  - ActionController
  - Cookies
  :method: cookies
  :description: |+
    
        cookies()
    Returns the cookie container, which operates as described above.
    
    
    
        # File vendor/rails/actionpack/lib/action_controller/cookies.rb, line 36
    36:       def cookies
    37:         CookieJar.new(self)
    38:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Cookies.html#M000306
- :tinyuri: http://tinyurl.com/4wzd3a
  :path: 
  - ActionController
  - TestProcess
  :method: cookies
  :description: |+
    
        cookies()
    
    
         # File vendor/rails/actionpack/lib/action_controller/test_process.rb, line 432
    432:     def cookies
    433:       @response.cookies
    434:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/TestProcess.html#M000197
- :tinyuri: http://tinyurl.com/4esrgn
  :path: 
  - ActiveRecord
  - Errors
  :method: count
  :description: |
    
        count()
    Alias for size
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Errors.html#M001359
- :tinyuri: http://tinyurl.com/2pkxp5
  :path: 
  - ActiveRecord
  - Calculations
  - ClassMethods
  :method: count
  :description: "\n  \n    count(*args)\n  \n  \n  \n\
    Count operates using three different approaches.\n\n\n\
    Count all: By not passing any parameters to count, it will return a count of all the rows for the model.\n\n\n\
    Count using column : By passing a column name to count, it will return a count of all the rows for the model\n\
    with supplied column present\n\n\n\
    Count using options will find the row count matched by the options used.\n\n\n\n\n\
    The third approach, count using\n\
    options, accepts an option hash as the only parameter. The options are:\n\n\n\
    :conditions: An SQL fragment like \"administrator = 1\" or\n\
    [ \"user_name = ?\", username ]. See conditions in the intro.\n\n\n\
    :joins: Either an SQL fragment for additional joins like\n\
    \"LEFT JOIN comments ON comments.post_id = id\" (rarely needed) or\n\
    named associations in the same form used for the :include option, which\n\
    will perform an INNER JOIN on the associated table(s). If the value is a\n\
    string, then the records will be returned read-only since they will have\n\
    attributes that do not correspond to the table\xE2\x80\x98s columns. Pass\n\
    :readonly => false to override.\n\n\n\
    :include: Named associations that should be loaded alongside using\n\
    LEFT OUTER JOINs. The symbols named refer to already defined associations.\n\
    When using named associations, count returns the number of DISTINCT\n\
    items for the model you\xE2\x80\x98re counting. See eager loading under\n\
    Associations.\n\n\n\
    :order: An SQL fragment like \"created_at DESC, name\"\n\
    (really only used with GROUP BY calculations).\n\n\n\
    :group: An attribute name by which the result should be grouped.\n\
    Uses the GROUP BY SQL-clause.\n\n\n\
    :select: By default, this is * as in SELECT * FROM, but can be\n\
    changed if you, for example, want to do a join but not include the joined\n\
    columns.\n\n\n\
    :distinct: Set this to true to make this a distinct calculation,\n\
    such as SELECT COUNT(DISTINCT posts.id) \xE2\x80\xA6\n\n\n\n\n\
    Examples for counting all:\n\n\n  Person.count         # returns the total count of all people\n\n\n\
    Examples for counting by column:\n\n\n  Person.count(:age)  # returns the total count of all people whose age is present in database\n\n\n\
    Examples for count with options:\n\n\n  Person.count(:conditions => \"age > 26\")\n  Person.count(:conditions => \"age > 26 AND job.salary > 60000\", :include => :job) # because of the named association, it finds the DISTINCT count using LEFT OUTER JOIN.\n  Person.count(:conditions => \"age > 26 AND job.salary > 60000\", :joins => \"LEFT JOIN jobs on jobs.person_id = person.id\") # finds the number of rows matching the conditions and joins.\n  Person.count('id', :conditions => \"age > 26\") # Performs a COUNT(id)\n  Person.count(:all, :conditions => \"age > 26\") # Performs a COUNT(*) (:all is an alias for '*')\n\n\n\
    Note: Person.count(:all) will not work because it will use :all as the\n\
    45:       def count(*args)\n\
    46:         calculate(:count, *construct_count_options_from_args(*args))\n\
    47:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Calculations/ClassMethods.html#M001337
- :tinyuri: http://tinyurl.com/3f57vj
  :path: 
  - ActiveResource
  - Errors
  :method: count
  :description: |
    
        count()
    Alias for size
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Errors.html#M000811
- :tinyuri: http://tinyurl.com/4aev3z
  :path: 
  - ActiveRecord
  - Base
  :method: count_by_sql
  :description: "\n  \n    count_by_sql(sql)\n  \n  \n  \n\
    Returns the result of an SQL statement that should only include a COUNT(*)\n\
    in the SELECT part. The use of this method should be restricted to\n\
    complicated SQL queries that can\xE2\x80\x98t be executed using the\n\
    ActiveRecord::Calculations class methods. Look into those before using\n\
    this.\n\n\
    Options\n\n\
    sql: An SQL statement which should return a count query from the\n\
    database, see the example below\n\n\
    729:       def count_by_sql(sql)\n\
    730:         sql = sanitize_conditions(sql)\n\
    731:         connection.select_value(sql, \"#{name} Count\").to_i\n\
    732:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001386
- :tinyuri: http://tinyurl.com/yr29ca
  :path: 
  - ActionView
  - Helpers
  - FormOptionsHelper
  :method: country_options_for_select
  :description: |+
    
        country_options_for_select(selected = nil, priority_countries = nil)
    Returns a string of option tags for pretty much any country in the world.
    Supply a country name as selected to have it marked as the
    selected option tag. You can also supply an array of countries as
    priority_countries, so that they will be listed above the rest of
    the (long) list.
    
    
    NOTE: Only the option tags are returned, you have to wrap this call in a
    regular HTML select tag.
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/form_options_helper.rb, line 247
    247:       def country_options_for_select(selected = nil, priority_countries = nil)
    248:         country_options = ""
    249: 
    250:         if priority_countries
    251:           country_options += options_for_select(priority_countries, selected)
    252:           country_options += "<option value=\"\" disabled=\"disabled\">-------------</option>\n"
    253:         end
    254: 
    255:         return country_options + options_for_select(COUNTRIES, selected)
    256:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/FormOptionsHelper.html#M000947
- :tinyuri: http://tinyurl.com/3zmvfn
  :path: 
  - ActionView
  - Helpers
  - FormOptionsHelper
  :method: country_select
  :description: |+
    
        country_select(object, method, priority_countries = nil, options = {}, html_options = {})
    Return select and option tags
    for the given object and method, using country_options_for_select to
    generate the list of option tags.
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/form_options_helper.rb, line 122
    122:       def country_select(object, method, priority_countries = nil, options = {}, html_options = {})
    123:         InstanceTag.new(object, method, self, nil, options.delete(:object)).to_country_select_tag(priority_countries, options, html_options)
    124:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/FormOptionsHelper.html#M000942
- :tinyuri: http://tinyurl.com/26qa3e
  :path: 
  - ActiveRecord
  - Base
  :method: create
  :description: |+
    
        create(attributes = nil)
    Creates an object (or multiple objects) and saves it to the database, if
    validations pass. The resulting object is returned whether the object was
    saved successfully to the database or not.
    
    
    The attributes parameter can be
    either be a Hash or an Array of Hashes. These Hashes describe the attributes on the objects that are to be
    created.
    
    Examples
    
      # Create a single new object
      User.create(:first_name => 'Jamie')
      # Create an Array of new objects
      User.create([{:first_name => 'Jamie'}, {:first_name => 'Jeremy'}])
    
    
    
         # File vendor/rails/activerecord/lib/active_record/base.rb, line 567
    567:       def create(attributes = nil)
    568:         if attributes.is_a?(Array)
    569:           attributes.collect { |attr| create(attr) }
    570:         else
    571:           object = new(attributes)
    572:           object.save
    573:           object
    574:         end
    575:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001379
- :tinyuri: http://tinyurl.com/3ppcgv
  :path: 
  - ActiveResource
  - Base
  :method: create
  :description: |+
    
        create()
    Create (i.e., save to the remote service)
    the new resource.
    
    
    
         # File vendor/rails/activeresource/lib/active_resource/base.rb, line 803
    803:       def create
    804:         returning connection.post(collection_path, to_xml, self.class.headers) do |response|
    805:           self.id = id_from_response(response)
    806:           load_attributes_from_response(response)
    807:         end
    808:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Base.html#M000857
- :tinyuri: http://tinyurl.com/3gujnl
  :path: 
  - ActiveResource
  - Base
  :method: create
  :description: |+
    
        create(attributes = {})
    Create a new resource instance and request
    to the remote service that it be saved, making it equivalent to the
    following simultaneous calls:
    
    
      ryan = Person.new(:first => 'ryan')
      ryan.save
    
    
    The newly created resource is returned. If a failure has occurred an
    exception will be raised (see save). If the
    resource is invalid and has not been saved then valid? will return
    false, while new? will still
    return true.
    
    Examples
    
      Person.create(:name => 'Jeremy', :email => 'myname@nospam.com', :enabled => true)
      my_person = Person.find(:first)
      my_person.email
      # => myname@nospam.com
    
      dhh = Person.create(:name => 'David', :email => 'dhh@nospam.com', :enabled => true)
      dhh.valid?
      # => true
      dhh.new?
      # => false
    
      # We'll assume that there's a validation that requires the name attribute
      that_guy = Person.create(:name => '', :email => 'thatguy@nospam.com', :enabled => true)
      that_guy.valid?
      # => false
      that_guy.new?
      # => true
    
    
    
         # File vendor/rails/activeresource/lib/active_resource/base.rb, line 339
    339:       def create(attributes = {})
    340:         returning(self.new(attributes)) { |res| res.save }        
    341:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Base.html#M000835
- :tinyuri: http://tinyurl.com/4j9nts
  :path: 
  - TimeZone
  :method: create
  :description: |+
    
        create(name, offset)
    Create a new TimeZone instance with the given name and offset.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/values/time_zone.rb, line 78
    78:     def create(name, offset)
    79:       zone = allocate
    80:       zone.send!(:initialize, name, offset)
    81:       zone
    82:     end
    
    
  :uri: http://api.rubyonrails.org/classes/TimeZone.html#M000024
- :tinyuri: http://tinyurl.com/4fpxco
  :path: 
  - ActiveRecord
  - Validations
  - ClassMethods
  :method: create!
  :description: |+
    
        create!(attributes = nil)
    Creates an object just like Base.create
    but calls save! instead of save so an exception is raised if the record is
    invalid.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/validations.rb, line 904
    904:       def create!(attributes = nil)
    905:         if attributes.is_a?(Array)
    906:           attributes.collect { |attr| create!(attr) }
    907:         else
    908:           object = new(attributes)
    909:           object.save!
    910:           object
    911:         end
    912:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Validations/ClassMethods.html#M001336
- :tinyuri: http://tinyurl.com/4mredw
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - MysqlAdapter
  :method: create_database
  :description: |+
    
        create_database(name, options = {})
    Create a new MySQL database with
    optional :charset and :collation. Charset defaults to utf8.
    
    
    Example:
    
    
      create_database 'charset_test', :charset => 'latin1', :collation => 'latin1_bin'
      create_database 'matt_development'
      create_database 'matt_development', :charset => :big5
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb, line 359
    359:       def create_database(name, options = {})
    360:         if options[:collation]
    361:           execute "CREATE DATABASE `#{name}` DEFAULT CHARACTER SET `#{options[:charset] || 'utf8'}` COLLATE `#{options[:collation]}`"
    362:         else
    363:           execute "CREATE DATABASE `#{name}` DEFAULT CHARACTER SET `#{options[:charset] || 'utf8'}`"
    364:         end
    365:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#M001235
- :tinyuri: http://tinyurl.com/3lq2za
  :path: 
  - vendor/rails/railties/lib/test_help.rb
  :method: create_fixtures
  :description: |+
    
        create_fixtures(*table_names)
    
    
        # File vendor/rails/railties/lib/test_help.rb, line 18
    18: def create_fixtures(*table_names)
    19:   Fixtures.create_fixtures(Test::Unit::TestCase.fixture_path, table_names)
    20: end
    
    
  :uri: http://api.rubyonrails.org/files/vendor/rails/railties/lib/test_help_rb.html#M000005
- :tinyuri: http://tinyurl.com/3wd73m
  :path: 
  - Fixtures
  :method: create_fixtures
  :description: 
  :uri: http://api.rubyonrails.org/classes/Fixtures.html#M000156
- :tinyuri: http://tinyurl.com/46fl4u
  :path: 
  - ActiveRecord
  - Reflection
  - ClassMethods
  :method: create_reflection
  :description: |+
    
        create_reflection(macro, name, options, active_record)
    
    
        # File vendor/rails/activerecord/lib/active_record/reflection.rb, line 13
    13:       def create_reflection(macro, name, options, active_record)
    14:         case macro
    15:           when :has_many, :belongs_to, :has_one, :has_and_belongs_to_many
    16:             reflection = AssociationReflection.new(macro, name, options, active_record)
    17:           when :composed_of
    18:             reflection = AggregateReflection.new(macro, name, options, active_record)
    19:         end
    20:         write_inheritable_hash :reflections, name => reflection
    21:         reflection
    22:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Reflection/ClassMethods.html#M001120
- :tinyuri: http://tinyurl.com/2upq9h
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - SchemaStatements
  :method: create_table
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#M001150
- :tinyuri: http://tinyurl.com/4puzgj
  :path: 
  - ActionController
  - Assertions
  - SelectorAssertions
  :method: css_select
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionController/Assertions/SelectorAssertions.html#M000359
- :tinyuri: http://tinyurl.com/4zs4fb
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - MysqlAdapter
  :method: current_database
  :description: |+
    
        current_database()
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb, line 371
    371:       def current_database
    372:         select_value 'SELECT DATABASE() as db'
    373:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#M001236
- :tinyuri: http://tinyurl.com/3kxnq8
  :path: 
  - Rails
  - Generator
  - Commands
  - Base
  :method: current_migration_number
  :description: |+
    
        current_migration_number()
    
    
        # File vendor/rails/railties/lib/rails_generator/commands.rb, line 72
    72:           def current_migration_number
    73:             Dir.glob("#{RAILS_ROOT}/#{@migration_directory}/[0-9]*_*.rb").inject(0) do |max, file_path|
    74:               n = File.basename(file_path).split('_', 2).first.to_i
    75:               if n > max then n else max end
    76:             end
    77:           end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Commands/Base.html#M001505
- :tinyuri: http://tinyurl.com/487wtw
  :path: 
  - ActionView
  - Helpers
  - UrlHelper
  :method: current_page?
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/UrlHelper.html#M000919
- :tinyuri: http://tinyurl.com/3fjrd3
  :path: 
  - ActiveResource
  - CustomMethods
  - ClassMethods
  :method: custom_method_collection_url
  :description: |+
    
        custom_method_collection_url(method_name, options = {})
    
    
        # File vendor/rails/activeresource/lib/active_resource/custom_methods.rb, line 67
    67:       def custom_method_collection_url(method_name, options = {})
    68:         prefix_options, query_options = split_options(options)
    69:         "#{prefix(prefix_options)}#{collection_name}/#{method_name}.xml#{query_string(query_options)}"
    70:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/CustomMethods/ClassMethods.html#M000783
- :tinyuri: http://tinyurl.com/4pyckz
  :path: 
  - ActionView
  - Helpers
  - TextHelper
  :method: cycle
  :description: |+
    
        cycle(first_value, *values)
    Creates a Cycle object whose to_s method cycles through elements
    of an array every time it is called. This can be used for example, to
    alternate classes for table rows. You can use named cycles to allow nesting
    in loops. Passing a Hash as the last parameter with a :name key
    will create a named cycle. You can
    manually reset a cycle by calling reset_cycle and passing the name of the
    cycle.
    
    Examples
    
      # Alternate CSS classes for even and odd numbers...
      @items = [1,2,3,4]
      <table>
      <% @items.each do |item| %>
        <tr class="<%= cycle("even", "odd") -%>">
          <td>item</td>
        </tr>
      <% end %>
      </table>
    
      # Cycle CSS classes for rows, and text colors for values within each row
      @items = x = [{:first => 'Robert', :middle => 'Daniel', :last => 'James'},
                   {:first => 'Emily', :middle => 'Shannon', :maiden => 'Pike', :last => 'Hicks'},
                  {:first => 'June', :middle => 'Dae', :last => 'Jones'}]
      <% @items.each do |item| %>
        <tr class="<%= cycle("even", "odd", :name => "row_class") -%>">
          <td>
            <% item.values.each do |value| %>
              <%# Create a named cycle "colors" %>
              <span style="color:<%= cycle("red", "green", "blue", :name => "colors") -%>">
                <%= value %>
              </span>
            <% end %>
            <% reset_cycle("colors") %>
          </td>
       </tr>
     <% end %>
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/text_helper.rb, line 352
    352:       def cycle(first_value, *values)
    353:         if (values.last.instance_of? Hash)
    354:           params = values.pop
    355:           name = params[:name]
    356:         else
    357:           name = "default"
    358:         end
    359:         values.unshift(first_value)
    360: 
    361:         cycle = get_cycle(name)
    362:         if (cycle.nil? || cycle.values != values)
    363:           cycle = set_cycle(name, Cycle.new(*values))
    364:         end
    365:         return cycle.to_s
    366:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/TextHelper.html#M001059
- :tinyuri: http://tinyurl.com/4hvvja
  :path: 
  - Kernel
  :method: daemonize
  :description: |+
    
        daemonize()
    Turns the current script into a daemon process that detaches from the
    console. It can be shut down with a TERM signal.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/kernel/daemonizing.rb, line 4
     4:   def daemonize
     5:     exit if fork                   # Parent exits, child continues.
     6:     Process.setsid                 # Become session leader.
     7:     exit if fork                   # Zap session leader. See [1].
     8:     Dir.chdir "/"                  # Release old working directory.
     9:     File.umask 0000                # Ensure sensible umask. Adjust as needed.
    10:     STDIN.reopen "/dev/null"       # Free file descriptors and
    11:     STDOUT.reopen "/dev/null", "a" # point them somewhere sensible.
    12:     STDERR.reopen STDOUT           # STDOUT/ERR should better go to a logfile.
    13:     trap("TERM") { exit }
    14:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Kernel.html#M001636
- :tinyuri: http://tinyurl.com/4x9cwn
  :path: 
  - Inflector
  :method: dasherize
  :description: |+
    
        dasherize(underscored_word)
    Replaces underscores with dashes in the string.
    
    
    Example
    
    
      "puni_puni" #=> "puni-puni"
    
    
    
         # File vendor/rails/activesupport/lib/active_support/inflector.rb, line 187
    187:   def dasherize(underscored_word)
    188:     underscored_word.gsub(/_/, '-')
    189:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Inflector.html#M001622
- :tinyuri: http://tinyurl.com/4lgm3e
  :path: 
  - ActiveSupport
  - CoreExtensions
  - String
  - Inflections
  :method: dasherize
  :description: |+
    
        dasherize()
    Replaces underscores with dashes in the string.
    
    
    Example
    
    
      "puni_puni" #=> "puni-puni"
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/string/inflections.rb, line 83
    83:         def dasherize
    84:           Inflector.dasherize(self)
    85:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/String/Inflections.html#M000747
- :tinyuri: http://tinyurl.com/4clta4
  :path: 
  - Rails
  - Configuration
  :method: database_configuration
  :description: |+
    
        database_configuration()
    Loads and returns the contents of the database_configuration_file. The
    contents of the file are processed via ERB before
    being sent through YAML::load.
    
    
    
         # File vendor/rails/railties/lib/initializer.rb, line 506
    506:     def database_configuration
    507:       YAML::load(ERB.new(IO.read(database_configuration_file)).result)
    508:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Configuration.html#M001608
- :tinyuri: http://tinyurl.com/225jsl
  :path: 
  - ActionView
  - Helpers
  - DateHelper
  :method: date_select
  :description: "\n  \n    date_select(object_name, method, options = {})\n  \n  \n  \n\
    Returns a set of select tags (one for year, month, and day) pre-selected\n\
    for accessing a specified date-based attribute (identified by\n\
    method) on an object assigned to the template (identified by\n\
    object). It\xE2\x80\x98s possible to tailor the selects through the\n\
    options hash, which accepts all the keys that each of the\n\
    individual select builders do (like :use_month_numbers for select_month) as well as a range of\n\
    discard options. The discard options are :discard_year,\n\
    :discard_month and :discard_day. Set to true,\n\
    they\xE2\x80\x98ll drop the respective select. Discarding the month select will\n\
    also automatically discard the day select. It\xE2\x80\x98s also possible to\n\
    explicitly set the order of the tags using the :order option with\n\
    an array of symbols :year, :month and :day in\n\
    the desired order. Symbols may be omitted and the respective select is not\n\
    included.\n\n\n\
    Pass the :default option to set the default date. Use a Time\n\
    object or a Hash of :year, :month, :day, :hour, :minute, and :second.\n\n\n\
    Passing :disabled => true as part of the options will make\n\
    elements inaccessible for change.\n\n\n\
    NOTE: Discarded selects will default to 1. So if no month select is\n\
    available, January will be assumed.\n\n\
    Examples\n\n  # Generates a date select that when POSTed is stored in the post variable, in the written_on attribute\n  date_select(\"post\", \"written_on\")\n\n  # Generates a date select that when POSTed is stored in the post variable, in the written_on attribute,\n  # with the year in the year drop down box starting at 1995.\n  date_select(\"post\", \"written_on\", :start_year => 1995)\n\n  # Generates a date select that when POSTed is stored in the post variable, in the written_on attribute,\n  # with the year in the year drop down box starting at 1995, numbers used for months instead of words,\n  # and without a day select box.\n  date_select(\"post\", \"written_on\", :start_year => 1995, :use_month_numbers => true,\n                                    :discard_day => true, :include_blank => true)\n\n  # Generates a date select that when POSTed is stored in the post variable, in the written_on attribute\n  # with the fields ordered as day, month, year rather than month, day, year.\n  date_select(\"post\", \"written_on\", :order => [:day, :month, :year])\n\n  # Generates a date select that when POSTed is stored in the user variable, in the birthday attribute\n  # lacking a year field.\n  date_select(\"user\", \"birthday\", :order => [:month, :day])\n\n  # Generates a date select that when POSTed is stored in the user variable, in the birthday attribute\n  # which is initially set to the date 3 days from the current date\n  date_select(\"post\", \"written_on\", :default => 3.days.from_now)\n\n  # Generates a date select that when POSTed is stored in the credit_card variable, in the bill_due attribute\n  # that will have a default day of 20.\n  date_select(\"credit_card\", \"bill_due\", :default => { :day => 20 })\n\n\n\
    The selects are prepared for multi-parameter assignment to an Active Record\n\
    object.\n\n\n\
    Note: If the day is not included as an option but the month is, the day\n\
    151:       def date_select(object_name, method, options = {})\n\
    152:         InstanceTag.new(object_name, method, self, nil, options.delete(:object)).to_date_select_tag(options)\n\
    153:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/DateHelper.html#M001009
- :tinyuri: http://tinyurl.com/5xt5ds
  :path: 
  - Logger
  :method: datetime_format
  :description: |+
    
        datetime_format()
    Get the logging datetime format. Returns nil if the formatter does not support datetime
    formatting.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/clean_logger.rb, line 45
    45:   def datetime_format
    46:     formatter.datetime_format if formatter.respond_to?(:datetime_format)
    47:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Logger.html#M000125
- :tinyuri: http://tinyurl.com/4g6jr8
  :path: 
  - Logger
  :method: datetime_format=
  :description: |+
    
        datetime_format=(datetime_format)
    Logging date-time format (string passed to strftime). Ignored if
    the formatter does not respond to datetime_format=.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/clean_logger.rb, line 38
    38:   def datetime_format=(datetime_format)
    39:     formatter.datetime_format = datetime_format if formatter.respond_to?(:datetime_format=)
    40:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Logger.html#M000124
- :tinyuri: http://tinyurl.com/525yf4
  :path: 
  - ActionView
  - Helpers
  - DateHelper
  :method: datetime_select
  :description: |+
    
        datetime_select(object_name, method, options = {})
    Returns a set of select tags (one for year, month, day, hour, and minute)
    pre-selected for accessing a specified datetime-based attribute (identified
    by method) on an object assigned to the template (identified by
    object). Examples:
    
    Examples
    
      # Generates a datetime select that, when POSTed, will be stored in the post variable in the written_on attribute
      datetime_select("post", "written_on")
    
      # Generates a datetime select with a year select that starts at 1995 that, when POSTed, will be stored in the
      # post variable in the written_on attribute.
      datetime_select("post", "written_on", :start_year => 1995)
    
      # Generates a datetime select with a default value of 3 days from the current time that, when POSTed, will be stored in the
      # trip variable in the departing attribute.
      datetime_select("trip", "departing", :default => 3.days.from_now)
    
      # Generates a datetime select that discards the type that, when POSTed, will be stored in the post variable as the written_on
      # attribute.
      datetime_select("post", "written_on", :discard_type => true)
    
    
    The selects are prepared for multi-parameter assignment to an Active Record
    object.
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/date_helper.rb, line 208
    208:       def datetime_select(object_name, method, options = {})
    209:         InstanceTag.new(object_name, method, self, nil, options.delete(:object)).to_datetime_select_tag(options)
    210:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/DateHelper.html#M001011
- :tinyuri: http://tinyurl.com/3rwanh
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Numeric
  - Time
  :method: day
  :description: |
    
        day()
    Alias for days
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Numeric/Time.html#M000645
- :tinyuri: http://tinyurl.com/54dsuw
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Numeric
  - Time
  :method: days
  :description: |+
    
        days()
    
      This method is also aliased as
      day
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/numeric/time.rb, line 48
    48:         def days
    49:           ActiveSupport::Duration.new(self * 24.hours, [[:days, self]])
    50:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Numeric/Time.html#M000644
- :tinyuri: http://tinyurl.com/4nuuxp
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Calculations
  - ClassMethods
  :method: days_in_month
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Calculations/ClassMethods.html#M000607
- :tinyuri: http://tinyurl.com/42nkuy
  :path: 
  - ActionView
  - Helpers
  - DebugHelper
  :method: debug
  :description: |+
    
        debug(object)
    Returns a <pre>-tag that has object dumped by YAML. This
    creates a very readable way to inspect an object.
    
    Example
    
     my_hash = {'first' => 1, 'second' => 'two', 'third' => [1,2,3]}
     debug(my_hash)
    
     => <pre class='debug_dump'>---
     first: 1
     second: two
     third:
     - 1
     - 2
     - 3
     </pre>
    
    
    
        # File vendor/rails/actionpack/lib/action_view/helpers/debug_helper.rb, line 20
    20:       def debug(object)
    21:         begin
    22:           Marshal::dump(object)
    23:           "<pre class='debug_dump'>#{h(object.to_yaml).gsub("  ", "&nbsp; ")}</pre>"
    24:         rescue Exception => e  # errors from Marshal or YAML
    25:           # Object couldn't be dumped, perhaps because of singleton methods -- this is the fallback
    26:           "<code class='debug_dump'>#{h(object.inspect)}</code>"
    27:         end
    28:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/DebugHelper.html#M001000
- :tinyuri: http://tinyurl.com/4dapfd
  :path: 
  - Kernel
  :method: debugger
  :description: "\n  \n    debugger()\n  \n  \n  \n\
    Starts a debugging session if ruby-debug has been loaded (call\n\
    script/server \xE2\x80\x94debugger to do load\n\
    4:     def debugger\n\
    5:       RAILS_DEFAULT_LOGGER.info \"\\n***** Debugger requested, but was not available: Start server with --debugger to enable *****\\n\"\n\
    6:     end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/Kernel.html#M001637
- :tinyuri: http://tinyurl.com/4kd6gl
  :path: 
  - Builder
  - XmlMarkup
  :method: declare!
  :description: |+
    
        declare!(inst, *args, &block)
    Insert an XML declaration into the XML markup.
    
    
    For example:
    
    
      xml.declare! :ELEMENT, :blah, "yada"
          # => <!ELEMENT blah "yada">
    
    
    
         # File vendor/rails/activesupport/lib/active_support/vendor/builder-2.1.2/builder/xmlmarkup.rb, line 208
    208:     def declare!(inst, *args, &block)
    209:       _indent
    210:       @target << "<!#{inst}"
    211:       args.each do |arg|
    212:         case arg
    213:         when String
    214:           @target << %{ "#{arg}"} # " WART
    215:         when Symbol
    216:           @target << " #{arg}"
    217:         end
    218:       end
    219:       if block_given?
    220:         @target << " ["
    221:         _newline
    222:         _nested_structures(block)
    223:         @target << "]"
    224:       end
    225:       @target << ">"
    226:       _newline
    227:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Builder/XmlMarkup.html#M000893
- :tinyuri: http://tinyurl.com/3g8nzc
  :path: 
  - ActiveResource
  - Formats
  - JsonFormat
  :method: decode
  :description: |+
    
        decode(json)
    
    
        # File vendor/rails/activeresource/lib/active_resource/formats/json_format.rb, line 18
    18:       def decode(json)
    19:         ActiveSupport::JSON.decode(json)
    20:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Formats/JsonFormat.html#M000796
- :tinyuri: http://tinyurl.com/3nb4jk
  :path: 
  - ActiveSupport
  - JSON
  :method: decode
  :description: |+
    
        decode(json)
    Converts a JSON string into a Ruby object.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/json/decoding.rb, line 11
    11:       def decode(json)
    12:         YAML.load(convert_json_to_yaml(json))
    13:       rescue ArgumentError => e
    14:         raise ParseError, "Invalid JSON string"
    15:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/JSON.html#M000557
- :tinyuri: http://tinyurl.com/3jqe2g
  :path: 
  - ActiveResource
  - Formats
  - XmlFormat
  :method: decode
  :description: |+
    
        decode(xml)
    
    
        # File vendor/rails/activeresource/lib/active_resource/formats/xml_format.rb, line 18
    18:       def decode(xml)
    19:         from_xml_data(Hash.from_xml(xml))
    20:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Formats/XmlFormat.html#M000792
- :tinyuri: http://tinyurl.com/3qss3o
  :path: 
  - ActionController
  - HttpAuthentication
  - Basic
  :method: decode_credentials
  :description: |+
    
        decode_credentials(request)
    
    
         # File vendor/rails/actionpack/lib/action_controller/http_authentication.rb, line 112
    112:       def decode_credentials(request)
    113:         Base64.decode64(authorization(request).split.last || '')
    114:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/HttpAuthentication/Basic.html#M000210
- :tinyuri: http://tinyurl.com/3fchmb
  :path: 
  - ActiveSupport
  - Multibyte
  - Handlers
  - UTF8Handler
  :method: decompose
  :description: |+
    
        decompose(str)
    Perform decomposition on the characters in the string
    
    
    
         # File vendor/rails/activesupport/lib/active_support/multibyte/handlers/utf8_handler.rb, line 307
    307:       def decompose(str)
    308:         decompose_codepoints(:canonical, u_unpack(str)).pack('U*')
    309:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Handlers/UTF8Handler.html#M000531
- :tinyuri: http://tinyurl.com/3thcor
  :path: 
  - ActiveSupport
  - Multibyte
  - Handlers
  - UTF8Handler
  :method: decompose_codepoints
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Handlers/UTF8Handler.html#M000545
- :tinyuri: http://tinyurl.com/43jqq2
  :path: 
  - ActiveRecord
  - Base
  :method: decrement
  :description: |+
    
        decrement(attribute)
    Initializes the attribute to zero if nil and subtracts one. Only
    makes sense for number-based attributes.
    Returns self.
    
    
    
          # File vendor/rails/activerecord/lib/active_record/base.rb, line 2057
    2057:       def decrement(attribute)
    2058:         self[attribute] ||= 0
    2059:         self[attribute] -= 1
    2060:         self
    2061:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001440
- :tinyuri: http://tinyurl.com/6nqkmf
  :path: 
  - ActiveRecord
  - Base
  :method: decrement!
  :description: |+
    
        decrement!(attribute)
    Decrements the attribute and saves the record.
    
    
    
          # File vendor/rails/activerecord/lib/active_record/base.rb, line 2064
    2064:       def decrement!(attribute)
    2065:         decrement(attribute).update_attribute(attribute, self[attribute])
    2066:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001441
- :tinyuri: http://tinyurl.com/4l9ccm
  :path: 
  - ActiveRecord
  - Base
  :method: decrement_counter
  :description: |+
    
        decrement_counter(counter_name, id)
    Decrement a number field by one, usually representing a count.
    
    
    This works the same as increment_counter
    but reduces the column value by 1 instead of increasing it.
    
    Options
    
    counter_name The name of the field that should be decremented
    id The id of the object that should be decremented
    
    Examples
    
      # Decrement the post_count column for the record with an id of 5
      DiscussionBoard.decrement_counter(:post_count, 5)
    
    
    
         # File vendor/rails/activerecord/lib/active_record/base.rb, line 797
    797:       def decrement_counter(counter_name, id)
    798:         update_counters(id, counter_name => -1)
    799:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001389
- :tinyuri: http://tinyurl.com/4cejjc
  :path: 
  - Rails
  - Generator
  - GeneratedAttribute
  :method: default
  :description: |+
    
        default()
    
    
        # File vendor/rails/railties/lib/rails_generator/generated_attribute.rb, line 26
    26:       def default
    27:         @default ||= case type
    28:           when :integer                     then 1
    29:           when :float                       then 1.5
    30:           when :decimal                     then "9.99"
    31:           when :datetime, :timestamp, :time then Time.now.to_s(:db)
    32:           when :date                        then Date.today.to_s(:db)
    33:           when :string                      then "MyString"
    34:           when :text                        then "MyText"
    35:           when :boolean                     then false
    36:           else
    37:             ""
    38:         end      
    39:       end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/GeneratedAttribute.html#M001562
- :tinyuri: http://tinyurl.com/45c5z4
  :path: 
  - HashWithIndifferentAccess
  :method: default
  :description: |+
    
        default(key = nil)
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/hash/indifferent_access.rb, line 14
    14:   def default(key = nil)
    15:     if key.is_a?(Symbol) && include?(key = key.to_s)
    16:       self[key]
    17:     else
    18:       super
    19:     end
    20:   end
    
    
  :uri: http://api.rubyonrails.org/classes/HashWithIndifferentAccess.html#M000063
- :tinyuri: http://tinyurl.com/4fwa3g
  :path: 
  - RailsEnvironment
  :method: default
  :description: |+
    
        default()
    
    
        # File vendor/rails/railties/lib/commands/plugin.rb, line 73
    73:   def self.default
    74:     @default ||= find
    75:   end
    
    
  :uri: http://api.rubyonrails.org/classes/RailsEnvironment.html#M000053
- :tinyuri: http://tinyurl.com/3rpxwp
  :path: 
  - RailsEnvironment
  :method: default=
  :description: |+
    
        default=(rails_env)
    
    
        # File vendor/rails/railties/lib/commands/plugin.rb, line 77
    77:   def self.default=(rails_env)
    78:     @default = rails_env
    79:   end
    
    
  :uri: http://api.rubyonrails.org/classes/RailsEnvironment.html#M000054
- :tinyuri: http://tinyurl.com/4a7lcq
  :path: 
  - Rails
  - Generator
  - Options
  :method: default_options
  :description: |+
    
        default_options()
    Convenient access to class default options.
    
    
    
        # File vendor/rails/railties/lib/rails_generator/options.rb, line 61
    61:         def default_options
    62:           self.class.default_options
    63:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Options.html#M001477
- :tinyuri: http://tinyurl.com/3mxc92
  :path: 
  - ActionController
  - RequestProfiler
  :method: default_options
  :description: |+
    
        default_options()
    
    
        # File vendor/rails/actionpack/lib/action_controller/request_profiler.rb, line 92
    92:     def default_options
    93:       { :n => 100, :open => 'open %s &' }
    94:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/RequestProfiler.html#M000385
- :tinyuri: http://tinyurl.com/3zflov
  :path: 
  - Rails
  - Generator
  - Options
  - ClassMethods
  :method: default_options
  :description: |+
    
        default_options(options = nil)
    
    
        # File vendor/rails/railties/lib/rails_generator/options.rb, line 30
    30:         def default_options(options = nil)
    31:           if options
    32:             write_inheritable_attribute(:default_options, options)
    33:           else
    34:             read_inheritable_attribute(:default_options) or write_inheritable_attribute(:default_options, {})
    35:           end
    36:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Options/ClassMethods.html#M001487
- :tinyuri: http://tinyurl.com/4dpbtu
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - SQLiteAdapter
  :method: default_primary_key_type
  :description: |+
    
        default_primary_key_type()
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/sqlite_adapter.rb, line 360
    360:         def default_primary_key_type
    361:           if supports_autoincrement?
    362:             'INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL'.freeze
    363:           else
    364:             'INTEGER PRIMARY KEY NOT NULL'.freeze
    365:           end
    366:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#M001250
- :tinyuri: http://tinyurl.com/3pz2q6
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - DatabaseStatements
  :method: default_sequence_name
  :description: |+
    
        default_sequence_name(table, column)
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 128
    128:       def default_sequence_name(table, column)
    129:         nil
    130:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#M001189
- :tinyuri: http://tinyurl.com/3gn9wt
  :path: 
  - ActionController
  - Base
  :method: default_url_options
  :description: |+
    
        default_url_options(options)
    Overwrite to implement a number of default options that all url_for-based methods will use. The default
    options should come in the form of a hash, just like the one you would use
    for url_for directly. Example:
    
    
      def default_url_options(options)
        { :project => @project.active? ? @project.url_name : "unknown" }
      end
    
    
    As you can infer from the example, this is mostly useful for situations
    where you want to centralize dynamic decisions about the urls as they stem
    from the business domain. Please note that any individual url_for call can always override the defaults
    set by this method.
    
    
    
          # File vendor/rails/actionpack/lib/action_controller/base.rb, line 1000
    1000:       def default_url_options(options) #:doc:
    1001:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Base.html#M000455
- :tinyuri: http://tinyurl.com/3npoy4
  :path: 
  - Repositories
  :method: defaults
  :description: |+
    
        defaults()
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 329
    329:   def defaults
    330:     "http://dev.rubyonrails.com/svn/rails/plugins/\n"
    331:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Repositories.html#M000087
- :tinyuri: http://tinyurl.com/44uj3k
  :path: 
  - ActiveRecord
  - Schema
  :method: define
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Schema.html#M001375
- :tinyuri: http://tinyurl.com/4ycsjg
  :path: 
  - Logger
  :method: define_around_helper
  :description: |+
    
        define_around_helper(level)
    
    
       # File vendor/rails/activesupport/lib/active_support/core_ext/logger.rb, line 4
    4:   def self.define_around_helper(level)
    5:     module_eval "def around_\#{level}(before_message, after_message, &block)\nself.\#{level}(before_message)\nreturn_value = block.call(self)\nself.\#{level}(after_message)\nreturn return_value\nend\n"
    6:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Logger.html#M000127
- :tinyuri: http://tinyurl.com/4mk4n7
  :path: 
  - ActiveRecord
  - AttributeMethods
  - ClassMethods
  :method: define_attribute_methods
  :description: |+
    
        define_attribute_methods()
    generates all the attribute related methods for columns in the database
    accessors, mutators and query methods
    
    
      This method is also aliased as
      define_read_methods
    
    
    
        # File vendor/rails/activerecord/lib/active_record/attribute_methods.rb, line 61
    61:       def define_attribute_methods
    62:         return if generated_methods?
    63:         columns_hash.each do |name, column|
    64:           unless instance_method_already_implemented?(name)
    65:             if self.serialized_attributes[name]
    66:               define_read_method_for_serialized_attribute(name)
    67:             else
    68:               define_read_method(name.to_sym, name, column)
    69:             end
    70:           end
    71: 
    72:           unless instance_method_already_implemented?("#{name}=")
    73:             define_write_method(name.to_sym)
    74:           end
    75: 
    76:           unless instance_method_already_implemented?("#{name}?")
    77:             define_question_method(name)
    78:           end
    79:         end
    80:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/AttributeMethods/ClassMethods.html#M001097
- :tinyuri: http://tinyurl.com/3tvw6b
  :path: 
  - ActionView
  - Helpers
  - JavaScriptHelper
  :method: define_javascript_functions
  :description: "\n  \n    define_javascript_functions()\n  \n  \n  \n\
    Includes the Action Pack JavaScript libraries inside a single\n\
    <script> tag. The function first includes prototype.js and then its\n\
    core extensions, (determined by filenames starting with\n\
    \"prototype\"). Afterwards, any additional scripts will be included\n\
    in undefined order.\n\n\n\
    Note: The recommended approach is to copy the contents of\n\
    lib/action_view/helpers/javascripts/ into your application\xE2\x80\x98s\n\
    public/javascripts/ directory, and use javascript_include_tag to\n\
    134:       def define_javascript_functions\n\
    135:         javascript = \"<script type=\\\"#{Mime::JS}\\\">\"\n\
    136:         \n\
    137:         # load prototype.js and its extensions first \n\
    138:         prototype_libs = Dir.glob(File.join(JAVASCRIPT_PATH, 'prototype*')).sort.reverse\n\
    139:         prototype_libs.each do |filename| \n\
    140:           javascript << \"\\n\" << IO.read(filename)\n\
    141:         end\n\
    142:         \n\
    143:         # load other libraries\n\
    144:         (Dir.glob(File.join(JAVASCRIPT_PATH, '*')) - prototype_libs).each do |filename| \n\
    145:           javascript << \"\\n\" << IO.read(filename)\n\
    146:         end\n\
    147:         javascript << '</script>'\n\
    148:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/JavaScriptHelper.html#M001063
- :tinyuri: http://tinyurl.com/44yd7j
  :path: 
  - ActiveRecord
  - AttributeMethods
  - ClassMethods
  :method: define_read_methods
  :description: |
    
        define_read_methods()
    Alias for define_attribute_methods
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/AttributeMethods/ClassMethods.html#M001099
- :tinyuri: http://tinyurl.com/4elhpv
  :path: 
  - ActionView
  - Helpers
  - PrototypeHelper
  - JavaScriptGenerator
  - GeneratorMethods
  :method: delay
  :description: |+
    
        delay(seconds = 1) {|| ...}
    Executes the content of the block after a delay of seconds.
    Example:
    
    
      # Generates:
      #     setTimeout(function() {
      #     ;
      #     new Effect.Fade("notice",{});
      #     }, 20000);
      page.delay(20) do
        page.visual_effect :fade, 'notice'
      end
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/prototype_helper.rb, line 903
    903:           def delay(seconds = 1)
    904:             record "setTimeout(function() {\n\n"
    905:             yield
    906:             record "}, #{(seconds * 1000).to_i})"
    907:           end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#M000989
- :tinyuri: http://tinyurl.com/47j3on
  :path: 
  - ActiveResource
  - CustomMethods
  :method: delete
  :description: "\n  \n    delete(custom_method_name, options = {})\n  \n  \n  \n\
    55:           def delete(custom_method_name, options = {})\n\
    56:             if (custom_method_name.is_a?(Symbol))\n\
    57:               connection.delete(custom_method_collection_url(custom_method_name, options), headers)\n\
    58:             else\n\
    59:               orig_delete(custom_method_name, options)\n\
    60:             end\n\
    61:           end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveResource/CustomMethods.html#M000782
- :tinyuri: http://tinyurl.com/3voavd
  :path: 
  - ActiveResource
  - Base
  :method: delete
  :description: |+
    
        delete(id, options = {})
    Deletes the resources with the ID in the id parameter.
    
    Options
    
    All options specify prefix and query
    parameters.
    
    Examples
    
      Event.delete(2)
      # => DELETE /events/2
    
      Event.create(:name => 'Free Concert', :location => 'Community Center')
      my_event = Event.find(:first)
      # => Events (id: 7)
      Event.delete(my_event.id)
      # => DELETE /events/7
    
      # Let's assume a request to events/5/cancel.xml
      Event.delete(params[:id])
      # => DELETE /events/5
    
    
    
         # File vendor/rails/activeresource/lib/active_resource/base.rb, line 412
    412:       def delete(id, options = {})
    413:         connection.delete(element_path(id, options))
    414:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Base.html#M000837
- :tinyuri: http://tinyurl.com/3oltu5
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - DatabaseStatements
  :method: delete
  :description: |+
    
        delete(sql, name = nil)
    Executes the delete statement
    and returns the number of rows affected.
    
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 53
    53:       def delete(sql, name = nil)
    54:         delete_sql(sql, name)
    55:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#M001181
- :tinyuri: http://tinyurl.com/45qowl
  :path: 
  - ActiveRecord
  - Base
  :method: delete
  :description: "\n  \n    delete(id)\n  \n  \n  \n\
    Delete an object (or multiple objects) where the id given matches the primary_key. A SQL DELETE command is\n\
    executed on the database which means that no callbacks are fired off\n\
    running this. This is an efficient method of deleting records that\n\
    don\xE2\x80\x98t need cleaning up after or other actions to be taken.\n\n\n\
    Objects are not instantiated with this method.\n\n\
    Options\n\n\
    id Can be either an Integer or an\n\
    Array of Integers\n\n\
    622:       def delete(id)\n\
    623:         delete_all([ \"#{connection.quote_column_name(primary_key)} IN (?)\", id ])\n\
    624:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001381
- :tinyuri: http://tinyurl.com/5y3f4k
  :path: 
  - ActiveResource
  - Connection
  :method: delete
  :description: |+
    
        delete(path, headers = {})
    Execute a DELETE request (see HTTP protocol documentation if unfamiliar).
    Used to delete resources.
    
    
    
        # File vendor/rails/activeresource/lib/active_resource/connection.rb, line 88
    88:     def delete(path, headers = {})
    89:       request(:delete, path, build_request_headers(headers))
    90:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Connection.html#M000871
- :tinyuri: http://tinyurl.com/3l46dy
  :path: 
  - HashWithIndifferentAccess
  :method: delete
  :description: |+
    
        delete(key)
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/hash/indifferent_access.rb, line 60
    60:   def delete(key)
    61:     super(convert_key(key))
    62:   end
    
    
  :uri: http://api.rubyonrails.org/classes/HashWithIndifferentAccess.html#M000071
- :tinyuri: http://tinyurl.com/4uzokg
  :path: 
  - ActiveResource
  - CustomMethods
  - InstanceMethods
  :method: delete
  :description: |+
    
        delete(method_name, options = {})
    
    
        # File vendor/rails/activeresource/lib/active_resource/custom_methods.rb, line 90
    90:       def delete(method_name, options = {})
    91:         connection.delete(custom_method_element_url(method_name, options), self.class.headers)
    92:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/CustomMethods/InstanceMethods.html#M000787
- :tinyuri: http://tinyurl.com/4ngaj8
  :path: 
  - ActionController
  - Integration
  - Session
  :method: delete
  :description: |+
    
        delete(path, parameters = nil, headers = nil)
    Performs a DELETE request with the given parameters. See get() for more details.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/integration.rb, line 186
    186:       def delete(path, parameters = nil, headers = nil)
    187:         process :delete, path, parameters, headers
    188:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Integration/Session.html#M000248
- :tinyuri: http://tinyurl.com/54l5lo
  :path: 
  - ActionController
  - AbstractRequest
  :method: delete?
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionController/AbstractRequest.html#M000398
- :tinyuri: http://tinyurl.com/24manq
  :path: 
  - ActiveRecord
  - Base
  :method: delete_all
  :description: |+
    
        delete_all(conditions = nil)
    Deletes the records matching conditions without instantiating the
    records first, and hence not calling the destroy method and invoking callbacks. This is
    a single SQL query, much more efficient than destroy_all.
    
    Options
    
    conditions Conditions are specified the same way as with find method.
    
    Example
    
      Post.delete_all "person_id = 5 AND (category = 'Something' OR category = 'Else')"
    
    
    This deletes the affected posts all at once with a single DELETE query. If
    you need to destroy dependent associations
    or call your before_ or after_destroy callbacks, use the destroy_all method instead.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/base.rb, line 712
    712:       def delete_all(conditions = nil)
    713:         sql = "DELETE FROM #{quoted_table_name} "
    714:         add_conditions!(sql, conditions, scope(:find))
    715:         connection.delete(sql, "#{name} Delete all")
    716:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001385
- :tinyuri: http://tinyurl.com/42jwz5
  :path: 
  - Fixtures
  :method: delete_existing_fixtures
  :description: |+
    
        delete_existing_fixtures()
    
    
         # File vendor/rails/activerecord/lib/active_record/fixtures.rb, line 552
    552:   def delete_existing_fixtures
    553:     @connection.delete "DELETE FROM #{@connection.quote_table_name(table_name)}", 'Fixture Delete'
    554:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Fixtures.html#M000159
- :tinyuri: http://tinyurl.com/4d743h
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - DatabaseStatements
  :method: delete_sql
  :description: |+
    
        delete_sql(sql, name = nil)
    Executes the delete statement
    and returns the number of rows affected.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 166
    166:         def delete_sql(sql, name = nil)
    167:           update_sql(sql, name)
    168:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#M001196
- :tinyuri: http://tinyurl.com/3owrwq
  :path: 
  - ActionController
  - Integration
  - Session
  :method: delete_via_redirect
  :description: |+
    
        delete_via_redirect(path, parameters = nil, headers = nil)
    Performs a DELETE request, following any subsequent redirect. See request_via_redirect() for more
    information.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/integration.rb, line 154
    154:       def delete_via_redirect(path, parameters = nil, headers = nil)
    155:         request_via_redirect(:delete, path, parameters, headers)
    156:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Integration/Session.html#M000243
- :tinyuri: http://tinyurl.com/4k9z4p
  :path: 
  - ActionMailer
  - Base
  :method: deliver
  :description: |+
    
        deliver(mail)
    Deliver the given mail object directly. This can be used to deliver a preconstructed mail object, like:
    
    
      email = MyMailer.create_some_mail(parameters)
      email.set_some_obscure_header "frobnicate"
      MyMailer.deliver(email)
    
    
    
         # File vendor/rails/actionmailer/lib/action_mailer/base.rb, line 382
    382:       def deliver(mail)
    383:         new.deliver!(mail)
    384:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionMailer/Base.html#M000880
- :tinyuri: http://tinyurl.com/3g526g
  :path: 
  - ActionMailer
  - Base
  :method: deliver!
  :description: |+
    
        deliver!(mail = @mail)
    Delivers a TMail::Mail object. By default, it delivers the cached mail
    object (from the create! method). If no cached mail object exists, and no
    alternate has been given as the parameter, this will fail.
    
    
    
         # File vendor/rails/actionmailer/lib/action_mailer/base.rb, line 464
    464:     def deliver!(mail = @mail)
    465:       raise "no mail object available for delivery!" unless mail
    466:       logger.info "Sent mail:\n #{mail.encoded}" unless logger.nil?
    467: 
    468:       begin
    469:         __send__("perform_delivery_#{delivery_method}", mail) if perform_deliveries
    470:       rescue Exception => e  # Net::SMTP errors or sendmail pipe errors
    471:         raise e if raise_delivery_errors
    472:       end
    473: 
    474:       return mail
    475:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionMailer/Base.html#M000882
- :tinyuri: http://tinyurl.com/4pjkdv
  :path: 
  - Inflector
  :method: demodulize
  :description: |+
    
        demodulize(class_name_in_module)
    Removes the module part from the expression in the string
    
    
    Examples
    
    
      "ActiveRecord::CoreExtensions::String::Inflections".demodulize #=> "Inflections"
      "Inflections".demodulize #=> "Inflections"
    
    
    
         # File vendor/rails/activesupport/lib/active_support/inflector.rb, line 206
    206:   def demodulize(class_name_in_module)
    207:     class_name_in_module.to_s.gsub(/^.*::/, '')
    208:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Inflector.html#M001624
- :tinyuri: http://tinyurl.com/4ewfsj
  :path: 
  - ActiveSupport
  - CoreExtensions
  - String
  - Inflections
  :method: demodulize
  :description: |+
    
        demodulize()
    Removes the module part from the expression in the string
    
    
    Examples
    
    
      "ActiveRecord::CoreExtensions::String::Inflections".demodulize #=> "Inflections"
      "Inflections".demodulize #=> "Inflections"
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/string/inflections.rb, line 92
    92:         def demodulize
    93:           Inflector.demodulize(self)
    94:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/String/Inflections.html#M000748
- :tinyuri: http://tinyurl.com/4t4av2
  :path: 
  - Rails
  - Generator
  - Commands
  - List
  :method: dependency
  :description: |+
    
        dependency(generator_name, args, options = {})
    
    
         # File vendor/rails/railties/lib/rails_generator/commands.rb, line 515
    515:         def dependency(generator_name, args, options = {})
    516:           logger.dependency "#{generator_name}(#{args.join(', ')}, #{options.inspect})"
    517:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Commands/List.html#M001509
- :tinyuri: http://tinyurl.com/536owa
  :path: 
  - Rails
  - Generator
  - Commands
  - Base
  :method: dependency
  :description: |+
    
        dependency(generator_name, args, runtime_options = {})
    
    
        # File vendor/rails/railties/lib/rails_generator/commands.rb, line 45
    45:         def dependency(generator_name, args, runtime_options = {})
    46:           logger.dependency(generator_name) do
    47:             self.class.new(instance(generator_name, args, full_options(runtime_options))).invoke!
    48:           end
    49:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Commands/Base.html#M001499
- :tinyuri: http://tinyurl.com/3mbabn
  :path: 
  - ActiveRecord
  - Base
  :method: descends_from_active_record?
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001409
- :tinyuri: http://tinyurl.com/4e39wz
  :path: 
  - Rails
  - Generator
  - Base
  :method: destination_path
  :description: 
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Base.html#M001566
- :tinyuri: http://tinyurl.com/52aj39
  :path: 
  - ActiveResource
  - Base
  :method: destroy
  :description: |+
    
        destroy()
    Deletes the resource from the remote service.
    
    Examples
    
      my_id = 3
      my_person = Person.find(my_id)
      my_person.destroy
      Person.find(my_id)
      # => 404 (Resource Not Found)
    
      new_person = Person.create(:name => 'James')
      new_id = new_person.id
      # => 7
      new_person.destroy
      Person.find(new_id)
      # => 404 (Resource Not Found)
    
    
    
         # File vendor/rails/activeresource/lib/active_resource/base.rb, line 655
    655:     def destroy
    656:       connection.delete(element_path, self.class.headers)
    657:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Base.html#M000849
- :tinyuri: http://tinyurl.com/4cav7g
  :path: 
  - ActiveRecord
  - Base
  :method: destroy
  :description: |+
    
        destroy(id)
    Destroy an object (or multiple objects) that has the given id, the object is instantiated first,
    therefore all callbacks and filters are fired off before the object is
    deleted. This method is less efficient than ActiveRecord#delete but allows
    cleanup methods and other actions to be run.
    
    
    This essentially finds the object (or multiple objects) with the given id, creates a new object from the attributes, and then calls destroy on it.
    
    Options
    
    id Can be either an Integer or an
    Array of Integers
    
    Examples
    
      # Destroy a single object
      Todo.destroy(1)
    
      # Destroy multiple objects
      todos = [1,2,3]
      Todo.destroy(todos)
    
    
    
         # File vendor/rails/activerecord/lib/active_record/base.rb, line 645
    645:       def destroy(id)
    646:         id.is_a?(Array) ? id.each { |id| destroy(id) } : find(id).destroy
    647:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001382
- :tinyuri: http://tinyurl.com/4qfq9w
  :path: 
  - ActiveRecord
  - Base
  :method: destroy
  :description: "\n  \n    destroy()\n  \n  \n  \n\
    Deletes the record in the database and freezes this instance to reflect\n\
    1983:       def destroy\n\
    1984:         unless new_record?\n\
    1985:           connection.delete \"DELETE FROM \\#{self.class.quoted_table_name}\\nWHERE \\#{connection.quote_column_name(self.class.primary_key)} = \\#{quoted_id}\\n\", \"#{self.class.name} Destroy\"\n\
    1986:         end\n\
    1987: \n\
    1988:         freeze\n\
    1989:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001432
- :tinyuri: http://tinyurl.com/4jdc8o
  :path: 
  - ActiveRecord
  - Base
  :method: destroy_all
  :description: |+
    
        destroy_all(conditions = nil)
    Destroys the records matching conditions by instantiating each
    record and calling the destroy method. This
    means at least 2*N database queries to destroy N records, so avoid destroy_all if you are deleting many records.
    If you want to simply delete records
    without worrying about dependent associations or callbacks, use the much
    faster delete_all method instead.
    
    Options
    
    conditions Conditions are specified the same way as with find method.
    
    Example
    
      Person.destroy_all "last_login < '2004-04-04'"
    
    
    This loads and destroys each person one by one, including its dependent
    associations and before_ and after_destroy callbacks.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/base.rb, line 694
    694:       def destroy_all(conditions = nil)
    695:         find(:all, :conditions => conditions).each { |object| object.destroy }
    696:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001384
- :tinyuri: http://tinyurl.com/5xz7b7
  :path: 
  - ActionController
  - TestCase
  :method: determine_default_controller_class
  :description: |+
    
        determine_default_controller_class(name)
    
    
        # File vendor/rails/actionpack/lib/action_controller/test_case.rb, line 32
    32:       def determine_default_controller_class(name)
    33:         name.sub(/Test$/, '').constantize
    34:       rescue NameError
    35:         raise NonInferrableControllerError.new(name)
    36:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/TestCase.html#M000375
- :tinyuri: http://tinyurl.com/3kzvjl
  :path: 
  - Commands
  - Install
  :method: determine_install_method
  :description: 
  :uri: http://api.rubyonrails.org/classes/Commands/Install.html#M000492
- :tinyuri: http://tinyurl.com/4fslok
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Hash
  - Diff
  :method: diff
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Hash/Diff.html#M000626
- :tinyuri: http://tinyurl.com/4uxgr3
  :path: 
  - Rails
  - Generator
  - Commands
  - Update
  :method: directory
  :description: |+
    
        directory(relative_path)
    
    
         # File vendor/rails/railties/lib/rails_generator/commands.rb, line 586
    586:         def directory(relative_path)
    587:           # logger.directory "#{destination_path(relative_path)}/"
    588:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Commands/Update.html#M001521
- :tinyuri: http://tinyurl.com/3rlckt
  :path: 
  - Rails
  - Generator
  - Commands
  - List
  :method: directory
  :description: |+
    
        directory(relative_path)
    
    
         # File vendor/rails/railties/lib/rails_generator/commands.rb, line 535
    535:         def directory(relative_path)
    536:           logger.directory "#{destination_path(relative_path)}/"
    537:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Commands/List.html#M001514
- :tinyuri: http://tinyurl.com/48q7nc
  :path: 
  - Rails
  - Generator
  - Commands
  - Destroy
  :method: directory
  :description: |+
    
        directory(relative_path)
    Remove each directory in the given path
    from right to left. Remove each subdirectory if it exists and is a directory.
    
    
    
         # File vendor/rails/railties/lib/rails_generator/commands.rb, line 450
    450:         def directory(relative_path)
    451:           parts = relative_path.split('/')
    452:           until parts.empty?
    453:             partial = File.join(parts)
    454:             path = destination_path(partial)
    455:             if File.exist?(path)
    456:               if Dir[File.join(path, '*')].empty?
    457:                 logger.rmdir partial
    458:                 unless options[:pretend]
    459:                   if options[:svn]
    460:                     # If the directory has been marked to be added
    461:                     # but has not yet been checked in, revert and delete
    462:                     if options[:svn][relative_path]
    463:                       system("svn revert #{path}")
    464:                       FileUtils.rmdir(path)
    465:                     else
    466:                     # If the directory is not in the status list, it
    467:                     # has no modifications so we can simply remove it
    468:                       system("svn rm #{path}")
    469:                     end
    470:                   else
    471:                     FileUtils.rmdir(path)
    472:                   end
    473:                 end
    474:               else
    475:                 logger.notempty partial
    476:               end
    477:             else
    478:               logger.missing partial
    479:             end
    480:             parts.pop
    481:           end
    482:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Commands/Destroy.html#M001493
- :tinyuri: http://tinyurl.com/542usb
  :path: 
  - Rails
  - Generator
  - Commands
  - Create
  :method: directory
  :description: 
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Commands/Create.html#M001527
- :tinyuri: http://tinyurl.com/4a4xxu
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - QueryCache
  :method: dirties_query_cache
  :description: |+
    
        dirties_query_cache(base, *method_names)
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb, line 15
    15:         def dirties_query_cache(base, *method_names)
    16:           method_names.each do |method_name|
    17:             base.class_eval "def \#{method_name}_with_query_dirty(*args)\nclear_query_cache if @query_cache_enabled\n\#{method_name}_without_query_dirty(*args)\nend\n\nalias_method_chain :\#{method_name}, :query_dirty\n", __FILE__, __LINE__
    18:           end
    19:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/QueryCache.html#M001140
- :tinyuri: http://tinyurl.com/3sw4ve
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - AbstractAdapter
  :method: disable_referential_integrity
  :description: |+
    
        disable_referential_integrity() {|| ...}
    Override to turn off referential integrity while executing +&block+
    
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 76
    76:       def disable_referential_integrity(&block)
    77:         yield
    78:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#M001287
- :tinyuri: http://tinyurl.com/4o8s3d
  :path: 
  - ActionController
  - Flash
  - FlashHash
  :method: discard
  :description: |+
    
        discard(k = nil)
    Marks the entire flash or a single flash entry to be discarded by the end
    of the current action:
    
    
        flash.discard              # discard the entire flash at the end of the current action
        flash.discard(:warning)    # discard only the "warning" entry at the end of the current action
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/flash.rb, line 102
    102:       def discard(k = nil)
    103:         use(k)
    104:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Flash/FlashHash.html#M000289
- :tinyuri: http://tinyurl.com/4h6e25
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - AbstractAdapter
  :method: disconnect!
  :description: |+
    
        disconnect!()
    Close this connection
    
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 93
    93:       def disconnect!
    94:         @active = false
    95:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#M001290
- :tinyuri: http://tinyurl.com/4vb94l
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - PostgreSQLAdapter
  :method: disconnect!
  :description: |+
    
        disconnect!()
    Close the connection.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 266
    266:       def disconnect!
    267:         @connection.close rescue nil
    268:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#M001255
- :tinyuri: http://tinyurl.com/3wgsfz
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - SQLiteAdapter
  :method: disconnect!
  :description: |+
    
        disconnect!()
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/sqlite_adapter.rb, line 87
    87:       def disconnect!
    88:         super
    89:         @connection.close rescue nil
    90:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#M001243
- :tinyuri: http://tinyurl.com/5yswlp
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - MysqlAdapter
  :method: disconnect!
  :description: |+
    
        disconnect!()
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb, line 266
    266:       def disconnect!
    267:         @connection.close rescue nil
    268:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#M001233
- :tinyuri: http://tinyurl.com/3gjllx
  :path: 
  - ActionController
  - Dispatcher
  :method: dispatch
  :description: |+
    
        dispatch(cgi = nil, session_options = CgiRequest::DEFAULT_SESSION_OPTIONS, output = $stdout)
    Backward-compatible class method takes CGI-specific args. Deprecated in
    favor of Dispatcher.new(output,
    request, response).dispatch.
    
    
    
        # File vendor/rails/actionpack/lib/action_controller/dispatcher.rb, line 8
     8:       def dispatch(cgi = nil, session_options = CgiRequest::DEFAULT_SESSION_OPTIONS, output = $stdout)
     9:         new(output).dispatch_cgi(cgi, session_options)
    10:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Dispatcher.html#M000464
- :tinyuri: http://tinyurl.com/4btbpw
  :path: 
  - DispatchServlet
  :method: dispatch
  :description: |+
    
        dispatch(options = {})
    Start the WEBrick server with the given options, mounting the DispatchServlet at /.
    
    
    
        # File vendor/rails/railties/lib/webrick_server.rb, line 50
    50:   def self.dispatch(options = {})
    51:     Socket.do_not_reverse_lookup = true # patch for OS X
    52: 
    53:     params = { :Port        => options[:port].to_i,
    54:                :ServerType  => options[:server_type],
    55:                :BindAddress => options[:ip] }
    56:     params[:MimeTypes] = options[:mime_types] if options[:mime_types]
    57: 
    58:     server = WEBrick::HTTPServer.new(params)
    59:     server.mount('/', DispatchServlet, options)
    60: 
    61:     trap("INT") { server.shutdown }
    62:     server.start
    63:   end
    
    
  :uri: http://api.rubyonrails.org/classes/DispatchServlet.html#M000006
- :tinyuri: http://tinyurl.com/3nm2m8
  :path: 
  - ActionController
  - Dispatcher
  :method: dispatch
  :description: |+
    
        dispatch()
    
    
         # File vendor/rails/actionpack/lib/action_controller/dispatcher.rb, line 113
    113:     def dispatch
    114:       run_callbacks :before
    115:       handle_request
    116:     rescue Exception => exception
    117:       failsafe_rescue exception
    118:     ensure
    119:       run_callbacks :after, :reverse_each
    120:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Dispatcher.html#M000470
- :tinyuri: http://tinyurl.com/44quoo
  :path: 
  - ActionController
  - Dispatcher
  :method: dispatch_cgi
  :description: |+
    
        dispatch_cgi(cgi, session_options)
    
    
         # File vendor/rails/actionpack/lib/action_controller/dispatcher.rb, line 122
    122:     def dispatch_cgi(cgi, session_options)
    123:       if cgi ||= self.class.failsafe_response(@output, '400 Bad Request') { CGI.new }
    124:         @request = CgiRequest.new(cgi, session_options)
    125:         @response = CgiResponse.new(cgi)
    126:         dispatch
    127:       end
    128:     rescue Exception => exception
    129:       failsafe_rescue exception
    130:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Dispatcher.html#M000471
- :tinyuri: http://tinyurl.com/3k4c54
  :path: 
  - RailsFCGIHandler
  :method: dispatcher_error
  :description: |+
    
        dispatcher_error(e, msg = "")
    
    
         # File vendor/rails/railties/lib/fcgi_handler.rb, line 122
    122:     def dispatcher_error(e, msg = "")
    123:       error_message =
    124:         "Dispatcher failed to catch: #{e} (#{e.class})\n" +
    125:         "  #{e.backtrace.join("\n  ")}\n#{msg}"
    126:       dispatcher_log(:error, error_message)
    127:     end
    
    
  :uri: http://api.rubyonrails.org/classes/RailsFCGIHandler.html#M000036
- :tinyuri: http://tinyurl.com/3r6q6c
  :path: 
  - RailsFCGIHandler
  :method: dispatcher_log
  :description: |+
    
        dispatcher_log(level, msg)
    
    
         # File vendor/rails/railties/lib/fcgi_handler.rb, line 114
    114:     def dispatcher_log(level, msg)
    115:       time_str = Time.now.strftime("%d/%b/%Y:%H:%M:%S")
    116:       logger.send(level, "[#{time_str} :: #{$$}] #{msg}")
    117:     rescue Exception => log_error  # Logger errors
    118:       STDERR << "Couldn't write to #{@log_file_path.inspect}: #{msg}\n"
    119:       STDERR << "  #{log_error.class}: #{log_error.message}\n"
    120:     end
    
    
  :uri: http://api.rubyonrails.org/classes/RailsFCGIHandler.html#M000035
- :tinyuri: http://tinyurl.com/4mggbb
  :path: 
  - SourceAnnotationExtractor
  :method: display
  :description: |+
    
        display(results, options={})
    
    
        # File vendor/rails/railties/lib/source_annotation_extractor.rb, line 53
    53:   def display(results, options={})
    54:     results.keys.sort.each do |file|
    55:       puts "#{file}:"
    56:       results[file].each do |note|
    57:         puts "  * #{note.to_s(options)}"
    58:       end
    59:       puts
    60:     end
    61:   end
    
    
  :uri: http://api.rubyonrails.org/classes/SourceAnnotationExtractor.html#M000104
- :tinyuri: http://tinyurl.com/2uj2yt
  :path: 
  - ActionView
  - Helpers
  - DateHelper
  :method: distance_of_time_in_words
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/DateHelper.html#M001006
- :tinyuri: http://tinyurl.com/ypzajk
  :path: 
  - ActionView
  - Helpers
  - DateHelper
  :method: distance_of_time_in_words_to_now
  :description: |
    
        distance_of_time_in_words_to_now(from_time, include_seconds = false)
    Alias for time_ago_in_words
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/DateHelper.html#M001008
- :tinyuri: http://tinyurl.com/4bx5tv
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - SchemaStatements
  :method: distinct
  :description: |+
    
        distinct(columns, order_by)
    SELECT DISTINCT clause for a given set of columns and a given ORDER BY
    clause. Both PostgreSQL and Oracle overrides this for custom DISTINCT
    syntax.
    
    
      distinct("posts.id", "posts.created_at desc")
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 290
    290:       def distinct(columns, order_by)
    291:         "DISTINCT #{columns}"
    292:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#M001162
- :tinyuri: http://tinyurl.com/3tsarf
  :path: 
  - ActionView
  - Helpers
  - RecordTagHelper
  :method: div_for
  :description: |+
    
        div_for(record, *args, &block)
    Produces a wrapper DIV element with id and class parameters that relate to
    the specified ActiveRecord object. Usage example:
    
    
       <% div_for(@person, :class => "foo") do %>
          <%=h @person.name %>
       <% end %>
    
    
    produces:
    
    
       <div id="person_123" class="person foo"> Joe Bloggs </div>
    
    
    
        # File vendor/rails/actionpack/lib/action_view/helpers/record_tag_helper.rb, line 15
    15:       def div_for(record, *args, &block)
    16:         content_tag_for(:div, record, *args, &block)
    17:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/RecordTagHelper.html#M000956
- :tinyuri: http://tinyurl.com/3mptq7
  :path: 
  - ActionController
  - RecordIdentifier
  :method: dom_class
  :description: |+
    
        dom_class(record_or_class, prefix = nil)
    The DOM class convention is to use the singular form of an object or class.
    Examples:
    
    
      dom_class(post)   # => "post"
      dom_class(Person) # => "person"
    
    
    If you need to address multiple instances of the same class in the same
    view, you can prefix the dom_class:
    
    
      dom_class(post, :edit)   # => "edit_post"
      dom_class(Person, :edit) # => "edit_person"
    
    
    
        # File vendor/rails/actionpack/lib/action_controller/record_identifier.rb, line 52
    52:     def dom_class(record_or_class, prefix = nil)
    53:       [ prefix, singular_class_name(record_or_class) ].compact * '_'
    54:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/RecordIdentifier.html#M000277
- :tinyuri: http://tinyurl.com/4z2jv6
  :path: 
  - ActionView
  - Helpers
  - RecordIdentificationHelper
  :method: dom_class
  :description: "\n  \n    dom_class(*args, &block)\n  \n  \n  \n\
    See ActionController::RecordIdentifier.dom_class \xE2\x80\x94 this is just a\n\
    10:       def dom_class(*args, &block)\n\
    11:         ActionController::RecordIdentifier.dom_class(*args, &block)\n\
    12:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/RecordIdentificationHelper.html#M000950
- :tinyuri: http://tinyurl.com/2cskjc
  :path: 
  - ActionController
  - RecordIdentifier
  :method: dom_id
  :description: |+
    
        dom_id(record, prefix = nil)
    The DOM class convention is to use the singular form of an object or class
    with the id following an underscore. If no id is found, prefix with
    "new_" instead. Examples:
    
    
      dom_class(Post.new(:id => 45)) # => "post_45"
      dom_class(Post.new)            # => "new_post"
    
    
    If you need to address multiple instances of the same class in the same
    view, you can prefix the dom_id:
    
    
      dom_class(Post.new(:id => 45), :edit) # => "edit_post_45"
    
    
    
        # File vendor/rails/actionpack/lib/action_controller/record_identifier.rb, line 65
    65:     def dom_id(record, prefix = nil) 
    66:       prefix ||= 'new' unless record.id
    67:       [ prefix, singular_class_name(record), record.id ].compact * '_'
    68:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/RecordIdentifier.html#M000278
- :tinyuri: http://tinyurl.com/3qakab
  :path: 
  - ActionView
  - Helpers
  - RecordIdentificationHelper
  :method: dom_id
  :description: "\n  \n    dom_id(*args, &block)\n  \n  \n  \n\
    See ActionController::RecordIdentifier.dom_id \xE2\x80\x94 this is just a\n\
    15:       def dom_id(*args, &block)\n\
    16:         ActionController::RecordIdentifier.dom_id(*args, &block)\n\
    17:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/RecordIdentificationHelper.html#M000951
- :tinyuri: http://tinyurl.com/47ffcr
  :path: 
  - ActionController
  - AbstractRequest
  :method: domain
  :description: |+
    
        domain(tld_length = 1)
    Returns the domain part of a host, such as rubyonrails.org in
    "www.rubyonrails.org".
    You can specify a different tld_length, such as 2 to catch
    rubyonrails.co.uk in "www.rubyonrails.co.uk".
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/request.rb, line 202
    202:     def domain(tld_length = 1)
    203:       return nil unless named_host?(host)
    204: 
    205:       host.split('.').last(1 + tld_length).join('.')
    206:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/AbstractRequest.html#M000418
- :tinyuri: http://tinyurl.com/4cphmx
  :path: 
  - ActiveSupport
  - Multibyte
  - Handlers
  - UTF8Handler
  :method: downcase
  :description: |+
    
        downcase(str)
    Convert characters in the string to lowercase
    
    
    
         # File vendor/rails/activesupport/lib/active_support/multibyte/handlers/utf8_handler.rb, line 273
    273:       def downcase(str); to_case :lowercase_mapping, str; end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Handlers/UTF8Handler.html#M000528
- :tinyuri: http://tinyurl.com/3oz8z9
  :path: 
  - RecursiveHTTPFetcher
  :method: download
  :description: |+
    
        download(link)
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 897
    897:   def download(link)
    898:     puts "+ #{File.join(@cwd, File.basename(link))}" unless @quiet
    899:     open(link) do |stream|
    900:       File.open(File.join(@cwd, File.basename(link)), "wb") do |file|
    901:         file.write(stream.read)
    902:       end
    903:     end
    904:   end
    
    
  :uri: http://api.rubyonrails.org/classes/RecursiveHTTPFetcher.html#M000013
- :tinyuri: http://tinyurl.com/3lxzy5
  :path: 
  - ActionView
  - Helpers
  - PrototypeHelper
  - JavaScriptGenerator
  - GeneratorMethods
  :method: draggable
  :description: |+
    
        draggable(id, options = {})
    Creates a script.aculo.us draggable element. See ActionView::Helpers::ScriptaculousHelper
    for more information.
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/prototype_helper.rb, line 925
    925:           def draggable(id, options = {})
    926:             record @context.send(:draggable_element_js, id, options)
    927:           end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#M000992
- :tinyuri: http://tinyurl.com/4ga864
  :path: 
  - ActionView
  - Helpers
  - ScriptaculousHelper
  :method: draggable_element
  :description: |+
    
        draggable_element(element_id, options = {})
    Makes the element with the DOM ID specified by element_id
    draggable.
    
    
    Example:
    
    
      <%= draggable_element("my_image", :revert => true)
    
    
    You can change the behaviour with various options, see script.aculo.us for more documentation.
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/scriptaculous_helper.rb, line 164
    164:       def draggable_element(element_id, options = {})
    165:         javascript_tag(draggable_element_js(element_id, options).chop!)
    166:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/ScriptaculousHelper.html#M000954
- :tinyuri: http://tinyurl.com/425d3l
  :path: 
  - ActionView
  - Helpers
  - PrototypeHelper
  - JavaScriptGenerator
  - GeneratorMethods
  :method: drop_receiving
  :description: |+
    
        drop_receiving(id, options = {})
    Creates a script.aculo.us drop receiving element. See ActionView::Helpers::ScriptaculousHelper
    for more information.
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/prototype_helper.rb, line 931
    931:           def drop_receiving(id, options = {})
    932:             record @context.send(:drop_receiving_element_js, id, options)
    933:           end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#M000993
- :tinyuri: http://tinyurl.com/4uf38k
  :path: 
  - ActionView
  - Helpers
  - ScriptaculousHelper
  :method: drop_receiving_element
  :description: |+
    
        drop_receiving_element(element_id, options = {})
    Makes the element with the DOM ID specified by element_id receive
    dropped draggable elements (created by draggable_element). and make an
    AJAX call By default, the action called gets the DOM ID of the element as
    parameter.
    
    
    Example:
    
    
      <%= drop_receiving_element("my_cart", :url =>
        { :controller => "cart", :action => "add" }) %>
    
    
    You can change the behaviour with various options, see script.aculo.us for more documentation.
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/scriptaculous_helper.rb, line 183
    183:       def drop_receiving_element(element_id, options = {})
    184:         javascript_tag(drop_receiving_element_js(element_id, options).chop!)
    185:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/ScriptaculousHelper.html#M000955
- :tinyuri: http://tinyurl.com/3s2w2d
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - SchemaStatements
  :method: drop_table
  :description: |+
    
        drop_table(table_name, options = {})
    Drops a table from the database.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 115
    115:       def drop_table(table_name, options = {})
    116:         execute "DROP TABLE #{quote_table_name(table_name)}"
    117:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#M001152
- :tinyuri: http://tinyurl.com/54hh9s
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - MysqlAdapter
  :method: drop_table
  :description: |+
    
        drop_table(table_name, options = {})
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb, line 391
    391:       def drop_table(table_name, options = {})
    392:         super(table_name, options)
    393:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#M001239
- :tinyuri: http://tinyurl.com/49tna5
  :path: 
  - HashWithIndifferentAccess
  :method: dup
  :description: |+
    
        dup()
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/hash/indifferent_access.rb, line 52
    52:   def dup
    53:     HashWithIndifferentAccess.new(self)
    54:   end
    
    
  :uri: http://api.rubyonrails.org/classes/HashWithIndifferentAccess.html#M000069
- :tinyuri: http://tinyurl.com/3sos7m
  :path: 
  - ActiveResource
  - Base
  :method: dup
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Base.html#M000847
- :tinyuri: http://tinyurl.com/4oyzcl
  :path: 
  - Object
  :method: duplicable?
  :description: |+
    
        duplicable?()
    Can you safely .dup this object? False for nil, false, true, symbols, and
    numbers; true otherwise.
    
    
    
       # File vendor/rails/activesupport/lib/active_support/core_ext/duplicable.rb, line 4
    4:   def duplicable?
    5:     true
    6:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Object.html#M000134
- :tinyuri: http://tinyurl.com/3lme6e
  :path: 
  - Repositories
  :method: each
  :description: |+
    
        each(&block)
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 358
    358:   def self.each(&block)
    359:     self.instance.each(&block)
    360:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Repositories.html#M000090
- :tinyuri: http://tinyurl.com/42r98u
  :path: 
  - ActiveRecord
  - Errors
  :method: each
  :description: |+
    
        each() {|attr, msg| ...}
    Yields each attribute and associated
    message per error added.
    
    
      class Company < ActiveRecord::Base
        validates_presence_of :name, :address, :email
        validates_length_of :name, :in => 5..30
      end
    
      company = Company.create(:address => '123 First St.')
      company.errors.each{|attr,msg| puts "#{attr} - #{msg}" } # =>
        name - is too short (minimum is 5 characters)
        name - can't be blank
        address - can't be blank
    
    
    
         # File vendor/rails/activerecord/lib/active_record/validations.rb, line 138
    138:     def each
    139:       @errors.each_key { |attr| @errors[attr].each { |msg| yield attr, msg } }
    140:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Errors.html#M001353
- :tinyuri: http://tinyurl.com/4v3wdt
  :path: 
  - Repository
  :method: each
  :description: |+
    
        each(&block)
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 386
    386:   def each(&block)
    387:     plugins.each(&block)
    388:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Repository.html#M000163
- :tinyuri: http://tinyurl.com/3w9zoq
  :path: 
  - Repositories
  :method: each
  :description: |+
    
        each(&block)
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 281
    281:   def each(&block)
    282:     @repositories.each(&block)
    283:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Repositories.html#M000079
- :tinyuri: http://tinyurl.com/4rj8tp
  :path: 
  - Rails
  - Generator
  - GemGeneratorSource
  :method: each
  :description: |+
    
        each() {|Spec.new(gem.name.sub(/_generator$/, ''), gem.full_gem_path, label)| ...}
    Yield latest versions of generator gems.
    
    
    
         # File vendor/rails/railties/lib/rails_generator/lookup.rb, line 206
    206:       def each
    207:         Gem::cache.search(/_generator$/).inject({}) { |latest, gem|
    208:           hem = latest[gem.name]
    209:           latest[gem.name] = gem if hem.nil? or gem.version > hem.version
    210:           latest
    211:         }.values.each { |gem|
    212:           yield Spec.new(gem.name.sub(/_generator$/, ''), gem.full_gem_path, label)
    213:         }
    214:       end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/GemGeneratorSource.html#M001570
- :tinyuri: http://tinyurl.com/3p74nz
  :path: 
  - Rails
  - Generator
  - Source
  :method: each
  :description: |+
    
        each()
    The each method must be implemented in
    subclasses. The base implementation raises an error.
    
    
    
         # File vendor/rails/railties/lib/rails_generator/lookup.rb, line 166
    166:       def each
    167:         raise NotImplementedError
    168:       end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Source.html#M001558
- :tinyuri: http://tinyurl.com/46bwqy
  :path: 
  - ActiveResource
  - Errors
  :method: each
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Errors.html#M000806
- :tinyuri: http://tinyurl.com/5ylmvx
  :path: 
  - Rails
  - Generator
  - GemPathSource
  :method: each
  :description: |+
    
        each() {|Spec.new(File.basename(generator).sub(/_generator.rb$/, ''), File.dirname(generator), label)| ...}
    Yield each generator within
    rails_generator subdirectories.
    
    
    
         # File vendor/rails/railties/lib/rails_generator/lookup.rb, line 220
    220:       def each
    221:         generator_full_paths.each do |generator|
    222:           yield Spec.new(File.basename(generator).sub(/_generator.rb$/, ''), File.dirname(generator), label)
    223:         end
    224:       end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/GemPathSource.html#M001552
- :tinyuri: http://tinyurl.com/4bm227
  :path: 
  - Rails
  - Generator
  - PathSource
  :method: each
  :description: |+
    
        each() {|Spec.new(File.basename(dir), dir, label)| ...}
    Yield each eligible subdirectory.
    
    
    
         # File vendor/rails/railties/lib/rails_generator/lookup.rb, line 187
    187:       def each
    188:         Dir["#{path}/[a-z]*"].each do |dir|
    189:           if File.directory?(dir)
    190:             yield Spec.new(File.basename(dir), dir, label)
    191:           end
    192:         end
    193:       end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/PathSource.html#M001542
- :tinyuri: http://tinyurl.com/4pqu4n
  :path: 
  - ActiveSupport
  - CoreExtensions
  - String
  - Iterators
  :method: each_char
  :description: "\n  \n    each_char() {|scanner.scan(char || break)| ...}\n  \n  \n  \n\
    Yields a single-character string for each character in the string. When\n\
    $KCODE = \xE2\x80\x98UTF8\xE2\x80\x99, multi-byte characters are yielded\n\
    10:         def each_char\n\
    11:           scanner, char = StringScanner.new(self), /./mu\n\
    12:           loop { yield(scanner.scan(char) || break) }\n\
    13:         end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/String/Iterators.html#M000759
- :tinyuri: http://tinyurl.com/4zog3f
  :path: 
  - ActiveResource
  - Errors
  :method: each_full
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Errors.html#M000807
- :tinyuri: http://tinyurl.com/3ju2ec
  :path: 
  - ActiveRecord
  - Errors
  :method: each_full
  :description: "\n  \n    each_full() {|msg| ...}\n  \n  \n  \n\
    Yields each full error message added. So\n\
    Person.errors.add(\"first_name\",\n\
    \"can\xE2\x80\x98t be empty\") will be returned through iteration as\n\
    155:     def each_full\n\
    156:       full_messages.each { |msg| yield msg }\n\
    157:     end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Errors.html#M001354
- :tinyuri: http://tinyurl.com/4f6pjb
  :path: 
  - ActiveResource
  - Base
  :method: element_path
  :description: |+
    
        element_path(options = nil)
    
    
         # File vendor/rails/activeresource/lib/active_resource/base.rb, line 821
    821:       def element_path(options = nil)
    822:         self.class.element_path(id, options || prefix_options)
    823:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Base.html#M000860
- :tinyuri: http://tinyurl.com/4tbklr
  :path: 
  - ActiveResource
  - Base
  :method: element_path
  :description: "\n  \n    element_path(id, prefix_options = {}, query_options = nil)\n  \n  \n  \n\
    Gets the element path for the given ID in id. If the query_options\n\
    parameter is omitted, Rails will split from the\n\
    prefix options.\n\n\
    Options\n\n\
    prefix_options:A hash to add a prefix to the request for nested URL\xE2\x80\x98s\n\
    (e.g., :account_id => 19 would yield a URL like\n\
    /accounts/19/purchases.xml).\n\n\n\
    query_options:A hash to add items to the query string for\n\
    the request.\n\n\n\n\
    276:       def element_path(id, prefix_options = {}, query_options = nil)\n\
    277:         prefix_options, query_options = split_options(prefix_options) if query_options.nil?\n\
    278:         \"#{prefix(prefix_options)}#{collection_name}/#{id}.#{format.extension}#{query_string(query_options)}\"\n\
    279:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Base.html#M000833
- :tinyuri: http://tinyurl.com/3qwgfk
  :path: 
  - ActiveRecord
  - Errors
  :method: empty?
  :description: |+
    
        empty?()
    Returns true if no errors have been added.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/validations.rb, line 187
    187:     def empty?
    188:       @errors.empty?
    189:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Errors.html#M001356
- :tinyuri: http://tinyurl.com/4m96kj
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - SQLiteAdapter
  :method: empty_insert_statement
  :description: |+
    
        empty_insert_statement(table_name)
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/sqlite_adapter.rb, line 251
    251:       def empty_insert_statement(table_name)
    252:         "INSERT INTO #{table_name} VALUES(NULL)"
    253:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#M001246
- :tinyuri: http://tinyurl.com/484bz3
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - DatabaseStatements
  :method: empty_insert_statement
  :description: |+
    
        empty_insert_statement(table_name)
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 143
    143:       def empty_insert_statement(table_name)
    144:         "INSERT INTO #{quote_table_name(table_name)} VALUES(DEFAULT)"
    145:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#M001192
- :tinyuri: http://tinyurl.com/3tly3n
  :path: 
  - Kernel
  :method: enable_warnings
  :description: |+
    
        enable_warnings() {|| ...}
    Sets $VERBOSE to true for the duration of the block and back to its
    original value afterwards.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/kernel/reporting.rb, line 17
    17:   def enable_warnings
    18:     old_verbose, $VERBOSE = $VERBOSE, true
    19:     yield
    20:   ensure
    21:     $VERBOSE = old_verbose
    22:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Kernel.html#M001640
- :tinyuri: http://tinyurl.com/3mzk2f
  :path: 
  - ActiveResource
  - Formats
  - XmlFormat
  :method: encode
  :description: |+
    
        encode(hash)
    
    
        # File vendor/rails/activeresource/lib/active_resource/formats/xml_format.rb, line 14
    14:       def encode(hash)
    15:         hash.to_xml
    16:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Formats/XmlFormat.html#M000791
- :tinyuri: http://tinyurl.com/43nf4v
  :path: 
  - ActiveSupport
  - JSON
  :method: encode
  :description: |+
    
        encode(value, options = {})
    Converts a Ruby object into a JSON string.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/json/encoding.rb, line 20
    20:       def encode(value, options = {})
    21:         raise_on_circular_reference(value) do
    22:           value.send(:to_json, options)
    23:         end
    24:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/JSON.html#M000558
- :tinyuri: http://tinyurl.com/3jxtzb
  :path: 
  - ActiveResource
  - Formats
  - JsonFormat
  :method: encode
  :description: |+
    
        encode(hash)
    
    
        # File vendor/rails/activeresource/lib/active_resource/formats/json_format.rb, line 14
    14:       def encode(hash)
    15:         hash.to_json
    16:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Formats/JsonFormat.html#M000795
- :tinyuri: http://tinyurl.com/4x5okr
  :path: 
  - ActionController
  - HttpAuthentication
  - Basic
  :method: encode_credentials
  :description: |+
    
        encode_credentials(user_name, password)
    
    
         # File vendor/rails/actionpack/lib/action_controller/http_authentication.rb, line 116
    116:       def encode_credentials(user_name, password)
    117:         "Basic #{Base64.encode64("#{user_name}:#{password}")}"
    118:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/HttpAuthentication/Basic.html#M000211
- :tinyuri: http://tinyurl.com/4sfepq
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Date
  - Calculations
  :method: end_of_day
  :description: |+
    
        end_of_day()
    Converts Date to a Time (or DateTime if necessary) with the time portion
    set to the end of the day (23:59:59)
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/date/calculations.rb, line 50
    50:         def end_of_day
    51:           to_time.end_of_day
    52:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Date/Calculations.html#M000687
- :tinyuri: http://tinyurl.com/3q3ajj
  :path: 
  - ActiveSupport
  - CoreExtensions
  - DateTime
  - Calculations
  :method: end_of_day
  :description: |+
    
        end_of_day()
    Returns a new DateTime representing the end of the day (23:59:59)
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 71
    71:         def end_of_day
    72:           change(:hour => 23, :min => 59, :sec => 59)
    73:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/DateTime/Calculations.html#M000732
- :tinyuri: http://tinyurl.com/5o9xjn
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Calculations
  :method: end_of_day
  :description: |+
    
        end_of_day()
    Returns a new Time representing the end of the day (23:59:59)
    
    
    
         # File vendor/rails/activesupport/lib/active_support/core_ext/time/calculations.rb, line 165
    165:         def end_of_day
    166:           change(:hour => 23, :min => 59, :sec => 59)
    167:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Calculations.html#M000596
- :tinyuri: http://tinyurl.com/3h8hq9
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Date
  - Calculations
  :method: end_of_month
  :description: |+
    
        end_of_month()
    Returns a new Date/DateTime representing the end of the month (last day of
    the month; DateTime objects will have time set to 0:00)
    
    
      This method is also aliased as
      at_end_of_month
    
    
    
         # File vendor/rails/activesupport/lib/active_support/core_ext/date/calculations.rb, line 158
    158:         def end_of_month
    159:           last_day = ::Time.days_in_month( self.month, self.year )
    160:           self.acts_like?(:time) ? change(:day => last_day, :hour => 23, :min => 59, :sec => 59) : change(:day => last_day)
    161:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Date/Calculations.html#M000704
- :tinyuri: http://tinyurl.com/4cz7v8
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Calculations
  :method: end_of_month
  :description: |+
    
        end_of_month()
    Returns a new Time representing the end of the month (last day of the
    month, 0:00)
    
    
      This method is also aliased as
      at_end_of_month
    
    
    
         # File vendor/rails/activesupport/lib/active_support/core_ext/time/calculations.rb, line 177
    177:         def end_of_month
    178:           #self - ((self.mday-1).days + self.seconds_since_midnight)
    179:           last_day = ::Time.days_in_month( self.month, self.year )
    180:           change(:day => last_day, :hour => 23, :min => 59, :sec => 59, :usec => 0)
    181:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Calculations.html#M000599
- :tinyuri: http://tinyurl.com/4qn3xo
  :path: 
  - ActiveSupport
  - CoreExtensions
  - String
  - StartsEndsWith
  :method: ends_with?
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/String/StartsEndsWith.html#M000762
- :tinyuri: http://tinyurl.com/4jklwg
  :path: 
  - ActionView
  - Helpers
  - AtomFeedHelper
  - AtomFeedBuilder
  :method: entry
  :description: |+
    
        entry(record, options = {}) {|@xml| ...}
    Creates an entry tag for a
    specific record and prefills the id using class and id.
    
    
    Options:
    
    
    :updated: Time of
    update. Defaults to the created_at attribute on the record if one such
    exists.
    
    
    :published: Time first published. Defaults to the updated_at
    attribute on the record if one such exists.
    
    
    :url: The URL for this entry. Defaults to the
    polymorphic_url for the record.
    
    
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/atom_feed_helper.rb, line 86
     86:         def entry(record, options = {})
     87:           @xml.entry do 
     88:             @xml.id("tag:#{@view.request.host_with_port}:#{record.class}#{record.id}")
     89: 
     90:             if options[:published] || (record.respond_to?(:created_at) && record.created_at)
     91:               @xml.published((options[:published] || record.created_at).xmlschema)
     92:             end
     93: 
     94:             if options[:updated] || (record.respond_to?(:updated_at) && record.updated_at)
     95:               @xml.updated((options[:updated] || record.updated_at).xmlschema)
     96:             end
     97: 
     98:             @xml.link(:rel => 'alternate', :type => 'text/html', :href => options[:url] || @view.polymorphic_url(record))
     99: 
    100:             yield @xml
    101:           end
    102:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/AtomFeedHelper/AtomFeedBuilder.html#M000934
- :tinyuri: http://tinyurl.com/5xphyw
  :path: 
  - SourceAnnotationExtractor
  :method: enumerate
  :description: |+
    
        enumerate(tag, options={})
    
    
        # File vendor/rails/railties/lib/source_annotation_extractor.rb, line 10
    10:   def self.enumerate(tag, options={})
    11:     extractor = new(tag)
    12:     extractor.display(extractor.find, options)
    13:   end
    
    
  :uri: http://api.rubyonrails.org/classes/SourceAnnotationExtractor.html#M000099
- :tinyuri: http://tinyurl.com/3kq8ad
  :path: 
  - Rails
  - Configuration
  :method: environment
  :description: |+
    
        environment()
    Return the currently selected environment. By default, it returns
    the value of the RAILS_ENV constant.
    
    
    
         # File vendor/rails/railties/lib/initializer.rb, line 518
    518:     def environment
    519:       ::RAILS_ENV
    520:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Configuration.html#M001610
- :tinyuri: http://tinyurl.com/4g2vfc
  :path: 
  - Commands
  - Plugin
  :method: environment=
  :description: |+
    
        environment=(value)
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 410
    410:     def environment=(value)
    411:       @environment = value
    412:       RailsEnvironment.default = value
    413:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Commands/Plugin.html#M000504
- :tinyuri: http://tinyurl.com/4yv3ct
  :path: 
  - Rails
  - Configuration
  :method: environment_path
  :description: "\n  \n    environment_path()\n  \n  \n  \n\
    The path to the current environment\xE2\x80\x98s file\n\
    (development.rb, etc.). By default the file is at\n\
    512:     def environment_path\n\
    513:       \"#{root_path}/config/environments/#{environment}.rb\"\n\
    514:     end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/Rails/Configuration.html#M001609
- :tinyuri: http://tinyurl.com/3rsmbl
  :path: 
  - ActiveRecord
  - Base
  :method: eql?
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001456
- :tinyuri: http://tinyurl.com/4n5cgk
  :path: 
  - ActiveResource
  - Request
  :method: eql?
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Request.html#M000864
- :tinyuri: http://tinyurl.com/49xhe4
  :path: 
  - ActiveResource
  - Base
  :method: eql?
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Base.html#M000845
- :tinyuri: http://tinyurl.com/3fyjjn
  :path: 
  - Rails
  - Generator
  - Manifest
  :method: erase
  :description: |+
    
        erase()
    Erase recorded actions.
    
    
    
        # File vendor/rails/railties/lib/rails_generator/manifest.rb, line 40
    40:       def erase
    41:         @actions = []
    42:       end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Manifest.html#M001551
- :tinyuri: http://tinyurl.com/4ab9om
  :path: 
  - ActionView
  - Helpers
  - ActiveRecordHelper
  :method: error_message_on
  :description: "\n  \n    error_message_on(object, method, prepend_text = \"\", append_text = \"\", css_class = \"formError\")\n  \n  \n  \n\
    Returns a string containing the error message attached to the\n\
    method on the object if one exists. This error message is\n\
    wrapped in a DIV tag, which can be extended to include a\n\
    prepend_text and/or append_text (to properly explain the\n\
    error), and a css_class to style it accordingly. object\n\
    should either be the name of an instance variable or the actual object. As\n\
    an example, let\xE2\x80\x98s say you have a model post that has an\n\
    91:       def error_message_on(object, method, prepend_text = \"\", append_text = \"\", css_class = \"formError\")\n\
    92:         if (obj = (object.respond_to?(:errors) ? object : instance_variable_get(\"@#{object}\"))) &&\n\
    93:           (errors = obj.errors.on(method))\n\
    94:           content_tag(\"div\", \"#{prepend_text}#{errors.is_a?(Array) ? errors.first : errors}#{append_text}\", :class => css_class)\n\
    95:         else \n\
    96:           ''\n\
    97:         end\n\
    98:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/ActiveRecordHelper.html#M001004
- :tinyuri: http://tinyurl.com/29kkh9
  :path: 
  - ActionView
  - Helpers
  - ActiveRecordHelper
  :method: error_messages_for
  :description: |+
    
        error_messages_for(*params)
    Returns a string with a DIV containing all of the error messages
    for the objects located as instance variables by the names given. If more
    than one object is specified, the errors for the objects are displayed in
    the order that the object names are provided.
    
    
    This DIV can be tailored by the following options:
    
    
    header_tag - Used for the header of the error div (default: h2)
    
    
    id - The id of the error div (default: errorExplanation)
    
    
    class - The class of the error div (default: errorExplanation)
    
    
    object - The object (or array of objects) for which to display
    errors, if you need to escape the instance variable convention
    
    
    object_name - The object name to use in the header, or any text
    that you prefer. If object_name is not set, the name of the first
    object will be used.
    
    
    header_message - The message in the header of the error div. Pass
    nil or an empty string to avoid the header message altogether.
    (default: X errors prohibited this object from being saved)
    
    
    message - The explanation message after the header message and
    before the error list. Pass nil or an empty string to avoid the
    explanation message altogether. (default: There were problems with the
    following fields:)
    
    
    
    
    To specify the display for one object, you simply provide its name as a
    parameter. For example, for the User model:
    
    
      error_messages_for 'user'
    
    
    To specify more than one object, you simply list them; optionally, you can
    add an extra object_name parameter, which will be the name used in
    the header message.
    
    
      error_messages_for 'user_common', 'user', :object_name => 'user'
    
    
    If the objects cannot be located as instance variables, you can add an
    extra object paremeter which gives the actual object (or array of
    objects to use)
    
    
      error_messages_for 'user', :object => @question.user
    
    
    NOTE: This is a pre-packaged presentation of the errors with embedded
    strings and a certain HTML structure. If what you need is significantly
    different from the default presentation, it makes plenty of sense to access
    the object.errors instance yourself and set it up. View the source of this
    method to see how easy it is.
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/active_record_helper.rb, line 131
    131:       def error_messages_for(*params)
    132:         options = params.extract_options!.symbolize_keys
    133:         if object = options.delete(:object)
    134:           objects = [object].flatten
    135:         else
    136:           objects = params.collect {|object_name| instance_variable_get("@#{object_name}") }.compact
    137:         end
    138:         count   = objects.inject(0) {|sum, object| sum + object.errors.count }
    139:         unless count.zero?
    140:           html = {}
    141:           [:id, :class].each do |key|
    142:             if options.include?(key)
    143:               value = options[key]
    144:               html[key] = value unless value.blank?
    145:             else
    146:               html[key] = 'errorExplanation'
    147:             end
    148:           end
    149:           options[:object_name] ||= params.first
    150:           options[:header_message] = "#{pluralize(count, 'error')} prohibited this #{options[:object_name].to_s.gsub('_', ' ')} from being saved" unless options.include?(:header_message)
    151:           options[:message] ||= 'There were problems with the following fields:' unless options.include?(:message)
    152:           error_messages = objects.map {|object| object.errors.full_messages.map {|msg| content_tag(:li, msg) } }
    153: 
    154:           contents = ''
    155:           contents << content_tag(options[:header_tag] || :h2, options[:header_message]) unless options[:header_message].blank?
    156:           contents << content_tag(:p, options[:message]) unless options[:message].blank?
    157:           contents << content_tag(:ul, error_messages)
    158: 
    159:           content_tag(:div, contents, html)
    160:         else
    161:           ''
    162:         end
    163:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/ActiveRecordHelper.html#M001005
- :tinyuri: http://tinyurl.com/4og4r5
  :path: 
  - ActiveRecord
  - Validations
  :method: errors
  :description: |+
    
        errors()
    Returns the Errors object that holds all
    information about attribute error messages.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/validations.rb, line 977
    977:     def errors
    978:       @errors ||= Errors.new(self)
    979:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Validations.html#M001315
- :tinyuri: http://tinyurl.com/3m4xkv
  :path: 
  - ActiveResource
  - Validations
  :method: errors
  :description: |+
    
        errors()
    Returns the Errors object that holds all
    information about attribute error messages.
    
    
    
         # File vendor/rails/activeresource/lib/active_resource/validations.rb, line 284
    284:     def errors
    285:       @errors ||= Errors.new(self)
    286:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Validations.html#M000799
- :tinyuri: http://tinyurl.com/2l2mrp
  :path: 
  - ActionView
  - Helpers
  - JavaScriptHelper
  :method: escape_javascript
  :description: |+
    
        escape_javascript(javascript)
    Escape carrier returns and single and double quotes for JavaScript
    segments.
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/javascript_helper.rb, line 151
    151:       def escape_javascript(javascript)
    152:         (javascript || '').gsub('\\','\0\0').gsub('</','<\/').gsub(/\r\n|\n|\r/, "\\n").gsub(/["']/) { |m| "\\#{m}" }
    153:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/JavaScriptHelper.html#M001064
- :tinyuri: http://tinyurl.com/438sne
  :path: 
  - ActionView
  - Helpers
  - TagHelper
  :method: escape_once
  :description: |+
    
        escape_once(html)
    Returns an escaped version of html without affecting existing
    escaped entities.
    
    Examples
    
      escape_once("1 > 2 &amp; 3")
      # => "1 &lt; 2 &amp; 3"
    
      escape_once("&lt;&lt; Accept & Checkout")
      # => "&lt;&lt; Accept &amp; Checkout"
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/tag_helper.rb, line 101
    101:       def escape_once(html)
    102:         html.to_s.gsub(/[\"><]|&(?!([a-zA-Z]+|(#\d+));)/) { |special| ERB::Util::HTML_ESCAPE[special] }
    103:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/TagHelper.html#M001035
- :tinyuri: http://tinyurl.com/3zja3r
  :path: 
  - ActiveRecord
  - Base
  :method: establish_connection
  :description: |+
    
        establish_connection(spec = nil)
    Establishes the connection to the database.
    Accepts a hash as input where the :adapter
    key must be specified with the name of a database adapter (in lower-case)
    example for regular databases (MySQL, Postgresql, etc):
    
    
      ActiveRecord::Base.establish_connection(
        :adapter  => "mysql",
        :host     => "localhost",
        :username => "myuser",
        :password => "mypass",
        :database => "somedatabase"
      )
    
    
    Example for SQLite database:
    
    
      ActiveRecord::Base.establish_connection(
        :adapter => "sqlite",
        :database  => "path/to/dbfile"
      )
    
    
    Also accepts keys as strings (for parsing from yaml for example):
    
    
      ActiveRecord::Base.establish_connection(
        "adapter" => "sqlite",
        "database"  => "path/to/dbfile"
      )
    
    
    The exceptions AdapterNotSpecified,
    AdapterNotFound and ArgumentError may be
    returned on an error.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/connection_specification.rb, line 204
    204:     def self.establish_connection(spec = nil)
    205:       case spec
    206:         when nil
    207:           raise AdapterNotSpecified unless defined? RAILS_ENV
    208:           establish_connection(RAILS_ENV)
    209:         when ConnectionSpecification
    210:           clear_active_connection_name
    211:           @active_connection_name = name
    212:           @@defined_connections[name] = spec
    213:         when Symbol, String
    214:           if configuration = configurations[spec.to_s]
    215:             establish_connection(configuration)
    216:           else
    217:             raise AdapterNotSpecified, "#{spec} database is not configured"
    218:           end
    219:         else
    220:           spec = spec.symbolize_keys
    221:           unless spec.key?(:adapter) then raise AdapterNotSpecified, "database configuration does not specify adapter" end
    222: 
    223:           begin
    224:             require 'rubygems'
    225:             gem "activerecord-#{spec[:adapter]}-adapter"
    226:             require "active_record/connection_adapters/#{spec[:adapter]}_adapter"
    227:           rescue LoadError
    228:             begin
    229:               require "active_record/connection_adapters/#{spec[:adapter]}_adapter"
    230:             rescue LoadError
    231:               raise "Please install the #{spec[:adapter]} adapter: `gem install activerecord-#{spec[:adapter]}-adapter` (#{$!})"
    232:             end
    233:           end
    234: 
    235:           adapter_method = "#{spec[:adapter]}_connection"
    236:           if !respond_to?(adapter_method)
    237:             raise AdapterNotFound, "database configuration specifies nonexistent #{spec[:adapter]} adapter"
    238:           end
    239: 
    240:           remove_connection
    241:           establish_connection(ConnectionSpecification.new(spec, adapter_method))
    242:       end
    243:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001467
- :tinyuri: http://tinyurl.com/4dtx8q
  :path: 
  - ActiveRecord
  - Validations
  - ClassMethods
  :method: evaluate_condition
  :description: |+
    
        evaluate_condition(condition, record)
    Determine from the given condition (whether a block, procedure, method or
    string) whether or not to validate
    the record. See validates_each.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/validations.rb, line 348
    348:       def evaluate_condition(condition, record)
    349:         case condition
    350:           when Symbol; record.send(condition)
    351:           when String; eval(condition, record.send(:binding))
    352:           else
    353:             if condition_block?(condition)
    354:               condition.call(record)
    355:             else
    356:               raise(
    357:                 ActiveRecordError,
    358:                 "Validations need to be either a symbol, string (to be eval'ed), proc/method, or " +
    359:                 "class implementing a static validation method"
    360:               )
    361:             end
    362:           end
    363:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Validations/ClassMethods.html#M001323
- :tinyuri: http://tinyurl.com/3wo56a
  :path: 
  - ActionView
  - Helpers
  - PrototypeHelper
  :method: evaluate_remote_response
  :description: "\n  \n    evaluate_remote_response()\n  \n  \n  \n\
    Returns \xE2\x80\x98eval(request.responseText)\xE2\x80\x99 which is the\n\
    JavaScript function that form_remote_tag can call in\n\
    :complete to evaluate a multiple update return document using\n\
    427:       def evaluate_remote_response\n\
    428:         \"eval(request.responseText)\"\n\
    429:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/PrototypeHelper.html#M000964
- :tinyuri: http://tinyurl.com/4sxsb9
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Integer
  - EvenOdd
  :method: even?
  :description: |+
    
        even?()
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/integer/even_odd.rb, line 14
    14:         def even?
    15:           multiple_of? 2
    16:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Integer/EvenOdd.html#M000565
- :tinyuri: http://tinyurl.com/4kveay
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Numeric
  - Bytes
  :method: exabyte
  :description: |
    
        exabyte()
    Alias for exabytes
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Numeric/Bytes.html#M000671
- :tinyuri: http://tinyurl.com/4c3lgo
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Numeric
  - Bytes
  :method: exabytes
  :description: |+
    
        exabytes()
    
      This method is also aliased as
      exabyte
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/numeric/bytes.rb, line 36
    36:         def exabytes
    37:           self * 1024.petabytes
    38:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Numeric/Bytes.html#M000670
- :tinyuri: http://tinyurl.com/45y7fg
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Hash
  - Except
  :method: except
  :description: |+
    
        except(*keys)
    Returns a new hash without the given keys.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/hash/except.rb, line 12
    12:         def except(*keys)
    13:           rejected = Set.new(respond_to?(:convert_key) ? keys.map { |key| convert_key(key) } : keys)
    14:           reject { |key,| rejected.include?(key) }
    15:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Hash/Except.html#M000623
- :tinyuri: http://tinyurl.com/4yggvc
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Hash
  - Except
  :method: except!
  :description: |+
    
        except!(*keys)
    Replaces the hash without only the given keys.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/hash/except.rb, line 18
    18:         def except!(*keys)
    19:           replace(except(*keys))
    20:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Hash/Except.html#M000624
- :tinyuri: http://tinyurl.com/4mnq23
  :path: 
  - ActionView
  - Helpers
  - TextHelper
  :method: excerpt
  :description: "\n  \n    excerpt(text, phrase, radius = 100, excerpt_string = \"...\")\n  \n  \n  \n\
    Extracts an excerpt from\n\
    text that matches the first instance of phrase. The\n\
    radius expands the excerpt\n\
    on each side of the first occurrence of phrase by the number of\n\
    characters defined in radius (which defaults to 100). If the excerpt radius overflows the beginning\n\
    or end of the text, then the excerpt_string will be\n\
    prepended/appended accordingly. If the phrase isn\xE2\x80\x98t found,\n\
    nil is returned.\n\n\
    101:       def excerpt(text, phrase, radius = 100, excerpt_string = \"...\")\n\
    102:         if text.nil? || phrase.nil? then return end\n\
    103:         phrase = Regexp.escape(phrase)\n\
    104: \n\
    105:         if found_pos = text.chars =~ /(#{phrase})/i\n\
    106:           start_pos = [ found_pos - radius, 0 ].max\n\
    107:           end_pos   = [ found_pos + phrase.chars.length + radius, text.chars.length ].min\n\
    108: \n\
    109:           prefix  = start_pos > 0 ? excerpt_string : \"\"\n\
    110:           postfix = end_pos < text.chars.length ? excerpt_string : \"\"\n\
    111: \n\
    112:           prefix + text.chars[start_pos..end_pos].strip + postfix\n\
    113:         else\n\
    114:           nil\n\
    115:         end\n\
    116:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/TextHelper.html#M001051
- :tinyuri: http://tinyurl.com/48zuwk
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - DatabaseStatements
  :method: execute
  :description: |+
    
        execute(sql, name = nil)
    Executes the SQL statement in the context of this connection.
    
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 38
    38:       def execute(sql, name = nil)
    39:         raise NotImplementedError, "execute is an abstract method"
    40:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#M001178
- :tinyuri: http://tinyurl.com/53sl4j
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - PostgreSQLAdapter
  :method: execute
  :description: |+
    
        execute(sql, name = nil)
    Executes an SQL statement, returning a PGresult object on success or
    raising a PGError exception otherwise.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 406
    406:       def execute(sql, name = nil)
    407:         log(sql, name) do
    408:           if @async
    409:             @connection.async_exec(sql)
    410:           else
    411:             @connection.exec(sql)
    412:           end
    413:         end
    414:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#M001261
- :tinyuri: http://tinyurl.com/5wotu8
  :path: 
  - ActionController
  - Base
  :method: exempt_from_layout
  :description: "\n  \n    exempt_from_layout(*extensions)\n  \n  \n  \n\
    Don\xE2\x80\x98t render layouts for templates\n\
    506:       def exempt_from_layout(*extensions)\n\
    507:         regexps = extensions.collect do |extension|\n\
    508:           extension.is_a?(Regexp) ? extension : /\\.#{Regexp.escape(extension.to_s)}$/\n\
    509:         end\n\
    510:         @@exempt_from_layout.merge regexps\n\
    511:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionController/Base.html#M000442
- :tinyuri: http://tinyurl.com/3fupfo
  :path: 
  - Repositories
  :method: exist?
  :description: 
  :uri: http://api.rubyonrails.org/classes/Repositories.html#M000082
- :tinyuri: http://tinyurl.com/4b7fkn
  :path: 
  - Rails
  - Generator
  - Commands
  - Base
  :method: existing_migrations
  :description: |+
    
        existing_migrations(file_name)
    
    
        # File vendor/rails/railties/lib/rails_generator/commands.rb, line 64
    64:           def existing_migrations(file_name)
    65:             Dir.glob("#{@migration_directory}/[0-9]*_*.rb").grep(/[0-9]+_#{file_name}.rb$/)
    66:           end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Commands/Base.html#M001503
- :tinyuri: http://tinyurl.com/2kc8k5
  :path: 
  - ActiveRecord
  - Base
  :method: exists?
  :description: "\n  \n    exists?(id_or_conditions)\n  \n  \n  \n\
    Checks whether a record exists in the database that matches conditions\n\
    given. These conditions can either be a single integer representing a\n\
    primary key id to be found, or a condition\n\
    to be matched like using ActiveRecord#find.\n\n\n\
    The id_or_conditions parameter can be an Integer or a String if\n\
    you want to search the primary key column of the table for a matching id, or if you\xE2\x80\x98re looking to match\n\
    against a condition you can use an Array or a Hash.\n\n\n\
    Possible gotcha: You can\xE2\x80\x98t pass in a condition as a string e.g.\n\
    \"name = \xE2\x80\x98Jamie\xE2\x80\x99\", this would be sanitized and then\n\
    queried against the primary key column as \"id = \xE2\x80\x98name = \\\xE2\x80\x99Jamie\"\n\n\
    551:       def exists?(id_or_conditions)\n\
    552:         !find(:first, :select => \"#{quoted_table_name}.#{primary_key}\",\n\
    553:               :conditions => expand_id_conditions(id_or_conditions)).nil?\n\
    554:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001378
- :tinyuri: http://tinyurl.com/3u2kz7
  :path: 
  - ActiveResource
  - Base
  :method: exists?
  :description: |+
    
        exists?(id, options = {})
    Asserts the existence of a resource, returning true if the
    resource is found.
    
    Examples
    
      Note.create(:title => 'Hello, world.', :body => 'Nothing more for now...')
      Note.exists?(1)
      # => true
    
      Note.exists(1349)
      # => false
    
    
    
         # File vendor/rails/activeresource/lib/active_resource/base.rb, line 425
    425:       def exists?(id, options = {})
    426:         id && !find_single(id, options).nil?
    427:       rescue ActiveResource::ResourceNotFound
    428:         false
    429:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Base.html#M000838
- :tinyuri: http://tinyurl.com/4pcan6
  :path: 
  - ActiveResource
  - Base
  :method: exists?
  :description: "\n  \n    exists?()\n  \n  \n  \n\
    Evaluates to true if this resource is not +new?+ and is found on the remote service.\n\
    Using this method, you can check for resources that may have been deleted\n\
    between the object\xE2\x80\x98s instantiation and actions on it.\n\n\
    678:     def exists?\n\
    679:       !new? && self.class.exists?(id, :params => prefix_options)\n\
    680:     end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Base.html#M000850
- :tinyuri: http://tinyurl.com/3nx6gw
  :path: 
  - RailsFCGIHandler
  :method: exit_handler
  :description: |+
    
        exit_handler(signal)
    
    
         # File vendor/rails/railties/lib/fcgi_handler.rb, line 159
    159:     def exit_handler(signal)
    160:       dispatcher_log :info, "asked to stop ASAP"
    161:       @when_ready = :exit
    162:     end
    
    
  :uri: http://api.rubyonrails.org/classes/RailsFCGIHandler.html#M000041
- :tinyuri: http://tinyurl.com/4z9tlv
  :path: 
  - RailsFCGIHandler
  :method: exit_now_handler
  :description: |+
    
        exit_now_handler(signal)
    
    
         # File vendor/rails/railties/lib/fcgi_handler.rb, line 154
    154:     def exit_now_handler(signal)
    155:       dispatcher_log :info, "asked to stop immediately"
    156:       exit
    157:     end
    
    
  :uri: http://api.rubyonrails.org/classes/RailsFCGIHandler.html#M000040
- :tinyuri: http://tinyurl.com/445yjf
  :path: 
  - ActionController
  - Caching
  - Actions
  :method: expire_action
  :description: |+
    
        expire_action(options = {})
    
    
         # File vendor/rails/actionpack/lib/action_controller/caching.rb, line 217
    217:       def expire_action(options = {})
    218:         return unless perform_caching
    219:         if options[:action].is_a?(Array)
    220:           options[:action].dup.each do |action|
    221:             expire_fragment(ActionCachePath.path_for(self, options.merge({ :action => action })))
    222:           end
    223:         else
    224:           expire_fragment(ActionCachePath.path_for(self, options))
    225:         end
    226:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Caching/Actions.html#M000265
- :tinyuri: http://tinyurl.com/3jffws
  :path: 
  - ActionController
  - Caching
  - Fragments
  :method: expire_fragment
  :description: |+
    
        expire_fragment(name, options = nil)
    Name can take one of three forms:
    
    
    String: This would normally take the form of a path like
    "pages/45/notes"
    
    
    Hash: Is treated as an implicit call to url_for, like { :controller =>
    "pages", :action => "notes", :id => 45 }
    
    
    Regexp: Will destroy all the matched fragments, example:
    
    
      %r{pages/\d*/notes}
    
    
    Ensure you do not specify start and finish in the regex (^$) because the
    actual filename matched looks like ./cache/filename/path.cache Regexp
    expiration is only supported on caches that can iterate over all keys
    (unlike memcached).
    
    
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/caching.rb, line 419
    419:       def expire_fragment(name, options = nil)
    420:         return unless perform_caching
    421: 
    422:         key = fragment_cache_key(name)
    423: 
    424:         if key.is_a?(Regexp)
    425:           self.class.benchmark "Expired fragments matching: #{key.source}" do
    426:             fragment_cache_store.delete_matched(key, options)
    427:           end
    428:         else
    429:           self.class.benchmark "Expired fragment: #{key}" do
    430:             fragment_cache_store.delete(key, options)
    431:           end
    432:         end
    433:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Caching/Fragments.html#M000263
- :tinyuri: http://tinyurl.com/4ep64r
  :path: 
  - ActionController
  - Caching
  - Pages
  :method: expire_page
  :description: |+
    
        expire_page(options = {})
    Expires the page that was cached with the options as a key.
    Example:
    
    
      expire_page :controller => "lists", :action => "show"
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/caching.rb, line 121
    121:       def expire_page(options = {})
    122:         return unless perform_caching
    123: 
    124:         if options.is_a?(Hash)
    125:           if options[:action].is_a?(Array)
    126:             options[:action].dup.each do |action|
    127:               self.class.expire_page(url_for(options.merge(:only_path => true, :skip_relative_url_root => true, :action => action)))
    128:             end
    129:           else
    130:             self.class.expire_page(url_for(options.merge(:only_path => true, :skip_relative_url_root => true)))
    131:           end
    132:         else
    133:           self.class.expire_page(options)
    134:         end
    135:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Caching/Pages.html#M000253
- :tinyuri: http://tinyurl.com/4xkb2b
  :path: 
  - ActionController
  - Caching
  - Pages
  - ClassMethods
  :method: expire_page
  :description: |+
    
        expire_page(path)
    Expires the page that was cached with the path as a key. Example:
    
    
      expire_page "/lists/show"
    
    
    
        # File vendor/rails/actionpack/lib/action_controller/caching.rb, line 80
    80:         def expire_page(path)
    81:           return unless perform_caching
    82: 
    83:           benchmark "Expired page: #{page_cache_file(path)}" do
    84:             File.delete(page_cache_path(path)) if File.exist?(page_cache_path(path))
    85:           end
    86:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Caching/Pages/ClassMethods.html#M000255
- :tinyuri: http://tinyurl.com/4suy7a
  :path: 
  - ActionController
  - Base
  :method: expires_in
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionController/Base.html#M000457
- :tinyuri: http://tinyurl.com/4lrk62
  :path: 
  - ActionController
  - Base
  :method: expires_now
  :description: |+
    
        expires_now(
    Sets a HTTP 1.1 Cache-Control header of "no-cache" so no caching
    should occur by the browser or intermediate caches (like caching proxy
    servers).
    
    
    
          # File vendor/rails/actionpack/lib/action_controller/base.rb, line 1083
    1083:       def expires_now #:doc:
    1084:         response.headers["Cache-Control"] = "no-cache"
    1085:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Base.html#M000458
- :tinyuri: http://tinyurl.com/52wf8z
  :path: 
  - ActiveRecord
  - Locking
  - Optimistic
  - ClassMethods
  :method: extended
  :description: |+
    
        extended(base)
    
    
         # File vendor/rails/activerecord/lib/active_record/locking/optimistic.rb, line 101
    101:         def self.extended(base)
    102:           class <<base
    103:             alias_method_chain :update_counters, :lock
    104:           end
    105:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#M001108
- :tinyuri: http://tinyurl.com/4r4mf8
  :path: 
  - ActiveResource
  - Formats
  - XmlFormat
  :method: extension
  :description: |+
    
        extension()
    
    
       # File vendor/rails/activeresource/lib/active_resource/formats/xml_format.rb, line 6
    6:       def extension
    7:         "xml"
    8:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Formats/XmlFormat.html#M000789
- :tinyuri: http://tinyurl.com/4k28ex
  :path: 
  - ActiveResource
  - Formats
  - JsonFormat
  :method: extension
  :description: |+
    
        extension()
    
    
       # File vendor/rails/activeresource/lib/active_resource/formats/json_format.rb, line 6
    6:       def extension
    7:         "json"
    8:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Formats/JsonFormat.html#M000793
- :tinyuri: http://tinyurl.com/45udbh
  :path: 
  - RailsEnvironment
  :method: externals
  :description: 
  :uri: http://api.rubyonrails.org/classes/RailsEnvironment.html#M000060
- :tinyuri: http://tinyurl.com/3l7rou
  :path: 
  - RailsEnvironment
  :method: externals=
  :description: |+
    
        externals=(items)
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 132
    132:   def externals=(items)
    133:     unless items.is_a? String
    134:       items = items.map{|name,uri| "#{name.ljust(29)} #{uri.chomp('/')}"}.join("\n")
    135:     end
    136:     Tempfile.open("svn-set-prop") do |file|
    137:       file.write(items)
    138:       file.flush
    139:       system("svn propset -q svn:externals -F \"#{file.path}\" \"#{root}/vendor/plugins\"")
    140:     end
    141:   end
    
    
  :uri: http://api.rubyonrails.org/classes/RailsEnvironment.html#M000061
- :tinyuri: http://tinyurl.com/4ghhtt
  :path: 
  - SourceAnnotationExtractor
  :method: extract_annotations_from
  :description: |+
    
        extract_annotations_from(file, pattern)
    
    
        # File vendor/rails/railties/lib/source_annotation_extractor.rb, line 43
    43:   def extract_annotations_from(file, pattern)
    44:     lineno = 0
    45:     result = File.readlines(file).inject([]) do |list, line|
    46:       lineno += 1
    47:       next list unless line =~ pattern
    48:       list << Annotation.new(lineno, $1, $2)
    49:     end
    50:     result.empty? ? {} : { file => result }
    51:   end
    
    
  :uri: http://api.rubyonrails.org/classes/SourceAnnotationExtractor.html#M000103
- :tinyuri: http://tinyurl.com/4umcwc
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - Column
  :method: extract_default
  :description: |+
    
        extract_default(default)
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 100
    100:       def extract_default(default)
    101:         type_cast(default)
    102:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/Column.html#M001204
- :tinyuri: http://tinyurl.com/4njvv4
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Array
  - ExtractOptions
  :method: extract_options!
  :description: "\n  \n    extract_options!()\n  \n  \n  \n\
    Extract options from a set of arguments. Removes and returns the last\n\
    13:         def extract_options!\n\
    14:           last.is_a?(::Hash) ? pop : {}\n\
    15:         end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Array/ExtractOptions.html#M000628
- :tinyuri: http://tinyurl.com/54orxk
  :path: 
  - Commands
  - Discover
  :method: extract_repository_uri
  :description: |+
    
        extract_repository_uri(uri)
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 704
    704:     def extract_repository_uri(uri)
    705:       uri.match(/(svn|https?):.*\/plugins\//i)[0]
    706:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Commands/Discover.html#M000483
- :tinyuri: http://tinyurl.com/3e639d
  :path: 
  - ActionController
  - Dispatcher
  :method: failsafe_rescue
  :description: |+
    
        failsafe_rescue(exception)
    
    
         # File vendor/rails/actionpack/lib/action_controller/dispatcher.rb, line 185
    185:       def failsafe_rescue(exception)
    186:         self.class.failsafe_response(@output, '500 Internal Server Error', exception) do
    187:           if @controller ||= defined?(::ApplicationController) ? ::ApplicationController : Base
    188:             @controller.process_with_exception(@request, @response, exception).out(@output)
    189:           else
    190:             raise exception
    191:           end
    192:         end
    193:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Dispatcher.html#M000478
- :tinyuri: http://tinyurl.com/49fqec
  :path: 
  - ActionController
  - Dispatcher
  :method: failsafe_response
  :description: |+
    
        failsafe_response(fallback_output, status, originating_exception = nil) {|| ...}
    If the block raises, send status code as a last-ditch response.
    
    
    
        # File vendor/rails/actionpack/lib/action_controller/dispatcher.rb, line 48
    48:       def failsafe_response(fallback_output, status, originating_exception = nil)
    49:         yield
    50:       rescue Exception => exception
    51:         begin
    52:           log_failsafe_exception(status, originating_exception || exception)
    53:           body = failsafe_response_body(status)
    54:           fallback_output.write "Status: #{status}\r\nContent-Type: text/html\r\n\r\n#{body}"
    55:           nil
    56:         rescue Exception => failsafe_error # Logger or IO errors
    57:           $stderr.puts "Error during failsafe response: #{failsafe_error}"
    58:           $stderr.puts "(originally #{originating_exception})" if originating_exception
    59:         end
    60:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Dispatcher.html#M000468
- :tinyuri: http://tinyurl.com/4nklgs
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - Column
  :method: fallback_string_to_date
  :description: |+
    
        fallback_string_to_date(string)
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 194
    194:           def fallback_string_to_date(string)
    195:             new_date *ParseDate.parsedate(string)[0..2]
    196:           end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/Column.html#M001217
- :tinyuri: http://tinyurl.com/4gz7fk
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - Column
  :method: fallback_string_to_time
  :description: |+
    
        fallback_string_to_time(string)
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 198
    198:           def fallback_string_to_time(string)
    199:             time_hash = Date._parse(string)
    200:             time_hash[:sec_fraction] = microseconds(time_hash)
    201: 
    202:             new_time *time_hash.values_at(:year, :mon, :mday, :hour, :min, :sec, :sec_fraction)
    203:           end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/Column.html#M001218
- :tinyuri: http://tinyurl.com/42dcd4
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - Column
  :method: fast_string_to_date
  :description: |+
    
        fast_string_to_date(string)
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 180
    180:           def fast_string_to_date(string)
    181:             if string =~ Format::ISO_DATE
    182:               new_date $1.to_i, $2.to_i, $3.to_i
    183:             end
    184:           end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/Column.html#M001215
- :tinyuri: http://tinyurl.com/4un2z3
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - Column
  :method: fast_string_to_time
  :description: "\n  \n    fast_string_to_time(string)\n  \n  \n  \n\
    187:           def fast_string_to_time(string)\n\
    188:             if string =~ Format::ISO_DATETIME\n\
    189:               microsec = ($7.to_f * 1_000_000).to_i\n\
    190:               new_time $1.to_i, $2.to_i, $3.to_i, $4.to_i, $5.to_i, $6.to_i, microsec\n\
    191:             end\n\
    192:           end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/Column.html#M001216
- :tinyuri: http://tinyurl.com/3hnqqh
  :path: 
  - HashWithIndifferentAccess
  :method: fetch
  :description: |+
    
        fetch(key, *extras)
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/hash/indifferent_access.rb, line 44
    44:   def fetch(key, *extras)
    45:     super(convert_key(key), *extras)
    46:   end
    
    
  :uri: http://api.rubyonrails.org/classes/HashWithIndifferentAccess.html#M000067
- :tinyuri: http://tinyurl.com/4dxgvg
  :path: 
  - RecursiveHTTPFetcher
  :method: fetch
  :description: 
  :uri: http://api.rubyonrails.org/classes/RecursiveHTTPFetcher.html#M000014
- :tinyuri: http://tinyurl.com/4r5cxw
  :path: 
  - RecursiveHTTPFetcher
  :method: fetch_dir
  :description: |+
    
        fetch_dir(url)
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 912
    912:   def fetch_dir(url)
    913:     @level += 1
    914:     push_d(File.basename(url)) if @level > 0
    915:     open(url) do |stream|
    916:       contents =  stream.read
    917:       fetch(links(url, contents))
    918:     end
    919:     pop_d if @level > 0
    920:     @level -= 1
    921:   end
    
    
  :uri: http://api.rubyonrails.org/classes/RecursiveHTTPFetcher.html#M000015
- :tinyuri: http://tinyurl.com/3oq7rp
  :path: 
  - ActionView
  - Helpers
  - FormTagHelper
  :method: field_set_tag
  :description: "\n  \n    field_set_tag(legend = nil, &block)\n  \n  \n  \n\
    Creates a field set for grouping HTML form elements.\n\n\n\
    legend will become the fieldset\xE2\x80\x98s title (optional as per\n\
    W3C).\n\n\
    381:       def field_set_tag(legend = nil, &block)\n\
    382:         content = capture(&block)\n\
    383:         concat(tag(:fieldset, {}, true), block.binding)\n\
    384:         concat(content_tag(:legend, legend), block.binding) unless legend.blank?\n\
    385:         concat(content, block.binding)\n\
    386:         concat(\"</fieldset>\", block.binding)\n\
    387:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/FormTagHelper.html#M001047
- :tinyuri: http://tinyurl.com/45v2u8
  :path: 
  - Rails
  - Generator
  - GeneratedAttribute
  :method: field_type
  :description: |+
    
        field_type()
    
    
        # File vendor/rails/railties/lib/rails_generator/generated_attribute.rb, line 13
    13:       def field_type
    14:         @field_type ||= case type
    15:           when :integer, :float, :decimal   then :text_field
    16:           when :datetime, :timestamp, :time then :datetime_select
    17:           when :date                        then :date_select
    18:           when :string                      then :text_field
    19:           when :text                        then :text_area
    20:           when :boolean                     then :check_box
    21:           else
    22:             :text_field
    23:         end      
    24:       end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/GeneratedAttribute.html#M001561
- :tinyuri: http://tinyurl.com/29fuy4
  :path: 
  - ActionView
  - Helpers
  - FormHelper
  :method: fields_for
  :description: "\n  \n    fields_for(record_or_name_or_array, *args) {|builder.new(object_name, object, self, options, block)| ...}\n  \n  \n  \n\
    Creates a scope around a specific model object like form_for, but doesn\xE2\x80\x98t create the\n\
    form tags themselves. This makes fields_for suitable for specifying\n\
    additional model objects in the same form:\n\n\
    Examples\n\n  <% form_for @person, :url => { :action => \"update\" } do |person_form| %>\n    First name: <%= person_form.text_field :first_name %>\n    Last name : <%= person_form.text_field :last_name %>\n\n    <% fields_for @person.permission do |permission_fields| %>\n      Admin?  : <%= permission_fields.check_box :admin %>\n    <% end %>\n  <% end %>\n\n\n\
    \xE2\x80\xA6or if you have an object that needs to be represented as a different\n\
    parameter, like a Client that acts as a Person:\n\n\n  <% fields_for :person, @client do |permission_fields| %>\n    Admin?: <%= permission_fields.check_box :admin %>\n  <% end %>\n\n\n\
    \xE2\x80\xA6or if you don\xE2\x80\x98t have an object, just a name of the parameter\n\n\n  <% fields_for :person do |permission_fields| %>\n    Admin?: <%= permission_fields.check_box :admin %>\n  <% end %>\n\n\n\
    Note: This also works for the methods in FormOptionHelper and DateHelper that are designed to work with an\n\
    230:       def fields_for(record_or_name_or_array, *args, &block)\n\
    231:         raise ArgumentError, \"Missing block\" unless block_given?\n\
    232:         options = args.extract_options!\n\
    233: \n\
    234:         case record_or_name_or_array\n\
    235:         when String, Symbol\n\
    236:           object_name = record_or_name_or_array\n\
    237:           object = args.first\n\
    238:         when Array\n\
    239:           object = record_or_name_or_array.last\n\
    240:           object_name = ActionController::RecordIdentifier.singular_class_name(object)\n\
    241:           apply_form_for_options!(record_or_name_or_array, options)\n\
    242:         else\n\
    243:           object = record_or_name_or_array\n\
    244:           object_name = ActionController::RecordIdentifier.singular_class_name(object)\n\
    245:         end\n\
    246: \n\
    247:         builder = options[:builder] || ActionView::Base.default_form_builder\n\
    248:         yield builder.new(object_name, object, self, options, block)\n\
    249:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/FormHelper.html#M000921
- :tinyuri: http://tinyurl.com/5y7q27
  :path: 
  - Rails
  - Generator
  - Commands
  - Create
  :method: file
  :description: |+
    
        file(relative_source, relative_destination, file_options = {}, &block)
    Copy a file from source to destination
    with collision checking.
    
    
    The file_options hash accepts :chmod and :shebang and :collision options.
    :chmod sets the permissions of the destination file:
    
    
      file 'config/empty.log', 'log/test.log', :chmod => 0664
    
    
    :shebang sets the #!/usr/bin/ruby line for scripts
    
    
      file 'bin/generate.rb', 'script/generate', :chmod => 0755, :shebang => '/usr/bin/env ruby'
    
    
    :collision sets the collision option only for the destination file:
    
    
      file 'settings/server.yml', 'config/server.yml', :collision => :skip
    
    
    Collisions are handled by checking whether the destination file exists and either skipping the file, forcing overwrite, or asking the user
    what to do.
    
    
    
         # File vendor/rails/railties/lib/rails_generator/commands.rb, line 207
    207:         def file(relative_source, relative_destination, file_options = {}, &block)
    208:           # Determine full paths for source and destination files.
    209:           source              = source_path(relative_source)
    210:           destination         = destination_path(relative_destination)
    211:           destination_exists  = File.exist?(destination)
    212: 
    213:           # If source and destination are identical then we're done.
    214:           if destination_exists and identical?(source, destination, &block)
    215:             return logger.identical(relative_destination) 
    216:           end
    217: 
    218:           # Check for and resolve file collisions.
    219:           if destination_exists
    220: 
    221:             # Make a choice whether to overwrite the file.  :force and
    222:             # :skip already have their mind made up, but give :ask a shot.
    223:             choice = case (file_options[:collision] || options[:collision]).to_sym #|| :ask
    224:               when :ask   then force_file_collision?(relative_destination, source, destination, file_options, &block)
    225:               when :force then :force
    226:               when :skip  then :skip
    227:               else raise "Invalid collision option: #{options[:collision].inspect}"
    228:             end
    229: 
    230:             # Take action based on our choice.  Bail out if we chose to
    231:             # skip the file; otherwise, log our transgression and continue.
    232:             case choice
    233:               when :force then logger.force(relative_destination)
    234:               when :skip  then return(logger.skip(relative_destination))
    235:               else raise "Invalid collision choice: #{choice}.inspect"
    236:             end
    237: 
    238:           # File doesn't exist so log its unbesmirched creation.
    239:           else
    240:             logger.create relative_destination
    241:           end
    242: 
    243:           # If we're pretending, back off now.
    244:           return if options[:pretend]
    245: 
    246:           # Write destination file with optional shebang.  Yield for content
    247:           # if block given so templaters may render the source file.  If a
    248:           # shebang is requested, replace the existing shebang or insert a
    249:           # new one.
    250:           File.open(destination, 'wb') do |dest|
    251:             dest.write render_file(source, file_options, &block)
    252:           end
    253: 
    254:           # Optionally change permissions.
    255:           if file_options[:chmod]
    256:             FileUtils.chmod(file_options[:chmod], destination)
    257:           end
    258: 
    259:           # Optionally add file to subversion
    260:           system("svn add #{destination}") if options[:svn]
    261:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Commands/Create.html#M001523
- :tinyuri: http://tinyurl.com/3u3a3v
  :path: 
  - Rails
  - Generator
  - Commands
  - Update
  :method: file
  :description: |+
    
        file(relative_source, relative_destination, options = {})
    
    
         # File vendor/rails/railties/lib/rails_generator/commands.rb, line 556
    556:         def file(relative_source, relative_destination, options = {})
    557:           # logger.file relative_destination
    558:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Commands/Update.html#M001518
- :tinyuri: http://tinyurl.com/3nxt2n
  :path: 
  - Rails
  - Generator
  - Commands
  - Destroy
  :method: file
  :description: |+
    
        file(relative_source, relative_destination, file_options = {})
    Remove a file if it exists and is a file.
    
    
      This method is also aliased as
      template
    
    
    
         # File vendor/rails/railties/lib/rails_generator/commands.rb, line 418
    418:         def file(relative_source, relative_destination, file_options = {})
    419:           destination = destination_path(relative_destination)
    420:           if File.exist?(destination)
    421:             logger.rm relative_destination
    422:             unless options[:pretend]
    423:               if options[:svn]
    424:                 # If the file has been marked to be added
    425:                 # but has not yet been checked in, revert and delete
    426:                 if options[:svn][relative_destination]
    427:                   system("svn revert #{destination}")
    428:                   FileUtils.rm(destination)
    429:                 else
    430:                 # If the directory is not in the status list, it
    431:                 # has no modifications so we can simply remove it
    432:                   system("svn rm #{destination}")
    433:                 end  
    434:               else
    435:                 FileUtils.rm(destination)
    436:               end
    437:             end
    438:           else
    439:             logger.missing relative_destination
    440:             return
    441:           end
    442:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Commands/Destroy.html#M001491
- :tinyuri: http://tinyurl.com/4zaj7m
  :path: 
  - Rails
  - Generator
  - Commands
  - List
  :method: file
  :description: |+
    
        file(relative_source, relative_destination, options = {})
    
    
         # File vendor/rails/railties/lib/rails_generator/commands.rb, line 523
    523:         def file(relative_source, relative_destination, options = {})
    524:           logger.file relative_destination
    525:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Commands/List.html#M001511
- :tinyuri: http://tinyurl.com/4wfea5
  :path: 
  - ActionView
  - Helpers
  - FormHelper
  :method: file_field
  :description: |+
    
        file_field(object_name, method, options = {})
    Returns an file upload input tag tailored for accessing a specified
    attribute (identified by method) on an object assigned to the
    template (identified by object). Additional options on the input
    tag can be passed as a hash with options. These options will be
    tagged onto the HTML as an HTML element attribute as in the example shown.
    
    Examples
    
      file_field(:user, :avatar)
      # => <input type="file" id="user_avatar" name="user[avatar]" />
    
      file_field(:post, :attached, :accept => 'text/html')
      # => <input type="file" id="post_attached" name="post[attached]" />
    
      file_field(:attachment, :file, :class => 'file_input')
      # => <input type="file" id="attachment_file" name="attachment[file]" class="file_input" />
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/form_helper.rb, line 347
    347:       def file_field(object_name, method, options = {})
    348:         InstanceTag.new(object_name, method, self, nil, options.delete(:object)).to_input_field_tag("file", options)
    349:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/FormHelper.html#M000926
- :tinyuri: http://tinyurl.com/3jg5zj
  :path: 
  - ActionView
  - Helpers
  - FormTagHelper
  :method: file_field_tag
  :description: |+
    
        file_field_tag(name, options = {})
    Creates a file upload field. If you are using file uploads then you will
    also need to set the multipart option for the form tag:
    
    
      <%= form_tag { :action => "post" }, { :multipart => true } %>
        <label for="file">File to Upload</label> <%= file_field_tag "file" %>
        <%= submit_tag %>
      <%= end_form_tag %>
    
    
    The specified URL will then be passed a File
    object containing the selected file, or if the field was left blank, a
    StringIO object.
    
    Options
    
    Creates standard HTML attributes for the tag.
    
    
    :disabled - If set to true, the user will not be able to use this
    input.
    
    
    
    Examples
    
      file_field_tag 'attachment'
      # => <input id="attachment" name="attachment" type="file" />
    
      file_field_tag 'avatar', :class => 'profile-input'
      # => <input class="profile-input" id="avatar" name="avatar" type="file" />
    
      file_field_tag 'picture', :disabled => true
      # => <input disabled="disabled" id="picture" name="picture" type="file" />
    
      file_field_tag 'resume', :value => '~/resume.doc'
      # => <input id="resume" name="resume" type="file" value="~/resume.doc" />
    
      file_field_tag 'user_pic', :accept => 'image/png,image/gif,image/jpeg'
      # => <input accept="image/png,image/gif,image/jpeg" id="user_pic" name="user_pic" type="file" />
    
      file_field_tag 'file', :accept => 'text/html', :class => 'upload', :value => 'index.html'
      # => <input accept="text/html" class="upload" id="file" name="file" type="file" value="index.html" />
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/form_tag_helper.rb, line 170
    170:       def file_field_tag(name, options = {})
    171:         text_field_tag(name, nil, options.update("type" => "file"))
    172:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/FormTagHelper.html#M001040
- :tinyuri: http://tinyurl.com/4epsnz
  :path: 
  - ActionController
  - Filters
  - ClassMethods
  :method: filter_chain
  :description: |+
    
        filter_chain()
    Returns an array of Filter objects for this controller.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/filters.rb, line 347
    347:       def filter_chain
    348:         read_inheritable_attribute("filter_chain") || []
    349:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Filters/ClassMethods.html#M000322
- :tinyuri: http://tinyurl.com/4sunqy
  :path: 
  - ActionController
  - Base
  :method: filter_parameter_logging
  :description: |+
    
        filter_parameter_logging(*filter_words) {|key, value| ...}
    Replace sensitive parameter data from the request log. Filters parameters
    that have any of the arguments as a substring. Looks in all subhashes of
    the param hash for keys to filter. If a block is given, each key and value
    of the parameter hash and all subhashes is passed to it, the value or key
    can be replaced using String#replace or similar method.
    
    
    Examples:
    
    
      filter_parameter_logging
      => Does nothing, just slows the logging process down
    
      filter_parameter_logging :password
      => replaces the value to all keys matching /password/i with "[FILTERED]"
    
      filter_parameter_logging :foo, "bar"
      => replaces the value to all keys matching /foo|bar/i with "[FILTERED]"
    
      filter_parameter_logging { |k,v| v.reverse! if k =~ /secret/i }
      => reverses the value to all keys matching /secret/i
    
      filter_parameter_logging(:foo, "bar") { |k,v| v.reverse! if k =~ /secret/i }
      => reverses the value to all keys matching /secret/i, and
         replaces the value to all keys matching /foo|bar/i with "[FILTERED]"
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/base.rb, line 480
    480:       def filter_parameter_logging(*filter_words, &block)
    481:         parameter_filter = Regexp.new(filter_words.collect{ |s| s.to_s }.join('|'), true) if filter_words.length > 0
    482: 
    483:         define_method(:filter_parameters) do |unfiltered_parameters|
    484:           filtered_parameters = {}
    485: 
    486:           unfiltered_parameters.each do |key, value|
    487:             if key =~ parameter_filter
    488:               filtered_parameters[key] = '[FILTERED]'
    489:             elsif value.is_a?(Hash)
    490:               filtered_parameters[key] = filter_parameters(value)
    491:             elsif block_given?
    492:               key = key.dup
    493:               value = value.dup if value
    494:               yield key, value
    495:               filtered_parameters[key] = value
    496:             else
    497:               filtered_parameters[key] = value
    498:             end
    499:           end
    500: 
    501:           filtered_parameters
    502:         end
    503:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Base.html#M000441
- :tinyuri: http://tinyurl.com/3qzjjr
  :path: 
  - Plugin
  :method: find
  :description: |+
    
        find(name)
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 153
    153:   def self.find(name)
    154:     name =~ /\// ? new(name) : Repositories.instance.find_plugin(name)
    155:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Plugin.html#M000092
- :tinyuri: http://tinyurl.com/4ls9oq
  :path: 
  - SourceAnnotationExtractor
  :method: find
  :description: |+
    
        find(dirs=%w(app lib test))
    
    
        # File vendor/rails/railties/lib/source_annotation_extractor.rb, line 21
    21:   def find(dirs=%w(app lib test))
    22:     dirs.inject({}) { |h, dir| h.update(find_in(dir)) }
    23:   end
    
    
  :uri: http://api.rubyonrails.org/classes/SourceAnnotationExtractor.html#M000101
- :tinyuri: http://tinyurl.com/47nema
  :path: 
  - RailsEnvironment
  :method: find
  :description: |+
    
        find(dir=nil)
    
    
        # File vendor/rails/railties/lib/commands/plugin.rb, line 65
    65:   def self.find(dir=nil)
    66:     dir ||= pwd
    67:     while dir.length > 1
    68:       return new(dir) if File.exist?(File.join(dir, 'config', 'environment.rb'))
    69:       dir = File.dirname(dir)
    70:     end
    71:   end
    
    
  :uri: http://api.rubyonrails.org/classes/RailsEnvironment.html#M000052
- :tinyuri: http://tinyurl.com/2rbn2m
  :path: 
  - ActiveResource
  - Base
  :method: find
  :description: "\n  \n    find(*arguments)\n  \n  \n  \n\
    Core method for finding resources. Used similarly to Active Record\xE2\x80\x98s\n\
    find method.\n\n\
    Arguments\n\n\
    The first argument is considered to be the scope of the query. That is, how\n\
    many resources are returned from the request. It can be one of the\n\
    following.\n\n\n\
    +:one+:Returns a single resource.\n\n\n\
    +:first+:Returns the first resource found.\n\n\n\
    +:all+:Returns every resource that matches the request.\n\n\n\n\
    Options\n\n\
    from:Sets the path or custom method that resources will be fetched from.\n\n\n\
    params:Sets query and prefix (nested URL)\n\
    parameters.\n\n\n\n\
    381:       def find(*arguments)\n\
    382:         scope   = arguments.slice!(0)\n\
    383:         options = arguments.slice!(0) || {}\n\
    384: \n\
    385:         case scope\n\
    386:           when :all   then find_every(options)\n\
    387:           when :first then find_every(options).first\n\
    388:           when :one   then find_one(options)\n\
    389:           else             find_single(scope, options)\n\
    390:         end\n\
    391:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Base.html#M000836
- :tinyuri: http://tinyurl.com/2y4twp
  :path: 
  - ActiveRecord
  - Base
  :method: find
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001376
- :tinyuri: http://tinyurl.com/4abwad
  :path: 
  - ActionController
  - TestProcess
  :method: find_all_tag
  :description: |+
    
        find_all_tag(conditions)
    
    
         # File vendor/rails/actionpack/lib/action_controller/test_process.rb, line 459
    459:     def find_all_tag(conditions)
    460:       html_document.find_all(conditions)
    461:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/TestProcess.html#M000202
- :tinyuri: http://tinyurl.com/4ogrct
  :path: 
  - ActiveRecord
  - Base
  :method: find_by_sql
  :description: |+
    
        find_by_sql(sql)
    Executes a custom sql query against your database and returns all the
    results. The results will be returned as an array with columns requested encapsulated as attributes of the model you call this method
    from. If you call +Product.find_by_sql+ then the results will be returned
    in a Product object with the attributes you
    specified in the SQL query.
    
    
    If you call a complicated SQL query which spans multiple tables the columns specified by the SELECT will be attributes of the model, whether or not they
    are columns of the corresponding table.
    
    
    The sql parameter is a full sql query as a string. It will be
    called as is, there will be no database agnostic conversions performed.
    This should be a last resort because using, for example, MySQL specific
    terms will lock you to using that particular database engine or require you
    to change your call if you switch engines
    
    Examples
    
      # A simple sql query spanning multiple tables
      Post.find_by_sql "SELECT p.title, c.author FROM posts p, comments c WHERE p.id = c.post_id"
      > [#<Post:0x36bff9c @attributes={"title"=>"Ruby Meetup", "first_name"=>"Quentin"}>, ...]
    
      # You can use the same string replacement techniques as you can with ActiveRecord#find
      Post.find_by_sql ["SELECT title FROM posts WHERE author = ? AND created > ?", author_id, start_date]
      > [#<Post:0x36bff9c @attributes={"first_name"=>"The Cheap Man Buys Twice"}>, ...]
    
    
    
         # File vendor/rails/activerecord/lib/active_record/base.rb, line 531
    531:       def find_by_sql(sql)
    532:         connection.select_all(sanitize_sql(sql), "#{name} Load").collect! { |record| instantiate(record) }
    533:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001377
- :tinyuri: http://tinyurl.com/3m4n6m
  :path: 
  - ActionController
  - Filters
  - ClassMethods
  :method: find_filter_append_position
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionController/Filters/ClassMethods.html#M000326
- :tinyuri: http://tinyurl.com/4dtmrh
  :path: 
  - ActionController
  - Filters
  - ClassMethods
  :method: find_filter_prepend_position
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionController/Filters/ClassMethods.html#M000327
- :tinyuri: http://tinyurl.com/4syhux
  :path: 
  - Object
  :method: find_hidden_method
  :description: |+
    
        find_hidden_method(name)
    
    
        # File vendor/rails/activesupport/lib/active_support/vendor/builder-2.1.2/blankslate.rb, line 90
    90:     def find_hidden_method(name)
    91:       nil
    92:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Object.html#M000145
- :tinyuri: http://tinyurl.com/4kw3sp
  :path: 
  - BlankSlate
  :method: find_hidden_method
  :description: |+
    
        find_hidden_method(name)
    
    
        # File vendor/rails/activesupport/lib/active_support/vendor/builder-2.1.2/blankslate.rb, line 31
    31:     def find_hidden_method(name)
    32:       @hidden_methods ||= {}
    33:       @hidden_methods[name] || superclass.find_hidden_method(name)
    34:     end
    
    
  :uri: http://api.rubyonrails.org/classes/BlankSlate.html#M000107
- :tinyuri: http://tinyurl.com/523vv8
  :path: 
  - Repositories
  :method: find_home
  :description: |+
    
        find_home()
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 336
    336:   def find_home
    337:     ['HOME', 'USERPROFILE'].each do |homekey|
    338:       return ENV[homekey] if ENV[homekey]
    339:     end
    340:     if ENV['HOMEDRIVE'] && ENV['HOMEPATH']
    341:       return "#{ENV['HOMEDRIVE']}:#{ENV['HOMEPATH']}"
    342:     end
    343:     begin
    344:       File.expand_path("~")
    345:     rescue StandardError => ex
    346:       if File::ALT_SEPARATOR
    347:         "C:/"
    348:       else
    349:         "/"
    350:       end
    351:     end
    352:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Repositories.html#M000088
- :tinyuri: http://tinyurl.com/3uwfww
  :path: 
  - SourceAnnotationExtractor
  :method: find_in
  :description: 
  :uri: http://api.rubyonrails.org/classes/SourceAnnotationExtractor.html#M000102
- :tinyuri: http://tinyurl.com/3nuyvo
  :path: 
  - ActionController
  - Filters
  - ClassMethods
  :method: find_or_create_filter
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionController/Filters/ClassMethods.html#M000328
- :tinyuri: http://tinyurl.com/4j6p3n
  :path: 
  - Repositories
  :method: find_plugin
  :description: 
  :uri: http://api.rubyonrails.org/classes/Repositories.html#M000084
- :tinyuri: http://tinyurl.com/5xbk66
  :path: 
  - ActionController
  - TestProcess
  :method: find_tag
  :description: |+
    
        find_tag(conditions)
    
    
         # File vendor/rails/actionpack/lib/action_controller/test_process.rb, line 455
    455:     def find_tag(conditions)
    456:       html_document.find(conditions)
    457:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/TestProcess.html#M000201
- :tinyuri: http://tinyurl.com/3kcbek
  :path: 
  - ActiveSupport
  - CoreExtensions
  - String
  - Access
  :method: first
  :description: |+
    
        first(limit = 1)
    Returns the first character of the string
    or the first limit characters.
    
    
    Examples:
    
    
      "hello".first     # => "h"
      "hello".first(2)  # => "he"
      "hello".first(10) # => "hello"
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/string/access.rb, line 42
    42:         def first(limit = 1)
    43:           chars[0..(limit - 1)].to_s
    44:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/String/Access.html#M000757
- :tinyuri: http://tinyurl.com/4yh6h3
  :path: 
  - ActionController
  - TestProcess
  :method: fixture_file_upload
  :description: |+
    
        fixture_file_upload(path, mime_type = nil, binary = false)
    Shortcut for ActionController::TestUploadedFile.new(Test::Unit::TestCase.fixture_path
    + path, type). Example:
    
    
      post :change_avatar, :avatar => fixture_file_upload('/files/spongebob.png', 'image/png')
    
    
    To upload binary files on Windows, pass :binary as the last parameter. This
    will not affect other platforms.
    
    
      post :change_avatar, :avatar => fixture_file_upload('/files/spongebob.png', 'image/png', :binary)
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/test_process.rb, line 473
    473:     def fixture_file_upload(path, mime_type = nil, binary = false)
    474:       ActionController::TestUploadedFile.new(
    475:         Test::Unit::TestCase.respond_to?(:fixture_path) ? Test::Unit::TestCase.fixture_path + path : path, 
    476:         mime_type,
    477:         binary
    478:       )
    479:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/TestProcess.html#M000204
- :tinyuri: http://tinyurl.com/4tqtm2
  :path: 
  - Fixtures
  :method: fixture_is_cached?
  :description: |+
    
        fixture_is_cached?(connection, table_name)
    
    
         # File vendor/rails/activerecord/lib/active_record/fixtures.rb, line 456
    456:   def self.fixture_is_cached?(connection, table_name)
    457:     cache_for_connection(connection)[table_name]
    458:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Fixtures.html#M000151
- :tinyuri: http://tinyurl.com/3repfs
  :path: 
  - ActionController
  - TestProcess
  :method: flash
  :description: |+
    
        flash()
    
    
         # File vendor/rails/actionpack/lib/action_controller/test_process.rb, line 428
    428:     def flash
    429:       @response.flash
    430:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/TestProcess.html#M000196
- :tinyuri: http://tinyurl.com/48jkzb
  :path: 
  - ActiveSupport
  - BufferedLogger
  :method: flush
  :description: |+
    
        flush()
    
    
        # File vendor/rails/activesupport/lib/active_support/buffered_logger.rb, line 93
    93:     def flush
    94:       @log.write(@buffer.slice!(0..-1).to_s) unless @buffer.empty?
    95:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/BufferedLogger.html#M000768
- :tinyuri: http://tinyurl.com/53tana
  :path: 
  - ActionController
  - Dispatcher
  :method: flush_logger
  :description: |+
    
        flush_logger()
    
    
         # File vendor/rails/actionpack/lib/action_controller/dispatcher.rb, line 164
    164:     def flush_logger
    165:       RAILS_DEFAULT_LOGGER.flush if defined?(RAILS_DEFAULT_LOGGER) && RAILS_DEFAULT_LOGGER.respond_to?(:flush)
    166:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Dispatcher.html#M000475
- :tinyuri: http://tinyurl.com/49ucst
  :path: 
  - ActionController
  - TestProcess
  :method: follow_redirect
  :description: |+
    
        follow_redirect()
    
    
         # File vendor/rails/actionpack/lib/action_controller/test_process.rb, line 407
    407:     def follow_redirect
    408:       redirected_controller = @response.redirected_to[:controller]
    409:       if redirected_controller && redirected_controller != @controller.controller_name
    410:         raise "Can't follow redirects outside of current controller (from #{@controller.controller_name} to #{redirected_controller})"
    411:       end
    412: 
    413:       get(@response.redirected_to.delete(:action), @response.redirected_to.stringify_keys)
    414:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/TestProcess.html#M000193
- :tinyuri: http://tinyurl.com/3sphqd
  :path: 
  - ActionController
  - Integration
  - Session
  :method: follow_redirect!
  :description: |+
    
        follow_redirect!()
    Follow a single redirect response. If the last response was not a redirect,
    an exception will be raised. Otherwise, the redirect is performed on the
    location header.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/integration.rb, line 118
    118:       def follow_redirect!
    119:         raise "not a redirect! #{@status} #{@status_message}" unless redirect?
    120:         get(interpret_uri(headers['location'].first))
    121:         status
    122:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Integration/Session.html#M000238
- :tinyuri: http://tinyurl.com/4o27vc
  :path: 
  - HTML
  - Selector
  :method: for_class
  :description: |+
    
        Selector.for_class(cls) => selector
    
    Creates a new selector for the given
    class name.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/vendor/html-scanner/html/selector.rb, line 214
    214:       def for_class(cls)
    215:         self.new([".?", cls])
    216:       end
    
    
  :uri: http://api.rubyonrails.org/classes/HTML/Selector.html#M000164
- :tinyuri: http://tinyurl.com/3ln3p5
  :path: 
  - HTML
  - Selector
  :method: for_id
  :description: |+
    
        Selector.for_id(id) => selector
    
    Creates a new selector for the given
    id.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/vendor/html-scanner/html/selector.rb, line 223
    223:       def for_id(id)
    224:         self.new(["#?", id])
    225:       end
    
    
  :uri: http://api.rubyonrails.org/classes/HTML/Selector.html#M000165
- :tinyuri: http://tinyurl.com/4gwqu4
  :path: 
  - Inflector
  :method: foreign_key
  :description: "\n  \n    foreign_key(class_name, separate_class_name_and_id_with_underscore = true)\n  \n  \n  \n\
    Creates a foreign key name from a class name.\n\
    separate_class_name_and_id_with_underscore sets whether the method\n\
    should put \xE2\x80\x98_\xE2\x80\x99 between the name and \xE2\x80\x98id\xE2\x80\x99.\n\n\n\
    241:   def foreign_key(class_name, separate_class_name_and_id_with_underscore = true)\n\
    242:     underscore(demodulize(class_name)) + (separate_class_name_and_id_with_underscore ? \"_id\" : \"id\")\n\
    243:   end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/Inflector.html#M001627
- :tinyuri: http://tinyurl.com/4v4lwk
  :path: 
  - ActiveSupport
  - CoreExtensions
  - String
  - Inflections
  :method: foreign_key
  :description: "\n  \n    foreign_key(separate_class_name_and_id_with_underscore = true)\n  \n  \n  \n\
    Creates a foreign key name from a class name.\n\
    separate_class_name_and_id_with_underscore sets whether the method\n\
    should put \xE2\x80\x98_\xE2\x80\x99 between the name and \xE2\x80\x98id\xE2\x80\x99.\n\n\n\
    136:         def foreign_key(separate_class_name_and_id_with_underscore = true)\n\
    137:           Inflector.foreign_key(self, separate_class_name_and_id_with_underscore)\n\
    138:         end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/String/Inflections.html#M000752
- :tinyuri: http://tinyurl.com/3z5d8y
  :path: 
  - ActionView
  - Helpers
  - ActiveRecordHelper
  :method: form
  :description: "\n  \n    form(record_name, options = {}) {|contents if block_given?| ...}\n  \n  \n  \n\
    Returns an entire form with\n\
    all needed input tags for a\n\
    specified Active Record object. For example, let\xE2\x80\x98s say you have a\n\
    table model Post with attributes named title of type\n\
    VARCHAR and body of type TEXT:\n\n\n  form(\"post\")\n\n\n\
    That line would yield a form\n\
    like the following:\n\n\n    <form action='/post/create' method='post'>\n      <p>\n        <label for=\"post_title\">Title</label><br />\n        <input id=\"post_title\" name=\"post[title]\" size=\"30\" type=\"text\" value=\"Hello World\" />\n      </p>\n      <p>\n        <label for=\"post_body\">Body</label><br />\n        <textarea cols=\"40\" id=\"post_body\" name=\"post[body]\" rows=\"20\">\n        </textarea>\n      </p>\n      <input type='submit' value='Create' />\n    </form>\n\n\n\
    It\xE2\x80\x98s possible to specialize the form builder by using a\n\
    different action name and by supplying another block renderer. For example,\n\
    let\xE2\x80\x98s say you have a model Entry with an attribute\n\
    message of type VARCHAR:\n\n\n  form(\"entry\", :action => \"sign\", :input_block =>\n       Proc.new { |record, column| \"#{column.human_name}: #{input(record, column.name)}<br />\" }) =>\n\n    <form action='/post/sign' method='post'>\n      Message:\n      <input id=\"post_title\" name=\"post[title]\" size=\"30\" type=\"text\" value=\"Hello World\" /><br />\n      <input type='submit' value='Sign' />\n    </form>\n\n\n\
    It\xE2\x80\x98s also possible to add additional content to the form by giving it a block, such\n\
    59:       def form(record_name, options = {})\n\
    60:         record = instance_variable_get(\"@#{record_name}\")\n\
    61: \n\
    62:         options = options.symbolize_keys\n\
    63:         options[:action] ||= record.new_record? ? \"create\" : \"update\"\n\
    64:         action = url_for(:action => options[:action], :id => record)\n\
    65: \n\
    66:         submit_value = options[:submit_value] || options[:action].gsub(/[^\\w]/, '').capitalize\n\
    67: \n\
    68:         contents = ''\n\
    69:         contents << hidden_field(record_name, :id) unless record.new_record?\n\
    70:         contents << all_input_tags(record, record_name, options)\n\
    71:         yield contents if block_given?\n\
    72:         contents << submit_tag(submit_value)\n\
    73: \n\
    74:         content_tag('form', contents, :action => action, :method => 'post', :enctype => options[:multipart] ? 'multipart/form-data': nil)\n\
    75:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/ActiveRecordHelper.html#M001003
- :tinyuri: http://tinyurl.com/3wa8ah
  :path: 
  - ActionController
  - RequestForgeryProtection
  :method: form_authenticity_token
  :description: |+
    
        form_authenticity_token()
    Sets the token value for the current session. Pass a :secret option in
    protect_from_forgery to add a custom salt to the hash.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/request_forgery_protection.rb, line 99
     99:       def form_authenticity_token
    100:         @form_authenticity_token ||= if request_forgery_protection_options[:secret]
    101:           authenticity_token_from_session_id
    102:         elsif session.respond_to?(:dbman) && session.dbman.respond_to?(:generate_digest)
    103:           authenticity_token_from_cookie_session
    104:         elsif session.nil?
    105:           raise InvalidAuthenticityToken, "Request Forgery Protection requires a valid session.  Use #allow_forgery_protection to disable it, or use a valid session."
    106:         else
    107:           raise InvalidAuthenticityToken, "No :secret given to the #protect_from_forgery call.  Set that or use a session store capable of generating its own keys (Cookie Session Store)."
    108:         end
    109:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/RequestForgeryProtection.html#M000296
- :tinyuri: http://tinyurl.com/4csrnz
  :path: 
  - ActionView
  - Helpers
  - FormHelper
  :method: form_for
  :description: "\n  \n    form_for(record_or_name_or_array, *args, &proc)\n  \n  \n  \n\
    Creates a form and a scope around a specific model object that is used as a\n\
    base for questioning about values for the fields.\n\n\n  <% form_for :person, @person, :url => { :action => \"update\" } do |f| %>\n    First name: <%= f.text_field :first_name %>\n    Last name : <%= f.text_field :last_name %>\n    Biography : <%= f.text_area :biography %>\n    Admin?    : <%= f.check_box :admin %>\n  <% end %>\n\n\n\
    Worth noting is that the form_for tag\n\
    is called in a ERb evaluation block, not an ERb output block. So\n\
    that\xE2\x80\x98s <% %>, not <%= %>. Also worth\n\
    noting is that form_for yields a\n\
    form_builder object, in this example as f, which emulates\n\
    the API for the stand-alone FormHelper\n\
    methods, but without the object name. So instead of text_field :person, :name, you get\n\
    away with f.text_field :name.\n\n\n\
    Even further, the form_for method\n\
    allows you to more easily escape the instance variable convention. So while\n\
    the stand-alone approach would require text_field :person, :name, :object =>\n\
    person to work with local variables instead of instance ones, the form_for calls remain the same. You\n\
    simply declare once with :person, person and all subsequent field\n\
    calls save :person and :object => person.\n\n\n\
    Also note that form_for doesn\xE2\x80\x98t\n\
    create an exclusive scope. It\xE2\x80\x98s still possible to use both the\n\
    stand-alone FormHelper methods and methods\n\
    from FormTagHelper. For example:\n\n\n  <% form_for :person, @person, :url => { :action => \"update\" } do |f| %>\n    First name: <%= f.text_field :first_name %>\n    Last name : <%= f.text_field :last_name %>\n    Biography : <%= text_area :person, :biography %>\n    Admin?    : <%= check_box_tag \"person[admin]\", @person.company.admin? %>\n  <% end %>\n\n\n\
    Note: This also works for the methods in FormOptionHelper and DateHelper that are designed to work with an\n\
    object as base, like FormOptionHelper#collection_select and DateHelper#datetime_select.\n\n\n\
    HTML attributes for the form tag can be given as :html => {\xE2\x80\xA6}. For\n\
    example:\n\n\n  <% form_for :person, @person, :html => {:id => 'person_form'} do |f| %>\n    ...\n  <% end %>\n\n\n\
    The above form will then have the id attribute with the value\n\
    </tt>person_form</tt>, which you can then style with CSS or\n\
    manipulate with JavaScript.\n\n\
    Relying on record identification\n\n\
    In addition to manually configuring the form_for call, you can also rely on\n\
    record identification, which will use the conventions and named routes of\n\
    that approach. Examples:\n\n\n  <% form_for(@post) do |f| %>\n    ...\n  <% end %>\n\n\n\
    This will expand to be the same as:\n\n\n  <% form_for :post, @post, :url => post_path(@post), :html => { :method => :put, :class => \"edit_post\", :id => \"edit_post_45\" } do |f| %>\n    ...\n  <% end %>\n\n\n\
    And for new records:\n\n\n  <% form_for(Post.new) do |f| %>\n    ...\n  <% end %>\n\n\n\
    This will expand to be the same as:\n\n\n  <% form_for :post, @post, :url => posts_path, :html => { :class => \"new_post\", :id => \"new_post\" } do |f| %>\n    ...\n  <% end %>\n\n\n\
    You can also overwrite the individual conventions, like this:\n\n\n  <% form_for(@post, :url => super_post_path(@post)) do |f| %>\n    ...\n  <% end %>\n\n\n\
    And for namespaced routes, like admin_post_url:\n\n\n  <% form_for([:admin, @post]) do |f| %>\n   ...\n  <% end %>\n\n\
    Customized form builders\n\n\
    You can also build forms using a customized FormBuilder class. Subclass\n\
    FormBuilder and override or define some more helpers, then use your custom\n\
    builder. For example, let\xE2\x80\x98s say you made a helper to automatically\n\
    add labels to form inputs.\n\n\n  <% form_for :person, @person, :url => { :action => \"update\" }, :builder => LabellingFormBuilder do |f| %>\n    <%= f.text_field :first_name %>\n    <%= f.text_field :last_name %>\n    <%= text_area :person, :biography %>\n    <%= check_box_tag \"person[admin]\", @person.company.admin? %>\n  <% end %>\n\n\n\
    In many cases you will want to wrap the above in another helper, so you\n\
    could do something like the following:\n\n\n  def labelled_form_for(name, object, options, &proc)\n    form_for(name, object, options.merge(:builder => LabellingFormBuiler), &proc)\n  end\n\n\n\
    If you don\xE2\x80\x98t need to attach a form to a model instance, then check\n\
    163:       def form_for(record_or_name_or_array, *args, &proc)\n\
    164:         raise ArgumentError, \"Missing block\" unless block_given?\n\
    165: \n\
    166:         options = args.extract_options!\n\
    167: \n\
    168:         case record_or_name_or_array\n\
    169:         when String, Symbol\n\
    170:           object_name = record_or_name_or_array\n\
    171:         when Array\n\
    172:           object = record_or_name_or_array.last\n\
    173:           object_name = ActionController::RecordIdentifier.singular_class_name(object)\n\
    174:           apply_form_for_options!(record_or_name_or_array, options)\n\
    175:           args.unshift object\n\
    176:         else\n\
    177:           object = record_or_name_or_array\n\
    178:           object_name = ActionController::RecordIdentifier.singular_class_name(object)\n\
    179:           apply_form_for_options!([object], options)\n\
    180:           args.unshift object\n\
    181:         end\n\
    182: \n\
    183:         concat(form_tag(options.delete(:url) || {}, options.delete(:html) || {}), proc.binding)\n\
    184:         fields_for(object_name, *(args << options), &proc)\n\
    185:         concat('</form>', proc.binding)\n\
    186:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/FormHelper.html#M000920
- :tinyuri: http://tinyurl.com/2fyjbr
  :path: 
  - ActionView
  - Helpers
  - PrototypeHelper
  :method: form_remote_for
  :description: |
    
        form_remote_for(record_or_name_or_array, *args, &proc)
    Alias for remote_form_for
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/PrototypeHelper.html#M000962
- :tinyuri: http://tinyurl.com/2q895h
  :path: 
  - ActionView
  - Helpers
  - PrototypeHelper
  :method: form_remote_tag
  :description: "\n  \n    form_remote_tag(options = {}, &block)\n  \n  \n  \n\
    Returns a form tag that will submit using XMLHttpRequest in the background\n\
    instead of the regular reloading POST arrangement. Even though it\xE2\x80\x98s\n\
    using JavaScript to serialize the form elements, the form submission will\n\
    work just like a regular submission as viewed by the receiving side (all\n\
    elements available in params). The options for specifying the\n\
    target with :url and defining callbacks is the same as link_to_remote.\n\n\n\
    A \"fall-through\" target for browsers that doesn\xE2\x80\x98t do\n\
    JavaScript can be specified with the :action/:method options on :html.\n\n\n\
    Example:\n\n\n  # Generates:\n  #      <form action=\"/some/place\" method=\"post\" onsubmit=\"new Ajax.Request('',\n  #      {asynchronous:true, evalScripts:true, parameters:Form.serialize(this)}); return false;\">\n  form_remote_tag :html => { :action =>\n    url_for(:controller => \"some\", :action => \"place\") }\n\n\n\
    The Hash passed to the :html key is equivalent to the options (2nd)\n\
    argument in the FormTagHelper.form_tag method.\n\n\n\
    By default the fall-through action is the same as the one specified in the\n\
    :url (and the default method is :post).\n\n\n\
    form_remote_tag also takes a\n\
    322:       def form_remote_tag(options = {}, &block)\n\
    323:         options[:form] = true\n\
    324: \n\
    325:         options[:html] ||= {}\n\
    326:         options[:html][:onsubmit] = \n\
    327:           (options[:html][:onsubmit] ? options[:html][:onsubmit] + \"; \" : \"\") + \n\
    328:           \"#{remote_function(options)}; return false;\"\n\
    329: \n\
    330:         form_tag(options[:html].delete(:action) || url_for(options[:url]), options[:html], &block)\n\
    331:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/PrototypeHelper.html#M000960
- :tinyuri: http://tinyurl.com/5jzw3j
  :path: 
  - ActionView
  - Helpers
  - FormTagHelper
  :method: form_tag
  :description: |+
    
        form_tag(url_for_options = {}, options = {}, *parameters_for_url, &block)
    Starts a form tag that points the action to an url configured with
    url_for_options just like ActionController::Base#url_for. The
    method for the form defaults to POST.
    
    Options
    
    :multipart - If set to true, the enctype is set to
    "multipart/form-data".
    
    
    :method - The method to use when submitting the form, usually
    either "get" or "post".
    
    
                          If "put", "delete", or another verb is used, a hidden input with name _method
                          is added to simulate the verb over post.
    
    
    A list of parameters to feed to the URL the form will be posted to.
    
    
    
    Examples
    
      form_tag('/posts')
      # => <form action="/posts" method="post">
    
      form_tag('/posts/1', :method => :put)
      # => <form action="/posts/1" method="put">
    
      form_tag('/upload', :multipart => true)
      # => <form action="/upload" method="post" enctype="multipart/form-data">
    
      <% form_tag '/posts' do -%>
        <div><%= submit_tag 'Save' %></div>
      <% end -%>
      # => <form action="/posts" method="post"><div><input type="submit" name="submit" value="Save" /></div></form>
    
    
    
        # File vendor/rails/actionpack/lib/action_view/helpers/form_tag_helper.rb, line 36
    36:       def form_tag(url_for_options = {}, options = {}, *parameters_for_url, &block)
    37:         html_options = html_options_for_form(url_for_options, options, *parameters_for_url)
    38:         if block_given?
    39:           form_tag_in_block(html_options, &block)
    40:         else
    41:           form_tag_html(html_options)
    42:         end
    43:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/FormTagHelper.html#M001036
- :tinyuri: http://tinyurl.com/4khhe8
  :path: 
  - ActionController
  - AbstractRequest
  :method: format
  :description: |+
    
        format()
    Returns the Mime type for the format used in the request. If
    there is no format available,
    the first of the accept types will be used. Examples:
    
    
      GET /posts/5.xml   | request.format => Mime::XML
      GET /posts/5.xhtml | request.format => Mime::HTML
      GET /posts/5       | request.format => request.accepts.first (usually Mime::HTML for browsers)
    
    
    
        # File vendor/rails/actionpack/lib/action_controller/request.rb, line 96
    96:     def format
    97:       @format ||= parameters[:format] ? Mime::Type.lookup_by_extension(parameters[:format]) : accepts.first
    98:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/AbstractRequest.html#M000404
- :tinyuri: http://tinyurl.com/5ymcgo
  :path: 
  - ActionController
  - AbstractRequest
  :method: format=
  :description: |+
    
        format=(extension)
    Sets the format by string
    extension, which can be used to force custom formats that are not
    controlled by the extension. Example:
    
    
      class ApplicationController < ActionController::Base
        before_filter :adjust_format_for_iphone
    
        private
          def adjust_format_for_iphone
            request.format = :iphone if request.env["HTTP_USER_AGENT"][/iPhone/]
          end
      end
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/request.rb, line 112
    112:     def format=(extension)
    113:       parameters[:format] = extension.to_s
    114:       format
    115:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/AbstractRequest.html#M000405
- :tinyuri: http://tinyurl.com/4bmokv
  :path: 
  - ActiveResource
  - Base
  :method: format=
  :description: |+
    
        format=(mime_type_reference_or_format)
    Sets the format that attributes are sent and received in from a mime type
    reference. Example:
    
    
      Person.format = :json
      Person.find(1) # => GET /people/1.json
    
      Person.format = ActiveResource::Formats::XmlFormat
      Person.find(1) # => GET /people/1.xml
    
    
    Default format is :xml.
    
    
    
         # File vendor/rails/activeresource/lib/active_resource/base.rb, line 179
    179:       def format=(mime_type_reference_or_format)
    180:         format = mime_type_reference_or_format.is_a?(Symbol) ? 
    181:           ActiveResource::Formats[mime_type_reference_or_format] : mime_type_reference_or_format
    182: 
    183:         write_inheritable_attribute("format", format)
    184:         connection.format = format
    185:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Base.html#M000827
- :tinyuri: http://tinyurl.com/4prjne
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - AbstractAdapter
  :method: format_log_entry
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#M001296
- :tinyuri: http://tinyurl.com/4zp5m6
  :path: 
  - TimeZone
  :method: formatted_offset
  :description: 
  :uri: http://api.rubyonrails.org/classes/TimeZone.html#M000017
- :tinyuri: http://tinyurl.com/44kajn
  :path: 
  - Logger
  :method: formatter
  :description: |+
    
        formatter()
    Get the current formatter. The default formatter is a SimpleFormatter which only displays
    the log message
    
    
    
        # File vendor/rails/activesupport/lib/active_support/clean_logger.rb, line 52
    52:   def formatter
    53:     @formatter ||= SimpleFormatter.new
    54:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Logger.html#M000126
- :tinyuri: http://tinyurl.com/4wuxom
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Numeric
  - Time
  :method: fortnight
  :description: |
    
        fortnight()
    Alias for fortnights
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Numeric/Time.html#M000649
- :tinyuri: http://tinyurl.com/3jupx3
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Numeric
  - Time
  :method: fortnights
  :description: |+
    
        fortnights()
    
      This method is also aliased as
      fortnight
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/numeric/time.rb, line 58
    58:         def fortnights
    59:           ActiveSupport::Duration.new(self * 2.weeks, [[:days, self * 14]])
    60:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Numeric/Time.html#M000648
- :tinyuri: http://tinyurl.com/4m9t6a
  :path: 
  - ActionController
  - Caching
  - Fragments
  :method: fragment_cache_key
  :description: |+
    
        fragment_cache_key(name)
    Given a name (as described in expire_fragment), returns a key
    suitable for use in reading, writing, or expiring a cached fragment. If the
    name is a hash, the generated name is the return value of url_for on that
    hash (without the protocol).
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/caching.rb, line 370
    370:       def fragment_cache_key(name)
    371:         name.is_a?(Hash) ? url_for(name).split("://").last : name
    372:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Caching/Fragments.html#M000259
- :tinyuri: http://tinyurl.com/485y3r
  :path: 
  - ActionController
  - Caching
  - Fragments
  :method: fragment_cache_store=
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionController/Caching/Fragments.html#M000258
- :tinyuri: http://tinyurl.com/3fgsjv
  :path: 
  - Rails
  - Configuration
  :method: framework_paths
  :description: |+
    
        framework_paths()
    
    
         # File vendor/rails/railties/lib/initializer.rb, line 548
    548:     def framework_paths
    549:       paths = %w(railties railties/lib activesupport/lib)
    550:       paths << 'actionpack/lib' if frameworks.include? :action_controller or frameworks.include? :action_view
    551:       
    552:       [:active_record, :action_mailer, :active_resource, :action_web_service].each do |framework|
    553:         paths << "#{framework.to_s.gsub('_', '')}/lib" if frameworks.include? framework
    554:       end
    555:       
    556:       paths.map { |dir| "#{framework_root_path}/#{dir}" }.select { |dir| File.directory?(dir) }
    557:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Configuration.html#M001615
- :tinyuri: http://tinyurl.com/4aqzou
  :path: 
  - ActiveRecord
  - Base
  :method: freeze
  :description: |+
    
        freeze()
    Freeze the attributes hash such that associations are still
    accessible, even on destroyed records.
    
    
    
          # File vendor/rails/activerecord/lib/active_record/base.rb, line 2206
    2206:       def freeze
    2207:         @attributes.freeze; self
    2208:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001458
- :tinyuri: http://tinyurl.com/4ovdrd
  :path: 
  - ActiveSupport
  - CoreExtensions
  - String
  - Access
  :method: from
  :description: |+
    
        from(position)
    Returns the remaining of the string from
    the position treating the string as an array (where 0 is the first character).
    
    
    Examples:
    
    
      "hello".from(0)  # => "hello"
      "hello".from(2)  # => "llo"
      "hello".from(10) # => nil
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/string/access.rb, line 22
    22:         def from(position)
    23:           chars[position..-1].to_s
    24:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/String/Access.html#M000755
- :tinyuri: http://tinyurl.com/3mj9l6
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Array
  - Access
  :method: from
  :description: |+
    
        from(position)
    Returns the remaining of the array from
    the position.
    
    
    Examples:
    
    
      %w( a b c d ).from(0)  # => %w( a b c d )
      %w( a b c d ).from(2)  # => %w( c d )
      %w( a b c d ).from(10) # => nil
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/array/access.rb, line 12
    12:         def from(position)
    13:           self[position..-1]
    14:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Array/Access.html#M000634
- :tinyuri: http://tinyurl.com/2yhgno
  :path: 
  - ActiveRecord
  - Serialization
  :method: from_json
  :description: |+
    
        from_json(json)
    
    
        # File vendor/rails/activerecord/lib/active_record/serializers/json_serializer.rb, line 60
    60:     def from_json(json)
    61:       self.attributes = ActiveSupport::JSON.decode(json)
    62:       self
    63:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Serialization.html#M001136
- :tinyuri: http://tinyurl.com/43o4nm
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Numeric
  - Time
  :method: from_now
  :description: |
    
        from_now(time = ::Time.now)
    Alias for since
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Numeric/Time.html#M000657
- :tinyuri: http://tinyurl.com/4wxrsl
  :path: 
  - ActiveSupport
  - Duration
  :method: from_now
  :description: |
    
        from_now(time = ::Time.now)
    Alias for since
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Duration.html#M000775
- :tinyuri: http://tinyurl.com/3jyj42
  :path: 
  - ActiveResource
  - Errors
  :method: from_xml
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Errors.html#M000813
- :tinyuri: http://tinyurl.com/4sg4bh
  :path: 
  - ActiveRecord
  - Serialization
  :method: from_xml
  :description: |+
    
        from_xml(xml)
    
    
         # File vendor/rails/activerecord/lib/active_record/serializers/xml_serializer.rb, line 128
    128:     def from_xml(xml)
    129:       self.attributes = Hash.from_xml(xml).values.first
    130:       self
    131:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Serialization.html#M001138
- :tinyuri: http://tinyurl.com/3q4x5a
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Hash
  - ClassMethods
  :method: from_xml
  :description: |+
    
        from_xml(xml)
    
    
         # File vendor/rails/activesupport/lib/active_support/core_ext/hash/conversions.rb, line 153
    153:           def from_xml(xml)
    154:             # TODO: Refactor this into something much cleaner that doesn't rely on XmlSimple
    155:             typecast_xml_value(undasherize_keys(XmlSimple.xml_in_string(xml,
    156:               'forcearray'   => false,
    157:               'forcecontent' => true,
    158:               'keeproot'     => true,
    159:               'contentkey'   => '__content__')
    160:             ))
    161:           end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Hash/ClassMethods.html#M000625
- :tinyuri: http://tinyurl.com/4ldna9
  :path: 
  - ActiveRecord
  - Base
  :method: frozen?
  :description: |+
    
        frozen?()
    Returns true if the attributes hash has been frozen.
    
    
    
          # File vendor/rails/activerecord/lib/active_record/base.rb, line 2211
    2211:       def frozen?
    2212:         @attributes.frozen?
    2213:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001459
- :tinyuri: http://tinyurl.com/478s7q
  :path: 
  - ActionView
  - CompiledTemplates
  :method: full_key
  :description: |+
    
        full_key(identifier, arg_names)
    Return the full key for the given identifier and argument names
    
    
    
        # File vendor/rails/actionpack/lib/action_view/compiled_templates.rb, line 23
    23:     def full_key(identifier, arg_names)
    24:       [identifier, arg_names]
    25:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/CompiledTemplates.html#M001076
- :tinyuri: http://tinyurl.com/52zzcp
  :path: 
  - ActiveRecord
  - Errors
  :method: full_messages
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Errors.html#M001355
- :tinyuri: http://tinyurl.com/3ve2eg
  :path: 
  - ActiveResource
  - Errors
  :method: full_messages
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Errors.html#M000808
- :tinyuri: http://tinyurl.com/4jlbz7
  :path: 
  - Rails
  - Generator
  - Options
  :method: full_options
  :description: |+
    
        full_options(runtime_options = {})
    Merge together our instance options. In
    increasing precedence:
    
    
      default_options   (class default options)
      options           (instance options)
      runtime_options   (provided as argument)
      mandatory_options (class mandatory options)
    
    
    
        # File vendor/rails/railties/lib/rails_generator/options.rb, line 70
    70:         def full_options(runtime_options = {})
    71:           self.class.full_options(options.merge(runtime_options))
    72:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Options.html#M001478
- :tinyuri: http://tinyurl.com/5xq6kn
  :path: 
  - Rails
  - Generator
  - Options
  - ClassMethods
  :method: full_options
  :description: |+
    
        full_options(runtime_options = {})
    Merge together our class options. In increasing precedence:
    
    
      default_options   (class default options)
      runtime_options   (provided as argument)
      mandatory_options (class mandatory options)
    
    
    
        # File vendor/rails/railties/lib/rails_generator/options.rb, line 42
    42:         def full_options(runtime_options = {})
    43:           default_options.merge(runtime_options).merge(mandatory_options)
    44:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Options/ClassMethods.html#M001488
- :tinyuri: http://tinyurl.com/4g3ly3
  :path: 
  - ActionView
  - Base
  :method: full_template_path
  :description: |+
    
        full_template_path(template_path, extension)
    Gets the full template path with base path for the given template_path and
    extension.
    
    
      full_template_path('users/show', 'html.erb')
      # => '~/rails/app/views/users/show.html.erb
    
    
    
         # File vendor/rails/actionpack/lib/action_view/base.rb, line 378
    378:     def full_template_path(template_path, extension)
    379:       if @@cache_template_extensions
    380:         (@@cached_base_paths[template_path] ||= {})[extension.to_s] ||= find_full_template_path(template_path, extension)
    381:       else
    382:         find_full_template_path(template_path, extension)
    383:       end
    384:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Base.html#M001090
- :tinyuri: http://tinyurl.com/4u8g3j
  :path: 
  - ActiveSupport
  - Multibyte
  - Handlers
  - UTF8Handler
  :method: g_length
  :description: |+
    
        g_length(str)
    Returns the number of grapheme clusters in the string. This method is very
    likely to be moved or renamed in future versions.
    
    
    
         # File vendor/rails/activesupport/lib/active_support/multibyte/handlers/utf8_handler.rb, line 354
    354:       def g_length(str)
    355:         g_unpack(str).length
    356:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Handlers/UTF8Handler.html#M000535
- :tinyuri: http://tinyurl.com/4n622b
  :path: 
  - ActiveSupport
  - Multibyte
  - Handlers
  - UTF8Handler
  :method: g_pack
  :description: |+
    
        g_pack(unpacked)
    Reverse operation of g_unpack
    
    
    
         # File vendor/rails/activesupport/lib/active_support/multibyte/handlers/utf8_handler.rb, line 421
    421:       def g_pack(unpacked)
    422:         unpacked.flatten
    423:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Handlers/UTF8Handler.html#M000540
- :tinyuri: http://tinyurl.com/49y6ws
  :path: 
  - ActiveSupport
  - Multibyte
  - Handlers
  - UTF8Handler
  :method: g_unpack
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Handlers/UTF8Handler.html#M000539
- :tinyuri: http://tinyurl.com/3eddx5
  :path: 
  - RailsFCGIHandler
  :method: gc_countdown
  :description: |+
    
        gc_countdown()
    
    
         # File vendor/rails/railties/lib/fcgi_handler.rb, line 212
    212:     def gc_countdown
    213:       if gc_request_period
    214:         @gc_request_countdown ||= gc_request_period
    215:         @gc_request_countdown -= 1
    216:         run_gc! if @gc_request_countdown <= 0
    217:       end
    218:     end
    
    
  :uri: http://api.rubyonrails.org/classes/RailsFCGIHandler.html#M000049
- :tinyuri: http://tinyurl.com/3sz82l
  :path: 
  - ActionController
  - Routing
  - Optimisation
  :method: generate_optimisation_block
  :description: |+
    
        generate_optimisation_block(route, kind)
    
    
        # File vendor/rails/actionpack/lib/action_controller/routing_optimisation.rb, line 13
    13:       def generate_optimisation_block(route, kind)
    14:         return "" unless route.optimise?
    15:         OPTIMISERS.inject("") do |memo, klazz|
    16:           memo << klazz.new(route, kind).source_code
    17:           memo
    18:         end
    19:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Routing/Optimisation.html#M000338
- :tinyuri: http://tinyurl.com/4nrv7k
  :path: 
  - Rails
  - SecretKeyGenerator
  :method: generate_secret
  :description: |+
    
        generate_secret()
    Generate a random secret key with the best possible method available on the
    current platform.
    
    
    
        # File vendor/rails/railties/lib/rails_generator/secret_key_generator.rb, line 18
    18:     def generate_secret
    19:       generator = GENERATORS.find do |g|
    20:         self.class.send("supports_#{g}?")
    21:       end
    22:       send("generate_secret_with_#{generator}")
    23:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/SecretKeyGenerator.html#M001597
- :tinyuri: http://tinyurl.com/4gph6c
  :path: 
  - Rails
  - SecretKeyGenerator
  :method: generate_secret_with_openssl
  :description: |+
    
        generate_secret_with_openssl()
    Generate a random secret key with OpenSSL. If OpenSSL is not already
    loaded, then this method will attempt to load it. LoadError will be raised
    if that fails.
    
    
    
        # File vendor/rails/railties/lib/rails_generator/secret_key_generator.rb, line 68
    68:     def generate_secret_with_openssl
    69:       require 'openssl'
    70:       if !File.exist?("/dev/urandom")
    71:         # OpenSSL transparently seeds the random number generator with
    72:         # data from /dev/urandom. On platforms where that is not
    73:         # available, such as Windows, we have to provide OpenSSL with
    74:         # our own seed. Unfortunately there's no way to provide a
    75:         # secure seed without OS support, so we'll have to do with
    76:         # rand() and Time.now.usec().
    77:         OpenSSL::Random.seed(rand(0).to_s + Time.now.usec.to_s)
    78:       end
    79:       data = OpenSSL::BN.rand(2048, -1, false).to_s
    80:       return OpenSSL::Digest::SHA512.new(data).hexdigest
    81:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/SecretKeyGenerator.html#M001600
- :tinyuri: http://tinyurl.com/42km3t
  :path: 
  - Rails
  - SecretKeyGenerator
  :method: generate_secret_with_prng
  :description: "\n  \n    generate_secret_with_prng()\n  \n  \n  \n\
    Generate a random secret key with Ruby\xE2\x80\x98s pseudo random number\n\
    generator, as well as some environment information.\n\n\n\
    This is the least cryptographically secure way to generate a secret key,\n\
    100:       sha << String(rand(0))\n\
    101:       sha << String($$)\n\
    102:       sha << @identifier\n\
    103:       return sha.hexdigest\n\
    104:     end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/Rails/SecretKeyGenerator.html#M001602
- :tinyuri: http://tinyurl.com/3hv3h9
  :path: 
  - Rails
  - SecretKeyGenerator
  :method: generate_secret_with_secure_random
  :description: "\n  \n    generate_secret_with_secure_random()\n  \n  \n  \n\
    Generate a random secret key with Ruby 1.9\xE2\x80\x98s SecureRandom module.\n\
    60:     def generate_secret_with_secure_random\n\
    61:       require 'securerandom'\n\
    62:       return SecureRandom.hex(64)\n\
    63:     end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/Rails/SecretKeyGenerator.html#M001599
- :tinyuri: http://tinyurl.com/3w2vjp
  :path: 
  - Rails
  - SecretKeyGenerator
  :method: generate_secret_with_urandom
  :description: |+
    
        generate_secret_with_urandom()
    Generate a random secret key with /dev/urandom. Raises SystemCallError on
    failure.
    
    
    
        # File vendor/rails/railties/lib/rails_generator/secret_key_generator.rb, line 85
    85:     def generate_secret_with_urandom
    86:       return File.read("/dev/urandom", 64).unpack("H*")[0]
    87:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/SecretKeyGenerator.html#M001601
- :tinyuri: http://tinyurl.com/4rcloo
  :path: 
  - Rails
  - SecretKeyGenerator
  :method: generate_secret_with_win32_api
  :description: 
  :uri: http://api.rubyonrails.org/classes/Rails/SecretKeyGenerator.html#M001598
- :tinyuri: http://tinyurl.com/3pxhzh
  :path: 
  - ActiveRecord
  - AttributeMethods
  - ClassMethods
  :method: generated_methods?
  :description: |+
    
        generated_methods?()
    
    
        # File vendor/rails/activerecord/lib/active_record/attribute_methods.rb, line 55
    55:       def generated_methods?
    56:         !generated_methods.empty?
    57:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/AttributeMethods/ClassMethods.html#M001096
- :tinyuri: http://tinyurl.com/4ka7ng
  :path: 
  - ActionController
  - Routing
  - Optimisation
  - Optimiser
  :method: generation_code
  :description: |+
    
        generation_code()
    
    
        # File vendor/rails/actionpack/lib/action_controller/routing_optimisation.rb, line 32
    32:         def generation_code
    33:           'nil'
    34:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Routing/Optimisation/Optimiser.html#M000346
- :tinyuri: http://tinyurl.com/465clx
  :path: 
  - ActionController
  - Routing
  - Optimisation
  - PositionalArguments
  :method: generation_code
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionController/Routing/Optimisation/PositionalArguments.html#M000340
- :tinyuri: http://tinyurl.com/5yf2pw
  :path: 
  - ActionController
  - Routing
  - Optimisation
  - PositionalArgumentsWithAdditionalParams
  :method: generation_code
  :description: |+
    
        generation_code()
    This case uses almost the same code as positional arguments, but add an
    args.last.to_query on the end
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/routing_optimisation.rb, line 105
    105:         def generation_code
    106:           super.insert(-2, '?#{args.last.to_query}')
    107:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Routing/Optimisation/PositionalArgumentsWithAdditionalParams.html#M000342
- :tinyuri: http://tinyurl.com/3g5op7
  :path: 
  - ActiveResource
  - CustomMethods
  :method: get
  :description: |+
    
        get(method_name, options = {})
    
    
        # File vendor/rails/activeresource/lib/active_resource/custom_methods.rb, line 42
    42:           def get(method_name, options = {})
    43:             connection.get(custom_method_collection_url(method_name, options), headers)
    44:           end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/CustomMethods.html#M000779
- :tinyuri: http://tinyurl.com/4bfeu6
  :path: 
  - ActiveResource
  - CustomMethods
  - InstanceMethods
  :method: get
  :description: |+
    
        get(method_name, options = {})
    
    
        # File vendor/rails/activeresource/lib/active_resource/custom_methods.rb, line 74
    74:       def get(method_name, options = {})
    75:         connection.get(custom_method_element_url(method_name, options), self.class.headers)
    76:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/CustomMethods/InstanceMethods.html#M000784
- :tinyuri: http://tinyurl.com/2s5rtz
  :path: 
  - ActiveResource
  - Connection
  :method: get
  :description: |+
    
        get(path, headers = {})
    Execute a GET request. Used to get
    (find) resources.
    
    
    
        # File vendor/rails/activeresource/lib/active_resource/connection.rb, line 82
    82:     def get(path, headers = {})
    83:       format.decode(request(:get, path, build_request_headers(headers)).body)
    84:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Connection.html#M000870
- :tinyuri: http://tinyurl.com/3uajrn
  :path: 
  - ActionController
  - Integration
  - Session
  :method: get
  :description: "\n  \n    get(path, parameters = nil, headers = nil)\n  \n  \n  \n\
    Performs a GET request with the given parameters. The parameters may be\n\
    nil, a Hash, or a string that is appropriately encoded\n\
    (application/x-www-form-urlencoded or multipart/form-data). The headers\n\
    should be a hash. The keys will automatically be upcased, with the prefix\n\
    \xE2\x80\x98HTTP_\xE2\x80\x99 added if needed.\n\n\n\
    171:       def get(path, parameters = nil, headers = nil)\n\
    172:         process :get, path, parameters, headers\n\
    173:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionController/Integration/Session.html#M000245
- :tinyuri: http://tinyurl.com/3n85qf
  :path: 
  - ActionController
  - AbstractRequest
  :method: get?
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionController/AbstractRequest.html#M000395
- :tinyuri: http://tinyurl.com/4zhsve
  :path: 
  - ActionController
  - Integration
  - Session
  :method: get_via_redirect
  :description: |+
    
        get_via_redirect(path, parameters = nil, headers = nil)
    Performs a GET request, following any subsequent redirect. See request_via_redirect() for more
    information.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/integration.rb, line 136
    136:       def get_via_redirect(path, parameters = nil, headers = nil)
    137:         request_via_redirect(:get, path, parameters, headers)
    138:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Integration/Session.html#M000240
- :tinyuri: http://tinyurl.com/44dxsv
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Numeric
  - Bytes
  :method: gigabyte
  :description: |
    
        gigabyte()
    Alias for gigabytes
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Numeric/Bytes.html#M000665
- :tinyuri: http://tinyurl.com/3jnf9b
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Numeric
  - Bytes
  :method: gigabytes
  :description: |+
    
        gigabytes()
    
      This method is also aliased as
      gigabyte
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/numeric/bytes.rb, line 21
    21:         def gigabytes
    22:           self * 1024.megabytes 
    23:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Numeric/Bytes.html#M000664
- :tinyuri: http://tinyurl.com/4fx5ea
  :path: 
  - Builder
  - CSS
  :method: group!
  :description: 
  :uri: http://api.rubyonrails.org/classes/Builder/CSS.html#M000906
- :tinyuri: http://tinyurl.com/4t5xgq
  :path: 
  - Enumerable
  :method: group_by
  :description: |+
    
        group_by() {|element| ...}
    Collect an enumerable into sets, grouped by the result of a block. Useful,
    for example, for grouping records by date.
    
    
    e.g.
    
    
      latest_transcripts.group_by(&:day).each do |day, transcripts|
        p "#{day} -> #{transcripts.map(&:class) * ', '}"
      end
      "2006-03-01 -> Transcript"
      "2006-02-28 -> Transcript"
      "2006-02-27 -> Transcript, Transcript"
      "2006-02-26 -> Transcript, Transcript"
      "2006-02-25 -> Transcript"
      "2006-02-24 -> Transcript, Transcript"
      "2006-02-23 -> Transcript"
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/enumerable.rb, line 17
    17:   def group_by
    18:     inject({}) do |groups, element|
    19:       (groups[yield(element)] ||= []) << element
    20:       groups
    21:     end
    22:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Enumerable.html#M001645
- :tinyuri: http://tinyurl.com/3qptaj
  :path: 
  - ActiveSupport
  - Multibyte
  - Chars
  :method: gsub
  :description: |+
    
        gsub(*a, &b)
    Gsub works exactly the same as gsub on a
    normal string.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/multibyte/chars.rb, line 67
    67:     def gsub(*a, &b); @string.gsub(*a, &b).chars; end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Chars.html#M000552
- :tinyuri: http://tinyurl.com/4m2jfz
  :path: 
  - Rails
  - Generator
  - Commands
  - Base
  :method: gsub_file
  :description: |+
    
        gsub_file(relative_destination, regexp, *args, &block)
    
    
        # File vendor/rails/railties/lib/rails_generator/commands.rb, line 87
    87:           def gsub_file(relative_destination, regexp, *args, &block)
    88:             path = destination_path(relative_destination)
    89:             content = File.read(path).gsub(regexp, *args, &block)
    90:             File.open(path, 'wb') { |file| file.write(content) }
    91:           end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Commands/Base.html#M001508
- :tinyuri: http://tinyurl.com/537ezy
  :path: 
  - ActionController
  - Routing
  - Optimisation
  - PositionalArguments
  :method: guard_condition
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionController/Routing/Optimisation/PositionalArguments.html#M000339
- :tinyuri: http://tinyurl.com/3f9zt6
  :path: 
  - ActionController
  - Routing
  - Optimisation
  - Optimiser
  :method: guard_condition
  :description: |+
    
        guard_condition()
    
    
        # File vendor/rails/actionpack/lib/action_controller/routing_optimisation.rb, line 28
    28:         def guard_condition
    29:           'false'
    30:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Routing/Optimisation/Optimiser.html#M000345
- :tinyuri: http://tinyurl.com/4aj9y5
  :path: 
  - ActionController
  - Routing
  - Optimisation
  - PositionalArgumentsWithAdditionalParams
  :method: guard_condition
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionController/Routing/Optimisation/PositionalArgumentsWithAdditionalParams.html#M000341
- :tinyuri: http://tinyurl.com/3tedvm
  :path: 
  - ActionController
  - Dispatcher
  :method: handle_request
  :description: |+
    
        handle_request()
    
    
         # File vendor/rails/actionpack/lib/action_controller/dispatcher.rb, line 169
    169:       def handle_request
    170:         @controller = Routing::Routes.recognize(@request)
    171:         @controller.process(@request, @response).out(@output)
    172:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Dispatcher.html#M000476
- :tinyuri: http://tinyurl.com/4oo43l
  :path: 
  - ActiveSupport
  - Multibyte
  - Chars
  :method: handler
  :description: |+
    
        handler()
    Returns the proper handler for the
    contained string depending on $KCODE and the encoding of the string. This
    method is used internally to always redirect messages to the proper classes
    depending on the context.
    
    
    
         # File vendor/rails/activesupport/lib/active_support/multibyte/chars.rb, line 110
    110:     def handler
    111:       if utf8_pragma?
    112:         @@handler
    113:       else
    114:         ActiveSupport::Multibyte::Handlers::PassthruHandler
    115:       end
    116:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Chars.html#M000556
- :tinyuri: http://tinyurl.com/4hln2d
  :path: 
  - ActiveSupport
  - Multibyte
  - Chars
  :method: handler=
  :description: |+
    
        handler=(klass)
    Set the handler class for the Char
    objects.
    
    
    
         # File vendor/rails/activesupport/lib/active_support/multibyte/chars.rb, line 104
    104:     def self.handler=(klass)
    105:       @@handler = klass
    106:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Chars.html#M000555
- :tinyuri: http://tinyurl.com/43grwu
  :path: 
  - ActionView
  - Base
  :method: handler_for_extension
  :description: |+
    
        handler_for_extension(extension)
    
    
         # File vendor/rails/actionpack/lib/action_view/base.rb, line 255
    255:     def self.handler_for_extension(extension)
    256:       (extension && @@template_handlers[extension.to_sym]) || @@default_template_handlers
    257:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Base.html#M001089
- :tinyuri: http://tinyurl.com/2zosmv
  :path: 
  - ActiveRecord
  - Associations
  - ClassMethods
  :method: has_and_belongs_to_many
  :description: "\n  \n    has_and_belongs_to_many(association_id, options = {}, &extension)\n  \n  \n  \n\
    Associates two classes via an intermediate join table. Unless the join\n\
    table is explicitly specified as an option, it is guessed using the lexical\n\
    order of the class names. So a join between Developer and\n\
    Project will give the default join table name of\n\
    developers_projects because \"D\" outranks \"P\".\n\
    Note that this precedence is calculated using the < operator\n\
    for String. This means that if the strings are of different\n\
    lengths, and the strings are equal when compared up to the shortest length,\n\
    then the longer string is considered of higher lexical precedence than the\n\
    shorter one. For example, one would expect the tables paper_boxes\n\
    and papers to generate a join table name of\n\
    papers_paper_boxes because of the length of the name\n\
    paper_boxes, but it in fact generates a join table name of\n\
    paper_boxes_papers. Be aware of this caveat, and use the custom\n\
    join_table option if you need to.\n\n\n\
    Deprecated: Any additional fields added to the join table will be placed as\n\
    attributes when pulling records out through has_and_belongs_to_many\n\
    associations. Records returned from join tables with additional attributes\n\
    will be marked as ReadOnly (because we can\xE2\x80\x98t save changes to\n\
    the additional attributes). It\xE2\x80\x98s strongly recommended that you\n\
    upgrade any associations with attributes to a real join model (see\n\
    introduction).\n\n\n\
    Adds the following methods for retrieval and query: collection is\n\
    replaced with the symbol passed as the first argument, so has_and_belongs_to_many\n\
    :categories would add among others categories.empty?.\n\n\n\
    collection(force_reload = false) - returns an array of all the\n\
    associated objects. An empty array is returned if none are found.\n\n\n\
    collection<<(object, \xE2\x80\xA6) - adds one or more objects to\n\
    the collection by creating associations in the join table\n\
    (collection.push and collection.concat are aliases to\n\
    this method).\n\n\n\
    collection.delete(object, \xE2\x80\xA6) - removes one or more objects\n\
    from the collection by removing their associations from the join table.\n\
    This does not destroy the objects.\n\n\n\
    collection=objects - replaces the collection\xE2\x80\x98s content by\n\
    deleting and adding objects as appropriate.\n\n\n\
    collection_singular_ids - returns an array of the associated\n\
    objects\xE2\x80\x99 ids\n\n\n\
    collection_singular_ids=ids - replace the collection by the\n\
    objects identified by the primary keys in ids\n\n\n\
    collection.clear - removes every object from the collection. This\n\
    does not destroy the objects.\n\n\n\
    collection.empty? - returns true if there are no\n\
    associated objects.\n\n\n\
    collection.size - returns the number of associated objects.\n\n\n\
    collection.find(id) - finds an associated object responding to the\n\
    id and that meets the condition that it has to be associated with\n\
    this object.\n\n\n\
    collection.build(attributes = {}) - returns a new object of the\n\
    collection type that has been instantiated with attributes and\n\
    linked to this object through the join table, but has not yet been saved.\n\n\n\
    collection.create(attributes = {}) - returns a new object of the\n\
    collection type that has been instantiated with attributes, linked\n\
    to this object through the join table, and that has already been saved (if\n\
    it passed the validation).\n\n\n\n\n\
    Example: A Developer class declares has_and_belongs_to_many\n\
    :projects, which will add:\n\n\n\
    Developer#projects\n\n\n\
    Developer#projects<<\n\n\n\
    Developer#projects.delete\n\n\n\
    Developer#projects=\n\n\n\
    Developer#project_ids\n\n\n\
    Developer#project_ids=\n\n\n\
    Developer#projects.clear\n\n\n\
    Developer#projects.empty?\n\n\n\
    Developer#projects.size\n\n\n\
    Developer#projects.find(id)\n\n\n\
    Developer#projects.build (similar to\n\
    Project.new(\"project_id\" => id))\n\n\n\
    Developer#projects.create (similar to c =\n\
    Project.new(\"project_id\" => id); c.save; c)\n\n\n\n\n\
    The declaration may include an options hash to specialize the behavior of\n\
    the association.\n\n\n\
    Options are:\n\n\n\
    :class_name - specify the class name of the association. Use it\n\
    only if that name can\xE2\x80\x98t be inferred from the association name. So\n\
    has_and_belongs_to_many\n\
    :projects will by default be linked to the Project class, but\n\
    if the real class name is SuperProject, you\xE2\x80\x98ll have to\n\
    specify it with this option.\n\n\n\
    :join_table - specify the name of the join table if the default\n\
    based on lexical order isn\xE2\x80\x98t what you want. WARNING: If you\xE2\x80\x98re\n\
    overwriting the table name of either class, the table_name method\n\
    MUST be declared underneath any has_and_belongs_to_many\n\
    declaration in order to work.\n\n\n\
    :foreign_key - specify the foreign key used for the association.\n\
    By default this is guessed to be the name of this class in lower-case and\n\
    _id suffixed. So a Person class that makes a has_and_belongs_to_many\n\
    association will use person_id as the default\n\
    foreign_key.\n\n\n\
    :association_foreign_key - specify the association foreign key\n\
    used for the association. By default this is guessed to be the name of the\n\
    associated class in lower-case and _id suffixed. So if the\n\
    associated class is Project, the has_and_belongs_to_many\n\
    association will use project_id as the default association\n\
    foreign_key.\n\n\n\
    :conditions - specify the conditions that the associated object\n\
    must meet in order to be included as a WHERE SQL fragment, such as\n\
    authorized = 1.\n\n\n\
    :order - specify the order in which the associated objects are\n\
    returned as an ORDER BY SQL fragment, such as last_name,\n\
    first_name DESC\n\n\n\
    :uniq - if set to true, duplicate associated objects will\n\
    be ignored by accessors and query methods\n\n\n\
    :finder_sql - overwrite the default generated SQL statement used\n\
    to fetch the association with a manual statement\n\n\n\
    :delete_sql - overwrite the default generated SQL statement used\n\
    to remove links between the associated classes with a manual statement\n\n\n\
    :insert_sql - overwrite the default generated SQL statement used\n\
    to add links between the associated classes with a manual statement\n\n\n\
    :extend - anonymous module for extending the proxy, see\n\
    \"Association extensions\".\n\n\n\
    :include - specify second-order associations that should be eager\n\
    loaded when the collection is loaded.\n\n\n\
    :group: An attribute name by which the result should be grouped.\n\
    Uses the GROUP BY SQL-clause.\n\n\n\
    :limit: An integer determining the limit on the number of rows\n\
    that should be returned.\n\n\n\
    :offset: An integer determining the offset from where the rows\n\
    should be fetched. So at 5, it would skip the first 4 rows.\n\n\n\
    :select: By default, this is * as in SELECT *\n\
    FROM, but can be changed if, for example, you want to do a join but\n\
    not include the joined columns.\n\n\n\n\n\
    951:       def has_and_belongs_to_many(association_id, options = {}, &extension)\n\
    952:         reflection = create_has_and_belongs_to_many_reflection(association_id, options, &extension)\n\
    953:         \n\
    954:         add_multiple_associated_save_callbacks(reflection.name)\n\
    955:         collection_accessor_methods(reflection, HasAndBelongsToManyAssociation)\n\
    956: \n\
    957:         # Don't use a before_destroy callback since users' before_destroy\n\
    958:         # callbacks will be executed after the association is wiped out.\n\
    959:         old_method = \"destroy_without_habtm_shim_for_#{reflection.name}\"\n\
    960:         class_eval \"alias_method :\\#{old_method}, :destroy_without_callbacks\\ndef destroy_without_callbacks\\n\\#{reflection.name}.clear\\n\\#{old_method}\\nend\\n\" unless method_defined?(old_method)\n\
    961: \n\
    962:         add_association_callbacks(reflection.name, options)\n\
    963:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html#M001106
- :tinyuri: http://tinyurl.com/4vqz4t
  :path: 
  - ActiveRecord
  - Base
  :method: has_attribute?
  :description: |+
    
        has_attribute?(attr_name)
    Returns true if the given attribute is in the attributes hash
    
    
    
          # File vendor/rails/activerecord/lib/active_record/base.rb, line 2172
    2172:       def has_attribute?(attr_name)
    2173:         @attributes.has_key?(attr_name.to_s)
    2174:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001452
- :tinyuri: http://tinyurl.com/39he7r
  :path: 
  - ActiveRecord
  - Associations
  - ClassMethods
  :method: has_many
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html#M001103
- :tinyuri: http://tinyurl.com/2s9r3o
  :path: 
  - ActiveRecord
  - Associations
  - ClassMethods
  :method: has_one
  :description: "\n  \n    has_one(association_id, options = {})\n  \n  \n  \n\
    Adds the following methods for retrieval and query of a single associated\n\
    object: association is replaced with the symbol passed as the\n\
    first argument, so has_one\n\
    :manager would add among others manager.nil?.\n\n\n\
    association(force_reload = false) - returns the associated object.\n\
    nil is returned if none is found.\n\n\n\
    association=(associate) - assigns the associate object, extracts\n\
    the primary key, sets it as the foreign key, and saves the associate\n\
    object.\n\n\n\
    association.nil? - returns true if there is no associated\n\
    object.\n\n\n\
    build_association(attributes = {}) - returns a new object of the\n\
    associated type that has been instantiated with attributes and\n\
    linked to this object through a foreign key, but has not yet been saved.\n\
    Note: This ONLY works if an association already exists. It will NOT work if\n\
    the association is nil.\n\n\n\
    create_association(attributes = {}) - returns a new object of the\n\
    associated type that has been instantiated with attributes, linked\n\
    to this object through a foreign key, and that has already been saved (if\n\
    it passed the validation).\n\n\n\n\n\
    Example: An Account class declares has_one :beneficiary, which will\n\
    add:\n\n\n\
    Account#beneficiary (similar to Beneficiary.find(:first,\n\
    :conditions => \"account_id = #{id}\"))\n\n\n\
    Account#beneficiary=(beneficiary) (similar to\n\
    beneficiary.account_id = account.id; beneficiary.save)\n\n\n\
    Account#beneficiary.nil?\n\n\n\
    Account#build_beneficiary (similar to\n\
    Beneficiary.new(\"account_id\" => id))\n\n\n\
    Account#create_beneficiary (similar to b =\n\
    Beneficiary.new(\"account_id\" => id); b.save; b)\n\n\n\n\n\
    The declaration can also include an options hash to specialize the behavior\n\
    of the association.\n\n\n\
    Options are:\n\n\n\
    :class_name - specify the class name of the association. Use it\n\
    only if that name can\xE2\x80\x98t be inferred from the association name. So\n\
    has_one :manager will by\n\
    default be linked to the Manager class, but if the real class name\n\
    is Person, you\xE2\x80\x98ll have to specify it with this option.\n\n\n\
    :conditions - specify the conditions that the associated object\n\
    must meet in order to be included as a WHERE SQL fragment, such as\n\
    rank = 5.\n\n\n\
    :order - specify the order in which the associated objects are\n\
    returned as an ORDER BY SQL fragment, such as last_name,\n\
    first_name DESC\n\n\n\
    :dependent - if set to :destroy, the associated object is\n\
    destroyed when this object is. If set to :delete, the associated\n\
    object is deleted without calling its destroy method. If set to\n\
    :nullify, the associated object\xE2\x80\x98s foreign key is set to\n\
    NULL. Also, association is assigned.\n\n\n\
    :foreign_key - specify the foreign key used for the association.\n\
    By default this is guessed to be the name of this class in lower-case and\n\
    _id suffixed. So a Person class that makes a has_one association will use\n\
    person_id as the default foreign_key.\n\n\n\
    :include - specify second-order associations that should be eager\n\
    loaded when this object is loaded.\n\n\n\
    :as: Specifies a polymorphic interface (See belongs_to).\n\n\n\n\n\
    726:       def has_one(association_id, options = {})\n\
    727:         reflection = create_has_one_reflection(association_id, options)\n\
    728: \n\
    729:         module_eval do\n\
    730:           after_save \"association = instance_variable_get(\\\"@\\#{reflection.name}\\\")\\nif !association.nil? && (new_record? || association.new_record? || association[\\\"\\#{reflection.primary_key_name}\\\"] != id)\\nassociation[\\\"\\#{reflection.primary_key_name}\\\"] = id\\nassociation.save(true)\\nend\\n\"\n\
    731:         end\n\
    732:       \n\
    733:         association_accessor_methods(reflection, HasOneAssociation)\n\
    734:         association_constructor_method(:build,  reflection, HasOneAssociation)\n\
    735:         association_constructor_method(:create, reflection, HasOneAssociation)\n\
    736:         \n\
    737:         configure_dependency_for_has_one(reflection)\n\
    738:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html#M001104
- :tinyuri: http://tinyurl.com/4e3wz9
  :path: 
  - ActiveResource
  - Request
  :method: hash
  :description: |+
    
        hash()
    
    
        # File vendor/rails/activeresource/lib/active_resource/http_mock.rb, line 97
    97:     def hash
    98:       "#{path}#{method}#{headers}".hash
    99:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Request.html#M000866
- :tinyuri: http://tinyurl.com/3ww4fq
  :path: 
  - ActiveResource
  - Base
  :method: hash
  :description: |+
    
        hash()
    Delegates to id in order to allow two
    resources of the same type and id to work
    with something like:
    
    
      [Person.find(1), Person.find(2)] & [Person.find(1), Person.find(4)] # => [Person.find(1)]
    
    
    
         # File vendor/rails/activeresource/lib/active_resource/base.rb, line 592
    592:     def hash
    593:       id.hash
    594:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Base.html#M000846
- :tinyuri: http://tinyurl.com/3ptnez
  :path: 
  - ActiveRecord
  - Base
  :method: hash
  :description: |+
    
        hash()
    Delegates to id in order to allow two
    records of the same type and id to work
    with something like:
    
    
      [ Person.find(1), Person.find(2), Person.find(3) ] & [ Person.find(1), Person.find(4) ] # => [ Person.find(1) ]
    
    
    
          # File vendor/rails/activerecord/lib/active_record/base.rb, line 2201
    2201:       def hash
    2202:         id.hash
    2203:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001457
- :tinyuri: http://tinyurl.com/4l6djh
  :path: 
  - ActionController
  - Integration
  - Session
  :method: head
  :description: |+
    
        head(path, parameters = nil, headers = nil)
    Performs a HEAD request with the given parameters. See get() for more details.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/integration.rb, line 191
    191:       def head(path, parameters = nil, headers = nil)
    192:         process :head, path, parameters, headers
    193:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Integration/Session.html#M000249
- :tinyuri: http://tinyurl.com/52b8mx
  :path: 
  - ActionController
  - Base
  :method: head
  :description: |+
    
        head(*args)
    Return a response that has no content (merely headers). The options
    argument is interpreted to be a hash of header names and values. This
    allows you to easily return a response that consists only of significant
    headers:
    
    
      head :created, :location => person_path(@person)
    
    
    It can also be used to return exceptional conditions:
    
    
      return head(:method_not_allowed) unless request.post?
      return head(:bad_request) unless valid_request?
      render
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/base.rb, line 941
    941:       def head(*args)
    942:         if args.length > 2
    943:           raise ArgumentError, "too many arguments to head"
    944:         elsif args.empty?
    945:           raise ArgumentError, "too few arguments to head"
    946:         end
    947:         options = args.extract_options!
    948:         status = interpret_status(args.shift || options.delete(:status) || :ok)
    949: 
    950:         options.each do |key, value|
    951:           headers[key.to_s.dasherize.split(/-/).map { |v| v.capitalize }.join("-")] = value.to_s
    952:         end
    953: 
    954:         render :nothing => true, :status => status
    955:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Base.html#M000454
- :tinyuri: http://tinyurl.com/3v6pno
  :path: 
  - ActionController
  - AbstractRequest
  :method: head?
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionController/AbstractRequest.html#M000399
- :tinyuri: http://tinyurl.com/4qgfsn
  :path: 
  - ActiveResource
  - Base
  :method: headers
  :description: |+
    
        headers()
    
    
         # File vendor/rails/activeresource/lib/active_resource/base.rb, line 204
    204:       def headers
    205:         @headers ||= {}
    206:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Base.html#M000829
- :tinyuri: http://tinyurl.com/3o4bmg
  :path: 
  - ActionController
  - AbstractRequest
  :method: headers
  :description: |+
    
        headers()
    
    
        # File vendor/rails/actionpack/lib/action_controller/request.rb, line 64
    64:     def headers
    65:       @env
    66:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/AbstractRequest.html#M000400
- :tinyuri: http://tinyurl.com/5xzttv
  :path: 
  - vendor/rails/railties/lib/console_with_helpers.rb
  :method: helper
  :description: |+
    
        helper(*helper_names)
    
    
        # File vendor/rails/railties/lib/console_with_helpers.rb, line 13
    13: def helper(*helper_names)
    14:   returning @helper_proxy ||= Object.new do |helper|
    15:     helper_names.each { |h| helper.extend "#{h}_helper".classify.constantize }
    16:   end
    17: end
    
    
  :uri: http://api.rubyonrails.org/files/vendor/rails/railties/lib/console_with_helpers_rb.html#M000004
- :tinyuri: http://tinyurl.com/3kjl5c
  :path: 
  - ActionController
  - Helpers
  - ClassMethods
  :method: helper
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionController/Helpers/ClassMethods.html#M000283
- :tinyuri: http://tinyurl.com/4mvpbj
  :path: 
  - ActionController
  - Helpers
  - ClassMethods
  :method: helper_attr
  :description: |+
    
        helper_attr(*attrs)
    Declares helper accessors for
    controller attributes. For example, the following adds new name
    and name= instance methods to a controller and makes them
    available to the view:
    
    
      helper_attr :name
      attr_accessor :name
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/helpers.rb, line 167
    167:       def helper_attr(*attrs)
    168:         attrs.flatten.each { |attr| helper_method(attr, "#{attr}=") }
    169:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Helpers/ClassMethods.html#M000285
- :tinyuri: http://tinyurl.com/2s8ruo
  :path: 
  - ActionController
  - Helpers
  - ClassMethods
  :method: helper_method
  :description: |+
    
        helper_method(*methods)
    Declare a controller method as a helper. For example, the following
    makes the current_user controller method available to the view:
    
    
      class ApplicationController < ActionController::Base
        helper_method :current_user
        def current_user
          @current_user ||= User.find(session[:user])
        end
      end
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/helpers.rb, line 151
    151:       def helper_method(*methods)
    152:         methods.flatten.each do |method|
    153:           master_helper_module.module_eval "def \#{method}(*args, &block)\ncontroller.send(%(\#{method}), *args, &block)\nend\n"
    154:         end
    155:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Helpers/ClassMethods.html#M000284
- :tinyuri: http://tinyurl.com/3swrh5
  :path: 
  - ActionController
  - Base
  :method: hidden_actions
  :description: |+
    
        hidden_actions()
    Return an array containing the names of public methods that have been
    marked hidden from the action processor. By default, all methods defined in
    ActionController::Base and included modules are
    hidden. More methods can be hidden using hide_actions.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/base.rb, line 409
    409:       def hidden_actions
    410:         unless read_inheritable_attribute(:hidden_actions)
    411:           write_inheritable_attribute(:hidden_actions, ActionController::Base.public_instance_methods.map(&:to_s))
    412:         end
    413: 
    414:         read_inheritable_attribute(:hidden_actions)
    415:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Base.html#M000435
- :tinyuri: http://tinyurl.com/4o9hm4
  :path: 
  - ActionView
  - Helpers
  - FormHelper
  :method: hidden_field
  :description: |+
    
        hidden_field(object_name, method, options = {})
    Returns a hidden input tag tailored for accessing a specified attribute
    (identified by method) on an object assigned to the template
    (identified by object). Additional options on the input tag can be
    passed as a hash with options. These options will be tagged onto
    the HTML as an HTML element attribute as in the example shown.
    
    Examples
    
      hidden_field(:signup, :pass_confirm)
      # => <input type="hidden" id="signup_pass_confirm" name="signup[pass_confirm]" value="#{@signup.pass_confirm}" />
    
      hidden_field(:post, :tag_list)
      # => <input type="hidden" id="post_tag_list" name="post[tag_list]" value="#{@post.tag_list}" />
    
      hidden_field(:user, :token)
      # => <input type="hidden" id="user_token" name="user[token]" value="#{@user.token}" />
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/form_helper.rb, line 328
    328:       def hidden_field(object_name, method, options = {})
    329:         InstanceTag.new(object_name, method, self, nil, options.delete(:object)).to_input_field_tag("hidden", options)
    330:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/FormHelper.html#M000925
- :tinyuri: http://tinyurl.com/3ludfu
  :path: 
  - ActionView
  - Helpers
  - FormTagHelper
  :method: hidden_field_tag
  :description: "\n  \n    hidden_field_tag(name, value = nil, options = {})\n  \n  \n  \n\
    Creates a hidden form input field used to transmit data that would be lost\n\
    due to HTTP\xE2\x80\x98s statelessness or data that should be hidden from the\n\
    user.\n\n\
    Options\n\n\
    Creates standard HTML attributes for the tag.\n\n\n\n\
    133:       def hidden_field_tag(name, value = nil, options = {})\n\
    134:         text_field_tag(name, value, options.stringify_keys.update(\"type\" => \"hidden\"))\n\
    135:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/FormTagHelper.html#M001039
- :tinyuri: http://tinyurl.com/4h73kt
  :path: 
  - ActionView
  - Helpers
  - PrototypeHelper
  - JavaScriptGenerator
  - GeneratorMethods
  :method: hide
  :description: |+
    
        hide(*ids)
    Hides the visible DOM elements with the given ids.
    
    
    Example:
    
    
     # Hide a few people
     # Generates: ["person_29", "person_9", "person_0"].each(Element.hide);
     page.hide 'person_29', 'person_9', 'person_0'
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/prototype_helper.rb, line 810
    810:           def hide(*ids)
    811:             loop_on_multiple_args 'Element.hide', ids           
    812:           end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#M000982
- :tinyuri: http://tinyurl.com/4328zd
  :path: 
  - BlankSlate
  :method: hide
  :description: "\n  \n    hide(name)\n  \n  \n  \n\
    Hide the method named name in the BlankSlate class. Don\xE2\x80\x98t hide instance_eval or any\n\
    22:     def hide(name)\n\
    23:       if instance_methods.include?(name.to_s) and\n\
    24:         name !~ /^(__|instance_eval)/\n\
    25:         @hidden_methods ||= {}\n\
    26:         @hidden_methods[name.to_sym] = instance_method(name)\n\
    27:         undef_method name\n\
    28:       end\n\
    29:     end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/BlankSlate.html#M000106
- :tinyuri: http://tinyurl.com/4vbvnc
  :path: 
  - ActionController
  - Base
  :method: hide_action
  :description: |+
    
        hide_action(*names)
    Hide each of the given methods from being callable as actions.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/base.rb, line 418
    418:       def hide_action(*names)
    419:         write_inheritable_attribute(:hidden_actions, hidden_actions | names.map(&:to_s))
    420:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Base.html#M000436
- :tinyuri: http://tinyurl.com/3zcmvq
  :path: 
  - ActionView
  - Helpers
  - TextHelper
  :method: highlight
  :description: "\n  \n    highlight(text, phrases, highlighter = '<strong class=\"highlight\">\\1</strong>')\n  \n  \n  \n\
    Highlights one or more phrases everywhere in text by\n\
    inserting it into a highlighter string. The highlighter can be\n\
    specialized by passing highlighter as a single-quoted string with\n\
    \\1 where the phrase is to be inserted (defaults to \xE2\x80\x99<strong\n\
    class=\"highlight\">\\1</strong>\xE2\x80\x99)\n\n\
    71:       def highlight(text, phrases, highlighter = '<strong class=\"highlight\">\\1</strong>')\n\
    72:         if text.blank? || phrases.blank?\n\
    73:           text\n\
    74:         else\n\
    75:           match = Array(phrases).map { |p| Regexp.escape(p) }.join('|')\n\
    76:           text.gsub(/(#{match})/i, highlighter)\n\
    77:         end\n\
    78:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/TextHelper.html#M001050
- :tinyuri: http://tinyurl.com/4dmd3p
  :path: 
  - ActionController
  - AbstractRequest
  :method: host
  :description: |+
    
        host()
    Returns the host for this
    request, such as example.com.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/request.rb, line 172
    172:     def host
    173:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/AbstractRequest.html#M000413
- :tinyuri: http://tinyurl.com/3whzy9
  :path: 
  - ActionController
  - Integration
  - Session
  :method: host!
  :description: |+
    
        host!(name)
    Set the host name to use in the next request.
    
    
      session.host! "www.example.com"
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/integration.rb, line 111
    111:       def host!(name)
    112:         @host = name
    113:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Integration/Session.html#M000237
- :tinyuri: http://tinyurl.com/3pf4xy
  :path: 
  - ActionController
  - AbstractRequest
  :method: host_with_port
  :description: |+
    
        host_with_port()
    Returns a host:port string for this request, such
    as example.com or example.com:8080.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/request.rb, line 177
    177:     def host_with_port
    178:       @host_with_port ||= host + port_string
    179:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/AbstractRequest.html#M000414
- :tinyuri: http://tinyurl.com/4kor5x
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Numeric
  - Time
  :method: hour
  :description: |
    
        hour()
    Alias for hours
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Numeric/Time.html#M000643
- :tinyuri: http://tinyurl.com/5ytm7g
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Numeric
  - Time
  :method: hours
  :description: |+
    
        hours()
    
      This method is also aliased as
      hour
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/numeric/time.rb, line 43
    43:         def hours
    44:           ActiveSupport::Duration.new(self * 3600, [[:seconds, self * 3600]])
    45:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Numeric/Time.html#M000642
- :tinyuri: http://tinyurl.com/3gkb6o
  :path: 
  - ActionController
  - TestProcess
  :method: html_document
  :description: |+
    
        html_document()
    
    
         # File vendor/rails/actionpack/lib/action_controller/test_process.rb, line 450
    450:     def html_document
    451:       xml = @response.content_type =~ /xml$/
    452:       @html_document ||= HTML::Document.new(@response.body, false, xml)
    453:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/TestProcess.html#M000200
- :tinyuri: http://tinyurl.com/2pl3wa
  :path: 
  - ERB
  - Util
  :method: html_escape
  :description: |+
    
        html_escape(s)
    
    
       # File vendor/rails/actionpack/lib/action_view/template_handlers/erb.rb, line 7
    7:     def html_escape(s)
    8:       s.to_s.gsub(/[&"><]/) { |special| HTML_ESCAPE[special] }
    9:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ERB/Util.html#M000148
- :tinyuri: http://tinyurl.com/4buybn
  :path: 
  - ActionController
  - Integration
  - Session
  :method: https!
  :description: |+
    
        https!(flag=true)
    Specify whether or not the session should mimic a secure HTTPS request.
    
    
      session.https!
      session.https!(false)
    
    
    
        # File vendor/rails/actionpack/lib/action_controller/integration.rb, line 95
    95:       def https!(flag=true)
    96:         @https = flag
    97:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Integration/Session.html#M000235
- :tinyuri: http://tinyurl.com/3nmp7w
  :path: 
  - ActionController
  - Integration
  - Session
  :method: https?
  :description: |+
    
        https?()
    Return true if the session is mimicing a secure HTTPS request.
    
    
      if session.https?
        ...
      end
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/integration.rb, line 104
    104:       def https?
    105:         @https
    106:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Integration/Session.html#M000236
- :tinyuri: http://tinyurl.com/4zwfcv
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - Column
  :method: human_name
  :description: |+
    
        human_name()
    Returns the human name of the column name.
    
    Examples
    
     Column.new('sales_stage', ...).human_name #=> 'Sales stage'
    
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 96
    96:       def human_name
    97:         Base.human_attribute_name(@name)
    98:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/Column.html#M001203
- :tinyuri: http://tinyurl.com/ywg75e
  :path: 
  - ActiveSupport
  - CoreExtensions
  - String
  - Inflections
  :method: humanize
  :description: |+
    
        humanize()
    Capitalizes the first word and turns underscores into spaces and strips
    _id. Like titleize, this is meant
    for creating pretty output.
    
    
    Examples
    
    
      "employee_salary" #=> "Employee salary"
      "author_id" #=> "Author"
    
    
    
         # File vendor/rails/activesupport/lib/active_support/core_ext/string/inflections.rb, line 124
    124:         def humanize
    125:           Inflector.humanize(self)
    126:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/String/Inflections.html#M000751
- :tinyuri: http://tinyurl.com/5x4afe
  :path: 
  - Inflector
  :method: humanize
  :description: |+
    
        humanize(lower_case_and_underscored_word)
    Capitalizes the first word and turns underscores into spaces and strips
    _id. Like titleize, this is meant for
    creating pretty output.
    
    
    Examples
    
    
      "employee_salary" #=> "Employee salary"
      "author_id" #=> "Author"
    
    
    
         # File vendor/rails/activesupport/lib/active_support/inflector.rb, line 197
    197:   def humanize(lower_case_and_underscored_word)
    198:     lower_case_and_underscored_word.to_s.gsub(/_id$/, "").gsub(/_/, " ").capitalize
    199:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Inflector.html#M001623
- :tinyuri: http://tinyurl.com/3k5yns
  :path: 
  - ActiveRecord
  - Base
  :method: id
  :description: "\n  \n    id()\n  \n  \n  \n\
    A model instance\xE2\x80\x98s primary key is always available as model.id\n\
    1935:       def id\n\
    1936:         attr_name = self.class.primary_key\n\
    1937:         column = column_for_attribute(attr_name)\n\
    1938: \n\
    1939:         self.class.send(:define_read_method, :id, attr_name, column)\n\
    1940:         # now that the method exists, call it\n\
    1941:         self.send attr_name.to_sym\n\
    1942: \n\
    1943:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001426
- :tinyuri: http://tinyurl.com/4feosr
  :path: 
  - ActiveResource
  - Base
  :method: id
  :description: |+
    
        id()
    Get the id attribute of the
    resource.
    
    
    
         # File vendor/rails/activeresource/lib/active_resource/base.rb, line 545
    545:     def id
    546:       attributes[self.class.primary_key]
    547:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Base.html#M000841
- :tinyuri: http://tinyurl.com/4y9tqb
  :path: 
  - Builder
  - CSS
  :method: id!
  :description: |+
    
        id!(arg, &block)
    
    
         # File vendor/rails/activesupport/lib/active_support/vendor/builder-2.1.2/builder/css.rb, line 138
    138:     def id!(arg, &block)
    139:       _start_container('#'+arg.to_s, nil, block_given?)
    140:       _css_block(block) if block
    141:       _unify_block
    142:       self
    143:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Builder/CSS.html#M000903
- :tinyuri: http://tinyurl.com/4tjjva
  :path: 
  - ActiveRecord
  - Base
  :method: id=
  :description: |+
    
        id=(value)
    Sets the primary ID.
    
    
    
          # File vendor/rails/activerecord/lib/active_record/base.rb, line 1960
    1960:       def id=(value)
    1961:         write_attribute(self.class.primary_key, value)
    1962:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001428
- :tinyuri: http://tinyurl.com/3r7fp3
  :path: 
  - ActiveResource
  - Base
  :method: id=
  :description: |+
    
        id=(id)
    Set the id attribute of the
    resource.
    
    
    
         # File vendor/rails/activeresource/lib/active_resource/base.rb, line 550
    550:     def id=(id)
    551:       attributes[self.class.primary_key] = id
    552:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Base.html#M000842
- :tinyuri: http://tinyurl.com/4mh5u2
  :path: 
  - ActiveResource
  - Base
  :method: id_from_response
  :description: |+
    
        id_from_response(response)
    Takes a response from a typical create post
    and pulls the ID out
    
    
    
         # File vendor/rails/activeresource/lib/active_resource/base.rb, line 817
    817:       def id_from_response(response)
    818:         response['Location'][/\/([^\/]*?)(\.\w+)?$/, 1]
    819:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Base.html#M000859
- :tinyuri: http://tinyurl.com/53mxwz
  :path: 
  - Rails
  - Generator
  - Commands
  - Create
  :method: identical?
  :description: 
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Commands/Create.html#M001524
- :tinyuri: http://tinyurl.com/3fo5an
  :path: 
  - Fixtures
  :method: identify
  :description: |+
    
        identify(label)
    Returns a consistent identifier for label. This will always be a
    positive integer, and will always be the same for a given label, assuming
    the same OS, platform, and version of Ruby.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/fixtures.rb, line 536
    536:   def self.identify(label)
    537:     label.to_s.hash.abs
    538:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Fixtures.html#M000157
- :tinyuri: http://tinyurl.com/3ttxd6
  :path: 
  - ActionView
  - Helpers
  - AssetTagHelper
  :method: image_path
  :description: |+
    
        image_path(source)
    Computes the path to an image asset in the public images directory. Full
    paths from the document root will be passed through. Used internally by image_tag to build the image path.
    
    Examples
    
      image_path("edit")                                         # => /images/edit
      image_path("edit.png")                                     # => /images/edit.png
      image_path("icons/edit.png")                               # => /images/icons/edit.png
      image_path("/icons/edit.png")                              # => /icons/edit.png
      image_path("http://www.railsapplication.com/img/edit.png") # => http://www.railsapplication.com/img/edit.png
    
    
      This method is also aliased as
      path_to_image
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/asset_tag_helper.rb, line 344
    344:       def image_path(source)
    345:         compute_public_path(source, 'images')
    346:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/AssetTagHelper.html#M001029
- :tinyuri: http://tinyurl.com/4p5nz5
  :path: 
  - ActionView
  - Helpers
  - FormTagHelper
  :method: image_submit_tag
  :description: |+
    
        image_submit_tag(source, options = {})
    Displays an image which when clicked will submit the form.
    
    
    source is passed to AssetTagHelper#image_path
    
    Options
    
    :disabled - If set to true, the user will not be able to use this
    input.
    
    
    Any other key creates standard HTML options for the tag.
    
    
    
    Examples
    
      image_submit_tag("login.png")
      # => <input src="/images/login.png" type="image" />
    
      image_submit_tag("purchase.png"), :disabled => true
      # => <input disabled="disabled" src="/images/purchase.png" type="image" />
    
      image_submit_tag("search.png"), :class => 'search-button'
      # => <input class="search-button" src="/images/search.png" type="image" />
    
      image_submit_tag("agree.png"), :disabled => true, :class => "agree-disagree-button"
      # => <input class="agree-disagree-button" disabled="disabled" src="/images/agree.png" type="image" />
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/form_tag_helper.rb, line 363
    363:       def image_submit_tag(source, options = {})
    364:         tag :input, { "type" => "image", "src" => path_to_image(source) }.update(options.stringify_keys)
    365:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/FormTagHelper.html#M001046
- :tinyuri: http://tinyurl.com/27smek
  :path: 
  - ActionView
  - Helpers
  - AssetTagHelper
  :method: image_tag
  :description: |+
    
        image_tag(source, options = {})
    Returns an html image tag for the source. The source can
    be a full path or a file that exists in your public images directory.
    
    Options
    
    You can add HTML attributes using the options. The
    options supports three additional keys for convenience and
    conformance:
    
    
    :alt - If no alt text is given, the file name part of the
    source is used (capitalized and without the extension)
    
    
    :size - Supplied as "{Width}x{Height}", so
    "30x45" becomes width="30" and height="45".
    :size will be ignored if the value is not in the correct format.
    
    
    :mouseover - Set an alternate image to be used when the
    onmouseover event is fired, and sets the original image to be replaced
    onmouseout. This can be used to implement an easy image toggle that fires
    on onmouseover.
    
    
    
    Examples
    
     image_tag("icon")  # =>
       <img src="/images/icon" alt="Icon" />
     image_tag("icon.png")  # =>
       <img src="/images/icon.png" alt="Icon" />
     image_tag("icon.png", :size => "16x10", :alt => "Edit Entry")  # =>
       <img src="/images/icon.png" width="16" height="10" alt="Edit Entry" />
     image_tag("/icons/icon.gif", :size => "16x16")  # =>
       <img src="/icons/icon.gif" width="16" height="16" alt="Icon" />
     image_tag("/icons/icon.gif", :height => '32', :width => '32') # =>
       <img alt="Icon" height="32" src="/icons/icon.gif" width="32" />
     image_tag("/icons/icon.gif", :class => "menu_icon") # =>
       <img alt="Icon" class="menu_icon" src="/icons/icon.gif" />
     image_tag("mouse.png", :mouseover => "/images/mouse_over.png") # =>
       <img src="/images/mouse.png" onmouseover="this.src='/images/mouse_over.png'" onmouseout="this.src='/images/mouse.png'" alt="Mouse" />
     image_tag("mouse.png", :mouseover => image_path("mouse_over.png")) # =>
       <img src="/images/mouse.png" onmouseover="this.src='/images/mouse_over.png'" onmouseout="this.src='/images/mouse.png'" alt="Mouse" />
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/asset_tag_helper.rb, line 382
    382:       def image_tag(source, options = {})
    383:         options.symbolize_keys!
    384: 
    385:         options[:src] = path_to_image(source)
    386:         options[:alt] ||= File.basename(options[:src], '.*').split('.').first.capitalize
    387: 
    388:         if size = options.delete(:size)
    389:           options[:width], options[:height] = size.split("x") if size =~ %r{^\d+x\d+$}
    390:         end
    391: 
    392:         if mouseover = options.delete(:mouseover)
    393:           options[:onmouseover] = "this.src='#{image_path(mouseover)}'"
    394:           options[:onmouseout]  = "this.src='#{image_path(options[:src])}'"
    395:         end
    396: 
    397:         tag("img", options)
    398:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/AssetTagHelper.html#M001031
- :tinyuri: http://tinyurl.com/43veee
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Date
  - Calculations
  :method: in
  :description: |
    
        in(seconds)
    Alias for since
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Date/Calculations.html#M000682
- :tinyuri: http://tinyurl.com/3j8srr
  :path: 
  - ActiveSupport
  - CoreExtensions
  - DateTime
  - Calculations
  :method: in
  :description: |
    
        in(seconds)
    Alias for since
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/DateTime/Calculations.html#M000727
- :tinyuri: http://tinyurl.com/4xdnua
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Calculations
  :method: in
  :description: |
    
        in(seconds)
    Alias for since
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Calculations.html#M000579
- :tinyuri: http://tinyurl.com/4sne29
  :path: 
  - ActiveSupport
  - Multibyte
  - Handlers
  - UTF8Handler
  :method: in_char_class?
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Handlers/UTF8Handler.html#M000537
- :tinyuri: http://tinyurl.com/236mxa
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Array
  - Grouping
  :method: in_groups_of
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Array/Grouping.html#M000636
- :tinyuri: http://tinyurl.com/4llxyy
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Range
  - IncludeRange
  :method: include_with_range?
  :description: |+
    
        include_with_range?(value)
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/range/include_range.rb, line 10
    10:         def include_with_range?(value)
    11:           if value.is_a?(::Range)
    12:             operator = exclude_end? ? :< : :<=
    13:             end_value = value.exclude_end? ? last.succ : last
    14:             include?(value.first) && (value.last <=> end_value).send(operator, 0)
    15:           else
    16:             include_without_range?(value)
    17:           end
    18:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Range/IncludeRange.html#M000562
- :tinyuri: http://tinyurl.com/52ps3h
  :path: 
  - Rails
  - Generator
  - Lookup
  :method: included
  :description: |+
    
        included(base)
    
    
        # File vendor/rails/railties/lib/rails_generator/lookup.rb, line 51
    51:       def self.included(base)
    52:         base.extend(ClassMethods)
    53:         base.use_component_sources!
    54:       end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Lookup.html#M001531
- :tinyuri: http://tinyurl.com/3hgh2p
  :path: 
  - ActiveResource
  - CustomMethods
  :method: included
  :description: |+
    
        included(within)
    
    
        # File vendor/rails/activeresource/lib/active_resource/custom_methods.rb, line 34
    34:     def self.included(within)
    35:       within.class_eval do
    36:         extend ActiveResource::CustomMethods::ClassMethods
    37:         include ActiveResource::CustomMethods::InstanceMethods
    38: 
    39:         class << self
    40:           alias :orig_delete :delete
    41: 
    42:           def get(method_name, options = {})
    43:             connection.get(custom_method_collection_url(method_name, options), headers)
    44:           end
    45: 
    46:           def post(method_name, options = {}, body = '')
    47:             connection.post(custom_method_collection_url(method_name, options), body, headers)
    48:           end
    49: 
    50:           def put(method_name, options = {}, body = '')
    51:             connection.put(custom_method_collection_url(method_name, options), body, headers)
    52:           end
    53: 
    54:           # Need to jump through some hoops to retain the original class 'delete' method
    55:           def delete(custom_method_name, options = {})
    56:             if (custom_method_name.is_a?(Symbol))
    57:               connection.delete(custom_method_collection_url(custom_method_name, options), headers)
    58:             else
    59:               orig_delete(custom_method_name, options)
    60:             end
    61:           end
    62:         end
    63:       end
    64:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/CustomMethods.html#M000778
- :tinyuri: http://tinyurl.com/4cq77o
  :path: 
  - ActionController
  - TestProcess
  :method: included
  :description: |+
    
        included(base)
    
    
         # File vendor/rails/actionpack/lib/action_controller/test_process.rb, line 359
    359:     def self.included(base)
    360:       # execute the request simulating a specific http method and set/volley the response
    361:       %w( get post put delete head ).each do |method|
    362:         base.class_eval "def \#{method}(action, parameters = nil, session = nil, flash = nil)\n@request.env['REQUEST_METHOD'] = \"\#{method.upcase}\" if defined?(@request)\nprocess(action, parameters, session, flash)\nend\n", __FILE__, __LINE__
    363:       end
    364:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/TestProcess.html#M000189
- :tinyuri: http://tinyurl.com/3vlc58
  :path: 
  - Rails
  - Generator
  - Commands
  :method: included
  :description: |+
    
        included(base)
    Even more convenient access to commands. Include Commands in the generator Base class to get a nice command instance method which returns a delegate
    for the requested command.
    
    
    
        # File vendor/rails/railties/lib/rails_generator/commands.rb, line 20
    20:       def self.included(base)
    21:         base.send(:define_method, :command) do |command|
    22:           Commands.instance(command, self)
    23:         end
    24:       end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Commands.html#M001490
- :tinyuri: http://tinyurl.com/4qv2a7
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Conversions
  :method: included
  :description: |+
    
        included(base)
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/time/conversions.rb, line 15
    15:         def self.included(base)
    16:           base.class_eval do
    17:             alias_method :to_default_s, :to_s
    18:             alias_method :to_s, :to_formatted_s
    19:           end
    20:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Conversions.html#M000568
- :tinyuri: http://tinyurl.com/3ozv4x
  :path: 
  - ActiveSupport
  - CoreExtensions
  - DateTime
  - Conversions
  :method: included
  :description: |+
    
        included(base)
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/date_time/conversions.rb, line 6
     6:         def self.included(base)
     7:           base.class_eval do
     8:             alias_method :to_datetime_default_s, :to_s
     9:             alias_method :to_s, :to_formatted_s
    10:             alias_method :default_inspect, :inspect
    11:             alias_method :inspect, :readable_inspect
    12: 
    13:             # Ruby 1.9 has DateTime#to_time which internally relies on Time. We define our own #to_time which allows
    14:             # DateTimes outside the range of what can be created with Time.
    15:             remove_method :to_time if base.instance_methods.include?(:to_time)
    16:           end
    17:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/DateTime/Conversions.html#M000715
- :tinyuri: http://tinyurl.com/4jsl8w
  :path: 
  - ActiveSupport
  - CoreExtensions
  - String
  - StartsEndsWith
  :method: included
  :description: |+
    
        included(base)
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/string/starts_ends_with.rb, line 6
     6:         def self.included(base)
     7:           base.class_eval do
     8:             alias_method :start_with?, :starts_with?
     9:             alias_method :end_with?, :ends_with?
    10:           end
    11:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/String/StartsEndsWith.html#M000760
- :tinyuri: http://tinyurl.com/5yxgbf
  :path: 
  - Rails
  - Generator
  - Options
  :method: included
  :description: |+
    
        included(base)
    
    
        # File vendor/rails/railties/lib/rails_generator/options.rb, line 6
     6:       def self.included(base)
     7:         base.extend(ClassMethods)
     8:         class << base
     9:           if respond_to?(:inherited)
    10:             alias_method :inherited_without_options, :inherited
    11:           end
    12:           alias_method :inherited, :inherited_with_options
    13:         end
    14:       end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Options.html#M001474
- :tinyuri: http://tinyurl.com/3ly7jt
  :path: 
  - ActionController
  - Flash
  :method: included
  :description: |+
    
        included(base)
    
    
        # File vendor/rails/actionpack/lib/action_controller/flash.rb, line 27
    27:     def self.included(base)
    28:       base.class_eval do
    29:         include InstanceMethods
    30:         alias_method_chain :assign_shortcuts, :flash
    31:         alias_method_chain :process_cleanup,  :flash
    32:         alias_method_chain :reset_session,    :flash
    33:       end
    34:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Flash.html#M000286
- :tinyuri: http://tinyurl.com/4gauos
  :path: 
  - ActionController
  - Cookies
  :method: included
  :description: |+
    
        included(base)
    
    
        # File vendor/rails/actionpack/lib/action_controller/cookies.rb, line 30
    30:     def self.included(base)
    31:       base.helper_method :cookies
    32:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Cookies.html#M000305
- :tinyuri: http://tinyurl.com/4262mc
  :path: 
  - ActionController
  - RequestForgeryProtection
  :method: included
  :description: |+
    
        included(base)
    
    
        # File vendor/rails/actionpack/lib/action_controller/request_forgery_protection.rb, line 6
     6:     def self.included(base)
     7:       base.class_eval do
     8:         class_inheritable_accessor :request_forgery_protection_options
     9:         self.request_forgery_protection_options = {}
    10:         helper_method :form_authenticity_token
    11:         helper_method :protect_against_forgery?
    12:       end
    13:       base.extend(ClassMethods)
    14:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/RequestForgeryProtection.html#M000292
- :tinyuri: http://tinyurl.com/4ufprb
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - QueryCache
  :method: included
  :description: |+
    
        included(base)
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb, line 5
     5:         def included(base)
     6:           base.class_eval do
     7:             attr_accessor :query_cache_enabled
     8:             alias_method_chain :columns, :query_cache
     9:             alias_method_chain :select_all, :query_cache
    10:           end
    11: 
    12:           dirties_query_cache base, :insert, :update, :delete
    13:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/QueryCache.html#M001139
- :tinyuri: http://tinyurl.com/3s3ll4
  :path: 
  - ActionController
  - UploadedFile
  :method: included
  :description: |+
    
        included(base)
    
    
         # File vendor/rails/actionpack/lib/action_controller/request.rb, line 696
    696:     def self.included(base)
    697:       base.class_eval do
    698:         attr_accessor :original_path, :content_type
    699:         alias_method :local_path, :path
    700:       end
    701:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/UploadedFile.html#M000301
- :tinyuri: http://tinyurl.com/4ndbq3
  :path: 
  - ActionView
  - Helpers
  - SanitizeHelper
  :method: included
  :description: |+
    
        included(base)
    
    
        # File vendor/rails/actionpack/lib/action_view/helpers/sanitize_helper.rb, line 9
     9:       def self.included(base)
    10:         base.extend(ClassMethods)
    11:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html#M000935
- :tinyuri: http://tinyurl.com/498gnk
  :path: 
  - ActionController
  - CgiExt
  - Stdinput
  :method: included
  :description: |+
    
        included(base)
    
    
        # File vendor/rails/actionpack/lib/action_controller/cgi_ext/stdinput.rb, line 8
     8:       def self.included(base)
     9:         base.class_eval do
    10:           remove_method :stdinput
    11:           attr_accessor :stdinput
    12:         end
    13: 
    14:         base.alias_method_chain :initialize, :stdinput
    15:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/CgiExt/Stdinput.html#M000303
- :tinyuri: http://tinyurl.com/54z6sj
  :path: 
  - ActionController
  - Assertions
  :method: included
  :description: |+
    
        included(klass)
    
    
        # File vendor/rails/actionpack/lib/action_controller/assertions.rb, line 46
    46:     def self.included(klass)
    47:       %w(response selector tag dom routing model).each do |kind|
    48:         require "action_controller/assertions/#{kind}_assertions"
    49:         klass.module_eval { include const_get("#{kind.camelize}Assertions") }
    50:       end
    51:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Assertions.html#M000352
- :tinyuri: http://tinyurl.com/3sejnp
  :path: 
  - ActiveRecord
  - Base
  :method: increment
  :description: |+
    
        increment(attribute)
    Initializes the attribute to zero if nil and adds one. Only makes
    sense for number-based attributes. Returns
    self.
    
    
    
          # File vendor/rails/activerecord/lib/active_record/base.rb, line 2045
    2045:       def increment(attribute)
    2046:         self[attribute] ||= 0
    2047:         self[attribute] += 1
    2048:         self
    2049:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001438
- :tinyuri: http://tinyurl.com/4no9so
  :path: 
  - ActiveRecord
  - Base
  :method: increment!
  :description: |+
    
        increment!(attribute)
    Increments the attribute and saves the record.
    
    
    
          # File vendor/rails/activerecord/lib/active_record/base.rb, line 2052
    2052:       def increment!(attribute)
    2053:         increment(attribute).update_attribute(attribute, self[attribute])
    2054:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001439
- :tinyuri: http://tinyurl.com/4glsrg
  :path: 
  - ActiveRecord
  - Base
  :method: increment_counter
  :description: "\n  \n    increment_counter(counter_name, id)\n  \n  \n  \n\
    Increment a number field by one, usually representing a count.\n\n\n\
    This is used for caching aggregate values, so that they don\xE2\x80\x98t need to\n\
    be computed every time. For example, a DiscussionBoard may cache post_count\n\
    and comment_count otherwise every time the board is shown it would have to\n\
    run an SQL query to find how many posts and\n\
    comments there are.\n\n\
    Options\n\n\
    counter_name The name of the field that should be incremented\n\
    id The id of the object that should be incremented\n\n\
    780:       def increment_counter(counter_name, id)\n\
    781:         update_counters(id, counter_name => 1)\n\
    782:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001388
- :tinyuri: http://tinyurl.com/4uqntw
  :path: 
  - ActiveSupport
  - Multibyte
  - Handlers
  - UTF8Handler
  :method: index
  :description: |+
    
        index(str, *args)
    Returns the position of the passed argument in the string, counting in
    codepoints
    
    
    
         # File vendor/rails/activesupport/lib/active_support/multibyte/handlers/utf8_handler.rb, line 139
    139:       def index(str, *args)
    140:         bidx = str.index(*args)
    141:         bidx ? (u_unpack(str.slice(0...bidx)).size) : nil
    142:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Handlers/UTF8Handler.html#M000516
- :tinyuri: http://tinyurl.com/3hrf5d
  :path: 
  - Enumerable
  :method: index_by
  :description: |+
    
        index_by() {|elem| ...}
    Convert an enumerable to a hash. Examples:
    
    
      people.index_by(&:login)
        => { "nextangle" => <Person ...>, "chade-" => <Person ...>, ...}
      people.index_by { |person| "#{person.first_name} #{person.last_name}" }
        => { "Chade- Fowlersburg-e" => <Person ...>, "David Heinemeier Hansson" => <Person ...>, ...}
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/enumerable.rb, line 56
    56:   def index_by
    57:     inject({}) do |accum, elem|
    58:       accum[yield(elem)] = elem
    59:       accum
    60:     end
    61:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Enumerable.html#M001647
- :tinyuri: http://tinyurl.com/4r9xcs
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - PostgreSQLAdapter
  :method: indexes
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#M001267
- :tinyuri: http://tinyurl.com/4k6jbk
  :path: 
  - Inflector
  :method: inflections
  :description: |+
    
        inflections() {|Inflections.instance| ...}
    
    
        # File vendor/rails/activesupport/lib/active_support/inflector.rb, line 89
    89:   def inflections
    90:     if block_given?
    91:       yield Inflections.instance
    92:     else
    93:       Inflections.instance
    94:     end
    95:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Inflector.html#M001616
- :tinyuri: http://tinyurl.com/46yo94
  :path: 
  - ActionController
  - Routing
  :method: inflections_with_route_reloading
  :description: |+
    
        inflections_with_route_reloading(&block)
    
    
          # File vendor/rails/actionpack/lib/action_controller/routing.rb, line 1492
    1492:       def inflections_with_route_reloading(&block)
    1493:         returning(inflections_without_route_reloading(&block)) {
    1494:           ActionController::Routing::Routes.reload! if block_given?
    1495:         }
    1496:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Routing.html#M000337
- :tinyuri: http://tinyurl.com/3g23db
  :path: 
  - Plugin
  :method: info
  :description: |+
    
        info()
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 199
    199:   def info
    200:     tmp = "#{rails_env.root}/_tmp_about.yml"
    201:     if svn_url?
    202:       cmd = "svn export #{@uri} \"#{rails_env.root}/#{tmp}\""
    203:       puts cmd if $verbose
    204:       system(cmd)
    205:     end
    206:     open(svn_url? ? tmp : File.join(@uri, 'about.yml')) do |stream|
    207:       stream.read
    208:     end rescue "No about.yml found in #{uri}"
    209:   ensure
    210:     FileUtils.rm_rf tmp if svn_url?
    211:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Plugin.html#M000098
- :tinyuri: http://tinyurl.com/3n4hej
  :path: 
  - ActiveRecord
  - Base
  :method: inheritance_column
  :description: "\n  \n    inheritance_column()\n  \n  \n  \n\
    Defines the column name for use with single table inheritance \xE2\x80\x94 can\n\
    973:       def inheritance_column\n\
    974:         @inheritance_column ||= \"type\".freeze\n\
    975:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001398
- :tinyuri: http://tinyurl.com/4ze7jz
  :path: 
  - ActiveRecord
  - Observing
  - ClassMethods
  :method: inherited
  :description: |+
    
        inherited(subclass)
    Notify observers when the observed
    class is subclassed.
    
    
    
        # File vendor/rails/activerecord/lib/active_record/observer.rb, line 49
    49:         def inherited(subclass)
    50:           super
    51:           changed
    52:           notify_observers :observed_class_inherited, subclass
    53:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Observing/ClassMethods.html#M001119
- :tinyuri: http://tinyurl.com/3jjquf
  :path: 
  - Rails
  - Generator
  - Options
  - ClassMethods
  :method: inherited_with_options
  :description: |+
    
        inherited_with_options(sub)
    
    
        # File vendor/rails/railties/lib/rails_generator/options.rb, line 17
    17:         def inherited_with_options(sub)
    18:           inherited_without_options(sub) if respond_to?(:inherited_without_options)
    19:           sub.extend(Rails::Generator::Options::ClassMethods)
    20:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Options/ClassMethods.html#M001485
- :tinyuri: http://tinyurl.com/4xolwv
  :path: 
  - Rails
  - Initializer
  :method: initialize_database
  :description: |+
    
        initialize_database()
    This initialization routine does nothing unless :active_record is
    one of the frameworks to load (Configuration#frameworks). If it is, this
    sets the database configuration from Configuration#database_configuration
    and then establishes the connection.
    
    
    
         # File vendor/rails/railties/lib/initializer.rb, line 232
    232:     def initialize_database
    233:       if configuration.frameworks.include?(:active_record)
    234:         ActiveRecord::Base.configurations = configuration.database_configuration
    235:         ActiveRecord::Base.establish_connection
    236:       end
    237:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Initializer.html#M001585
- :tinyuri: http://tinyurl.com/4tyc4u
  :path: 
  - Rails
  - Initializer
  :method: initialize_dependency_mechanism
  :description: |+
    
        initialize_dependency_mechanism()
    Sets the dependency loading mechanism based on the value of
    Configuration#cache_classes.
    
    
    
         # File vendor/rails/railties/lib/initializer.rb, line 299
    299:     def initialize_dependency_mechanism
    300:       Dependencies.mechanism = configuration.cache_classes ? :require : :load
    301:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Initializer.html#M001590
- :tinyuri: http://tinyurl.com/3qm7vn
  :path: 
  - Rails
  - Initializer
  :method: initialize_encoding
  :description: "\n  \n    initialize_encoding()\n  \n  \n  \n\
    This initialization sets $KCODE to \xE2\x80\x98u\xE2\x80\x99 to enable the multibyte\n\
    safe operations. Plugin authors supporting\n\
    other encodings should override this behaviour and set the relevant\n\
    224:     def initialize_encoding\n\
    225:       $KCODE='u'\n\
    226:     end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/Rails/Initializer.html#M001584
- :tinyuri: http://tinyurl.com/3f5uha
  :path: 
  - Rails
  - Initializer
  :method: initialize_framework_logging
  :description: "\n  \n    initialize_framework_logging()\n  \n  \n  \n\
    Sets the logger for ActiveRecord, ActionController, and ActionMailer (but\n\
    only for those frameworks that are to be loaded). If the framework\xE2\x80\x98s\n\
    logger is already set, it is not changed, otherwise it is set to use\n\
    273:     def initialize_framework_logging\n\
    274:       for framework in ([ :active_record, :action_controller, :action_mailer ] & configuration.frameworks)\n\
    275:         framework.to_s.camelize.constantize.const_get(\"Base\").logger ||= RAILS_DEFAULT_LOGGER\n\
    276:       end\n\
    277:     end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/Rails/Initializer.html#M001587
- :tinyuri: http://tinyurl.com/4afkm9
  :path: 
  - Rails
  - Initializer
  :method: initialize_framework_settings
  :description: |+
    
        initialize_framework_settings()
    Initializes framework-specific settings for each of the loaded frameworks
    (Configuration#frameworks). The available settings map to the accessors on
    each of the corresponding Base classes.
    
    
    
         # File vendor/rails/railties/lib/initializer.rb, line 324
    324:     def initialize_framework_settings
    325:       configuration.frameworks.each do |framework|
    326:         base_class = framework.to_s.camelize.constantize.const_get("Base")
    327: 
    328:         configuration.send(framework).each do |setting, value|
    329:           base_class.send("#{setting}=", value)
    330:         end
    331:       end
    332:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Initializer.html#M001593
- :tinyuri: http://tinyurl.com/4okfop
  :path: 
  - Rails
  - Initializer
  :method: initialize_framework_views
  :description: "\n  \n    initialize_framework_views()\n  \n  \n  \n\
    Sets +ActionController::Base#view_paths+ and\n\
    +ActionMailer::Base#template_root+ (but only for those frameworks that are\n\
    to be loaded). If the framework\xE2\x80\x98s paths have already been set, it is\n\
    283:     def initialize_framework_views\n\
    284:       ActionMailer::Base.template_root ||= configuration.view_path  if configuration.frameworks.include?(:action_mailer)\n\
    285:       ActionController::Base.view_paths = [configuration.view_path] if configuration.frameworks.include?(:action_controller) && ActionController::Base.view_paths.empty?\n\
    286:     end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/Rails/Initializer.html#M001588
- :tinyuri: http://tinyurl.com/3m8bzz
  :path: 
  - Rails
  - Initializer
  :method: initialize_logger
  :description: 
  :uri: http://api.rubyonrails.org/classes/Rails/Initializer.html#M001586
- :tinyuri: http://tinyurl.com/4hzynh
  :path: 
  - Rails
  - Initializer
  :method: initialize_routing
  :description: |+
    
        initialize_routing()
    If ActionController is not one of the loaded frameworks
    (Configuration#frameworks) this does nothing. Otherwise, it loads the
    routing definitions and sets up loading module used to lazily load
    controllers (Configuration#controller_paths).
    
    
    
         # File vendor/rails/railties/lib/initializer.rb, line 291
    291:     def initialize_routing
    292:       return unless configuration.frameworks.include?(:action_controller)
    293:       ActionController::Routing.controller_paths = configuration.controller_paths
    294:       ActionController::Routing::Routes.reload
    295:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Initializer.html#M001589
- :tinyuri: http://tinyurl.com/43d6ly
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - SchemaStatements
  :method: initialize_schema_information
  :description: |+
    
        initialize_schema_information()
    Should not be called normally, but this operation is non-destructive. The
    migrations module handles this automatically.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 235
    235:       def initialize_schema_information
    236:         begin
    237:           execute "CREATE TABLE #{quote_table_name(ActiveRecord::Migrator.schema_info_table_name)} (version #{type_to_sql(:integer)})"
    238:           execute "INSERT INTO #{quote_table_name(ActiveRecord::Migrator.schema_info_table_name)} (version) VALUES(0)"
    239:         rescue ActiveRecord::StatementInvalid
    240:           # Schema has been initialized
    241:         end
    242:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#M001161
- :tinyuri: http://tinyurl.com/4vmtqx
  :path: 
  - Rails
  - Initializer
  :method: initialize_temporary_directories
  :description: |+
    
        initialize_temporary_directories()
    
    
         # File vendor/rails/railties/lib/initializer.rb, line 309
    309:     def initialize_temporary_directories
    310:       if configuration.frameworks.include?(:action_controller)
    311:         session_path = "#{configuration.root_path}/tmp/sessions/"
    312:         ActionController::Base.session_options[:tmpdir] = File.exist?(session_path) ? session_path : Dir::tmpdir
    313: 
    314:         cache_path = "#{configuration.root_path}/tmp/cache/"
    315:         if File.exist?(cache_path)
    316:           ActionController::Base.fragment_cache_store = :file_store, cache_path
    317:         end
    318:       end
    319:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Initializer.html#M001592
- :tinyuri: http://tinyurl.com/3znlye
  :path: 
  - Rails
  - Initializer
  :method: initialize_whiny_nils
  :description: |+
    
        initialize_whiny_nils()
    Loads support for "whiny nil" (noisy warnings when methods are
    invoked on nil values) if Configuration#whiny_nils is true.
    
    
    
         # File vendor/rails/railties/lib/initializer.rb, line 305
    305:     def initialize_whiny_nils
    306:       require('active_support/whiny_nil') if configuration.whiny_nils
    307:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Initializer.html#M001591
- :tinyuri: http://tinyurl.com/4exb6d
  :path: 
  - ActionController
  - CgiExt
  - Stdinput
  :method: initialize_with_stdinput
  :description: |+
    
        initialize_with_stdinput(type = nil, stdinput = $stdin)
    
    
        # File vendor/rails/actionpack/lib/action_controller/cgi_ext/stdinput.rb, line 17
    17:       def initialize_with_stdinput(type = nil, stdinput = $stdin)
    18:         @stdinput = stdinput
    19:         initialize_without_stdinput(type || 'query')
    20:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/CgiExt/Stdinput.html#M000304
- :tinyuri: http://tinyurl.com/4s568t
  :path: 
  - ActionView
  - Helpers
  - ActiveRecordHelper
  :method: input
  :description: "\n  \n    input(record_name, method, options = {})\n  \n  \n  \n\
    Returns a default input tag\n\
    for the type of object returned by the method. For example, let\xE2\x80\x98s say\n\
    you have a model that has an attribute title of type VARCHAR\n\
    20:       def input(record_name, method, options = {})\n\
    21:         InstanceTag.new(record_name, method, self).to_tag(options)\n\
    22:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/ActiveRecordHelper.html#M001002
- :tinyuri: http://tinyurl.com/2bon2d
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - PostgreSQLAdapter
  :method: insert
  :description: "\n  \n    insert(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)\n  \n  \n  \n\
    388:       def insert(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)\n\
    389:         table = sql.split(\" \", 4)[2]\n\
    390:         super || last_insert_id(table, sequence_name || default_sequence_name(table, pk))\n\
    391:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#M001260
- :tinyuri: http://tinyurl.com/46uu55
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - DatabaseStatements
  :method: insert
  :description: |+
    
        insert(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)
    Returns the last auto-generated ID from the affected table.
    
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 43
    43:       def insert(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)
    44:         insert_sql(sql, name, pk, id_value, sequence_name)
    45:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#M001179
- :tinyuri: http://tinyurl.com/3gv99c
  :path: 
  - ActiveSupport
  - Multibyte
  - Handlers
  - UTF8Handler
  :method: insert
  :description: |+
    
        insert(str, offset, fragment)
    Inserts the passed string at specified codepoint offsets
    
    
    
         # File vendor/rails/activesupport/lib/active_support/multibyte/handlers/utf8_handler.rb, line 129
    129:       def insert(str, offset, fragment)
    130:         str.replace(
    131:           u_unpack(str).insert(
    132:             offset,
    133:             u_unpack(fragment)
    134:           ).flatten.pack('U*')
    135:         )
    136:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Handlers/UTF8Handler.html#M000515
- :tinyuri: http://tinyurl.com/3v34bs
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - DatabaseStatements
  :method: insert_fixture
  :description: |+
    
        insert_fixture(fixture, table_name)
    Inserts the given fixture into the table. Overridden in adapters that
    require something beyond a simple insert (eg. Oracle).
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 139
    139:       def insert_fixture(fixture, table_name)
    140:         execute "INSERT INTO #{quote_table_name(table_name)} (#{fixture.key_list}) VALUES (#{fixture.value_list})", 'Fixture Insert'
    141:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#M001191
- :tinyuri: http://tinyurl.com/4qcrgr
  :path: 
  - Fixtures
  :method: insert_fixtures
  :description: 
  :uri: http://api.rubyonrails.org/classes/Fixtures.html#M000160
- :tinyuri: http://tinyurl.com/4jadfj
  :path: 
  - ActionView
  - Helpers
  - PrototypeHelper
  - JavaScriptGenerator
  - GeneratorMethods
  :method: insert_html
  :description: "\n  \n    insert_html(position, id, *options_for_render)\n  \n  \n  \n\
    Inserts HTML at the specified position relative to the DOM element\n\
    identified by the given id.\n\n\n\
    position may be one of:\n\n\n\
    :top:HTML is inserted inside the element, before the element\xE2\x80\x98s existing\n\
    content.\n\n\n\
    :bottom:HTML is inserted inside the element, after the element\xE2\x80\x98s existing\n\
    content.\n\n\n\
    :before:HTML is inserted immediately preceding the element.\n\n\n\
    :after:HTML is inserted immediately following the element.\n\n\n\n\n\
    options_for_render may be either a string of HTML to insert, or a\n\
    725:           def insert_html(position, id, *options_for_render)\n\
    726:             insertion = position.to_s.camelize\n\
    727:             call \"new Insertion.#{insertion}\", id, render(*options_for_render)\n\
    728:           end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#M000977
- :tinyuri: http://tinyurl.com/455zd3
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - DatabaseStatements
  :method: insert_sql
  :description: |+
    
        insert_sql(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)
    Returns the last auto-generated ID from the affected table.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 155
    155:         def insert_sql(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)
    156:           execute(sql, name)
    157:           id_value
    158:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#M001194
- :tinyuri: http://tinyurl.com/4fpmvf
  :path: 
  - ActiveRecord
  - Base
  :method: inspect
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001410
- :tinyuri: http://tinyurl.com/4ykrsw
  :path: 
  - ActiveRecord
  - Base
  :method: inspect
  :description: |+
    
        inspect()
    Returns the contents of the record as a nicely formatted string.
    
    
    
          # File vendor/rails/activerecord/lib/active_record/base.rb, line 2227
    2227:       def inspect
    2228:         attributes_as_nice_string = self.class.column_names.collect { |name|
    2229:           if has_attribute?(name) || new_record?
    2230:             "#{name}: #{attribute_for_inspect(name)}"
    2231:           end
    2232:         }.compact.join(", ")
    2233:         "#<#{self.class} #{attributes_as_nice_string}>"
    2234:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001462
- :tinyuri: http://tinyurl.com/3rzdro
  :path: 
  - RailsEnvironment
  :method: install
  :description: |+
    
        install(name_uri_or_plugin)
    
    
        # File vendor/rails/railties/lib/commands/plugin.rb, line 81
    81:   def install(name_uri_or_plugin)
    82:     if name_uri_or_plugin.is_a? String
    83:       if name_uri_or_plugin =~ /:\/\// 
    84:         plugin = Plugin.new(name_uri_or_plugin)
    85:       else
    86:         plugin = Plugins[name_uri_or_plugin]
    87:       end
    88:     else
    89:       plugin = name_uri_or_plugin
    90:     end
    91:     unless plugin.nil?
    92:       plugin.install
    93:     else
    94:       puts "Plugin not found: #{name_uri_or_plugin}"
    95:     end
    96:   end
    
    
  :uri: http://api.rubyonrails.org/classes/RailsEnvironment.html#M000055
- :tinyuri: http://tinyurl.com/53ww26
  :path: 
  - Plugin
  :method: install
  :description: 
  :uri: http://api.rubyonrails.org/classes/Plugin.html#M000096
- :tinyuri: http://tinyurl.com/3eob2q
  :path: 
  - RailsFCGIHandler
  :method: install_signal_handler
  :description: |+
    
        install_signal_handler(signal, handler = nil)
    
    
         # File vendor/rails/railties/lib/fcgi_handler.rb, line 133
    133:     def install_signal_handler(signal, handler = nil)
    134:       if SIGNALS.include?(signal) && self.class.method_defined?(name = "#{SIGNALS[signal]}_handler")
    135:         handler ||= method(name).to_proc
    136: 
    137:         begin
    138:           trap(signal, handler)
    139:         rescue ArgumentError
    140:           dispatcher_log :warn, "Ignoring unsupported signal #{signal}."
    141:         end
    142:       else
    143:         dispatcher_log :warn, "Ignoring unsupported signal #{signal}."
    144:       end
    145:     end
    
    
  :uri: http://api.rubyonrails.org/classes/RailsFCGIHandler.html#M000038
- :tinyuri: http://tinyurl.com/3st659
  :path: 
  - RailsFCGIHandler
  :method: install_signal_handlers
  :description: |+
    
        install_signal_handlers()
    
    
         # File vendor/rails/railties/lib/fcgi_handler.rb, line 129
    129:     def install_signal_handlers
    130:       GLOBAL_SIGNALS.each { |signal| install_signal_handler(signal) }
    131:     end
    
    
  :uri: http://api.rubyonrails.org/classes/RailsFCGIHandler.html#M000037
- :tinyuri: http://tinyurl.com/42vk6h
  :path: 
  - Plugin
  :method: installed?
  :description: 
  :uri: http://api.rubyonrails.org/classes/Plugin.html#M000095
- :tinyuri: http://tinyurl.com/3z9yju
  :path: 
  - Rails
  - Generator
  - Commands
  :method: instance
  :description: "\n  \n    instance(command, generator)\n  \n  \n  \n\
    Here\xE2\x80\x98s a convenient way to get a handle on generator commands.\n\
    Command.instance(\xE2\x80\x98destroy\xE2\x80\x99, my_generator) instantiates a Destroy delegate of my_generator ready to\n\
    13:       def self.instance(command, generator)\n\
    14:         const_get(command.to_s.camelize).new(generator)\n\
    15:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Commands.html#M001489
- :tinyuri: http://tinyurl.com/4dzoot
  :path: 
  - Rails
  - Generator
  - Lookup
  - ClassMethods
  :method: instance
  :description: |+
    
        instance(generator_name, args = [], runtime_options = {})
    Convenience method to lookup and
    instantiate a generator.
    
    
    
         # File vendor/rails/railties/lib/rails_generator/lookup.rb, line 135
    135:         def instance(generator_name, args = [], runtime_options = {})
    136:           lookup(generator_name).klass.new(args, full_options(runtime_options))
    137:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Lookup/ClassMethods.html#M001540
- :tinyuri: http://tinyurl.com/3wdtmd
  :path: 
  - Rails
  - Generator
  - Lookup
  :method: instance
  :description: |+
    
        instance(generator_name, args, runtime_options = {})
    Convenience method to instantiate another generator.
    
    
    
        # File vendor/rails/railties/lib/rails_generator/lookup.rb, line 57
    57:       def instance(generator_name, args, runtime_options = {})
    58:         self.class.instance(generator_name, args, runtime_options)
    59:       end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Lookup.html#M001532
- :tinyuri: http://tinyurl.com/3pbfl5
  :path: 
  - Repositories
  :method: instance
  :description: |+
    
        instance()
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 354
    354:   def self.instance
    355:     @instance ||= Repositories.new
    356:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Repositories.html#M000089
- :tinyuri: http://tinyurl.com/4kl5q4
  :path: 
  - Object
  :method: instance_exec
  :description: "\n  \n    instance_exec(*args, &block)\n  \n  \n  \n\
    Evaluate the block with the given arguments within the context of this\n\
    object, so self is set to the method receiver.\n\n\n\
    41:     def instance_exec(*args, &block)\n\
    42:       begin\n\
    43:         old_critical, Thread.critical = Thread.critical, true\n\
    44:         n = 0\n\
    45:         n += 1 while respond_to?(method_name = \"__instance_exec#{n}\")\n\
    46:         InstanceExecMethods.module_eval { define_method(method_name, &block) }\n\
    47:       ensure\n\
    48:         Thread.critical = old_critical\n\
    49:       end\n\
    50: \n\
    51:       begin\n\
    52:         send(method_name, *args)\n\
    53:       ensure\n\
    54:         InstanceExecMethods.module_eval { remove_method(method_name) } rescue nil\n\
    55:       end\n\
    56:     end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/Object.html#M000137
- :tinyuri: http://tinyurl.com/5yqxsk
  :path: 
  - ActiveRecord
  - AttributeMethods
  - ClassMethods
  :method: instance_method_already_implemented?
  :description: |+
    
        instance_method_already_implemented?(method_name)
    Check to see if the method is defined in the model or any of its subclasses
    that also derive from ActiveRecord. Raise DangerousAttributeError if the
    method is defined by ActiveRecord though.
    
    
    
        # File vendor/rails/activerecord/lib/active_record/attribute_methods.rb, line 84
    84:       def instance_method_already_implemented?(method_name)
    85:         return true if method_name =~ /^id(=$|\?$|$)/
    86:         @_defined_class_methods         ||= Set.new(ancestors.first(ancestors.index(ActiveRecord::Base)).collect! { |m| m.public_instance_methods(false) | m.private_instance_methods(false) | m.protected_instance_methods(false) }.flatten)
    87:         @@_defined_activerecord_methods ||= Set.new(ActiveRecord::Base.public_instance_methods(false) | ActiveRecord::Base.private_instance_methods(false) | ActiveRecord::Base.protected_instance_methods(false))
    88:         raise DangerousAttributeError, "#{method_name} is defined by ActiveRecord" if @@_defined_activerecord_methods.include?(method_name)
    89:         @_defined_class_methods.include?(method_name)
    90:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/AttributeMethods/ClassMethods.html#M001098
- :tinyuri: http://tinyurl.com/4bqcwr
  :path: 
  - Object
  :method: instance_variable_defined?
  :description: |+
    
        instance_variable_defined?(variable)
    
    
       # File vendor/rails/activesupport/lib/active_support/core_ext/object/instance_variables.rb, line 4
    4:     def instance_variable_defined?(variable)
    5:       instance_variables.include?(variable.to_s)
    6:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Object.html#M000138
- :tinyuri: http://tinyurl.com/4pv82a
  :path: 
  - Fixtures
  :method: instantiate_all_loaded_fixtures
  :description: |+
    
        instantiate_all_loaded_fixtures(object, load_instances = true)
    
    
         # File vendor/rails/activerecord/lib/active_record/fixtures.rb, line 488
    488:   def self.instantiate_all_loaded_fixtures(object, load_instances = true)
    489:     all_loaded_fixtures.each do |table_name, fixtures|
    490:       Fixtures.instantiate_fixtures(object, table_name, fixtures, load_instances)
    491:     end
    492:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Fixtures.html#M000155
- :tinyuri: http://tinyurl.com/3nj3t3
  :path: 
  - Fixtures
  :method: instantiate_fixtures
  :description: |+
    
        instantiate_fixtures(object, table_name, fixtures, load_instances = true)
    
    
         # File vendor/rails/activerecord/lib/active_record/fixtures.rb, line 473
    473:   def self.instantiate_fixtures(object, table_name, fixtures, load_instances = true)
    474:     object.instance_variable_set "@#{table_name.to_s.gsub('.','_')}", fixtures
    475:     if load_instances
    476:       ActiveRecord::Base.silence do
    477:         fixtures.each do |name, fixture|
    478:           begin
    479:             object.instance_variable_set "@#{name}", fixture.find
    480:           rescue FixtureClassNotFound
    481:             nil
    482:           end
    483:         end
    484:       end
    485:     end
    486:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Fixtures.html#M000154
- :tinyuri: http://tinyurl.com/44nvvj
  :path: 
  - ActiveRecord
  - Observing
  - ClassMethods
  :method: instantiate_observers
  :description: |+
    
        instantiate_observers()
    Instantiate the global ActiveRecord observers
    
    
    
        # File vendor/rails/activerecord/lib/active_record/observer.rb, line 34
    34:       def instantiate_observers
    35:         return if @observers.blank?
    36:         @observers.each do |observer|
    37:           if observer.respond_to?(:to_sym) # Symbol or String
    38:             observer.to_s.camelize.constantize.instance
    39:           elsif observer.respond_to?(:instance)
    40:             observer.instance
    41:           else
    42:             raise ArgumentError, "#{observer} must be a lowercase, underscored class name (or an instance of the class itself) responding to the instance method. Example: Person.observers = :big_brother # calls BigBrother.instance"
    43:           end
    44:         end
    45:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Observing/ClassMethods.html#M001118
- :tinyuri: http://tinyurl.com/5xxm3z
  :path: 
  - Builder
  - XmlMarkup
  :method: instruct!
  :description: 
  :uri: http://api.rubyonrails.org/classes/Builder/XmlMarkup.html#M000894
- :tinyuri: http://tinyurl.com/3kydbw
  :path: 
  - ActiveRecord
  - Errors
  :method: invalid?
  :description: |+
    
        invalid?(attribute)
    Returns true if the specified attribute has errors associated with
    it.
    
    
      class Company < ActiveRecord::Base
        validates_presence_of :name, :address, :email
        validates_length_of :name, :in => 5..30
      end
    
      company = Company.create(:address => '123 First St.')
      company.errors.invalid?(:name)      # => true
      company.errors.invalid?(:address)   # => false
    
    
    
        # File vendor/rails/activerecord/lib/active_record/validations.rb, line 96
    96:     def invalid?(attribute)
    97:       !@errors[attribute.to_s].nil?
    98:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Errors.html#M001349
- :tinyuri: http://tinyurl.com/4fb3gv
  :path: 
  - ActiveResource
  - Errors
  :method: invalid?
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Errors.html#M000802
- :tinyuri: http://tinyurl.com/4tfvje
  :path: 
  - Rails
  - Generator
  - Commands
  - RewindBase
  :method: invoke!
  :description: |+
    
        invoke!()
    Rewind action manifest.
    
    
    
         # File vendor/rails/railties/lib/rails_generator/commands.rb, line 155
    155:         def invoke!
    156:           manifest.rewind(self)
    157:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Commands/RewindBase.html#M001497
- :tinyuri: http://tinyurl.com/4mdhz6
  :path: 
  - Rails
  - Generator
  - Commands
  - Base
  :method: invoke!
  :description: |+
    
        invoke!()
    Replay action manifest. RewindBase subclass
    rewinds manifest.
    
    
    
        # File vendor/rails/railties/lib/rails_generator/commands.rb, line 41
    41:         def invoke!
    42:           manifest.replay(self)
    43:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Commands/Base.html#M001498
- :tinyuri: http://tinyurl.com/3fkgvr
  :path: 
  - Inflector
  - Inflections
  :method: irregular
  :description: 
  :uri: http://api.rubyonrails.org/classes/Inflector/Inflections.html#M001633
- :tinyuri: http://tinyurl.com/4au73q
  :path: 
  - ActiveSupport
  - CoreExtensions
  - String
  - Unicode
  :method: is_utf8?
  :description: |+
    
        is_utf8?()
    Returns true if the string has UTF-8 semantics (a String used for purely
    byte resources is unlikely to have them), returns false otherwise.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/string/unicode.rb, line 36
    36:         def is_utf8?
    37:           ActiveSupport::Multibyte::Handlers::UTF8Handler.consumes?(self)
    38:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/String/Unicode.html#M000735
- :tinyuri: http://tinyurl.com/3tpcya
  :path: 
  - ActionView
  - Helpers
  - AssetTagHelper
  :method: javascript_include_tag
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/AssetTagHelper.html#M001024
- :tinyuri: http://tinyurl.com/3mmvx2
  :path: 
  - ActionView
  - Helpers
  - AssetTagHelper
  :method: javascript_path
  :description: |+
    
        javascript_path(source)
    Computes the path to a javascript asset in the public javascripts
    directory. If the source filename has no extension, .js will be
    appended. Full paths from the document root will be passed through. Used
    internally by javascript_include_tag to build the
    script path.
    
    Examples
    
      javascript_path "xmlhr" # => /javascripts/xmlhr.js
      javascript_path "dir/xmlhr.js" # => /javascripts/dir/xmlhr.js
      javascript_path "/dir/xmlhr" # => /dir/xmlhr.js
      javascript_path "http://www.railsapplication.com/js/xmlhr" # => http://www.railsapplication.com/js/xmlhr.js
      javascript_path "http://www.railsapplication.com/js/xmlhr.js" # => http://www.railsapplication.com/js/xmlhr.js
    
    
      This method is also aliased as
      path_to_javascript
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/asset_tag_helper.rb, line 137
    137:       def javascript_path(source)
    138:         compute_public_path(source, 'javascripts', 'js')
    139:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/AssetTagHelper.html#M001022
- :tinyuri: http://tinyurl.com/43rq2z
  :path: 
  - ActionView
  - Helpers
  - JavaScriptHelper
  :method: javascript_tag
  :description: |+
    
        javascript_tag(content_or_options_with_block = nil, html_options = {}, &block)
    Returns a JavaScript tag with the content inside. Example:
    
    
      javascript_tag "alert('All is good')"
    
    
    Returns:
    
    
      <script type="text/javascript">
      //<![CDATA[
      alert('All is good')
      //]]>
      </script>
    
    
    html_options may be a hash of attributes for the <script>
    tag. Example:
    
    
      javascript_tag "alert('All is good')", :defer => 'defer'
      # => <script defer="defer" type="text/javascript">alert('All is good')</script>
    
    
    Instead of passing the content as an argument, you can also use a block in
    which case, you pass your html_options as the first parameter.
    
    
      <% javascript_tag :defer => 'defer' do -%>
        alert('All is good')
      <% end -%>
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/javascript_helper.rb, line 174
    174:       def javascript_tag(content_or_options_with_block = nil, html_options = {}, &block)
    175:         if block_given?
    176:           html_options = content_or_options_with_block if content_or_options_with_block.is_a?(Hash)
    177:           content = capture(&block)
    178:         else
    179:           content = content_or_options_with_block
    180:         end
    181: 
    182:         javascript_tag = content_tag("script", javascript_cdata_section(content), html_options.merge(:type => Mime::JS))
    183:         
    184:         if block_given? && block_is_within_action_view?(block)
    185:           concat(javascript_tag, block.binding)
    186:         else
    187:           javascript_tag
    188:         end
    189:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/JavaScriptHelper.html#M001065
- :tinyuri: http://tinyurl.com/4w4g7h
  :path: 
  - ActiveSupport
  - Multibyte
  - Handlers
  - UTF8Handler
  :method: justify
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Handlers/UTF8Handler.html#M000541
- :tinyuri: http://tinyurl.com/4eeuku
  :path: 
  - ActionController
  - Flash
  - FlashHash
  :method: keep
  :description: |+
    
        keep(k = nil)
    Keeps either the entire current flash or a specific flash entry available
    for the next action:
    
    
       flash.keep            # keeps the entire flash
       flash.keep(:notice)   # keeps only the "notice" entry, the rest of the flash is discarded
    
    
    
        # File vendor/rails/actionpack/lib/action_controller/flash.rb, line 94
    94:       def keep(k = nil)
    95:         use(k, false)
    96:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Flash/FlashHash.html#M000288
- :tinyuri: http://tinyurl.com/4xa2ze
  :path: 
  - HashWithIndifferentAccess
  :method: key?
  :description: |+
    
        key?(key)
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/hash/indifferent_access.rb, line 36
    36:   def key?(key)
    37:     super(convert_key(key))
    38:   end
    
    
  :uri: http://api.rubyonrails.org/classes/HashWithIndifferentAccess.html#M000066
- :tinyuri: http://tinyurl.com/4lhbm5
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Numeric
  - Bytes
  :method: kilobyte
  :description: |
    
        kilobyte()
    Alias for kilobytes
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Numeric/Bytes.html#M000661
- :tinyuri: http://tinyurl.com/52m6ol
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Numeric
  - Bytes
  :method: kilobytes
  :description: |+
    
        kilobytes()
    
      This method is also aliased as
      kilobyte
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/numeric/bytes.rb, line 11
    11:         def kilobytes
    12:           self * 1024
    13:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Numeric/Bytes.html#M000660
- :tinyuri: http://tinyurl.com/4cmzss
  :path: 
  - ActiveRecord
  - Reflection
  - MacroReflection
  :method: klass
  :description: "\n  \n    klass()\n  \n  \n  \n\
    Returns the class for the macro,\n\
    so \"composed_of :balance, :class_name =>\n\
    \xE2\x80\x98Money\xE2\x80\x99\" returns the Money class and \"has_many\n\
    100:         @klass ||= class_name.constantize\n\
    101:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Reflection/MacroReflection.html#M001130
- :tinyuri: http://tinyurl.com/3vhnqc
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - Column
  :method: klass
  :description: |+
    
        klass()
    Returns the Ruby class that corresponds to the abstract data type.
    
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 41
    41:       def klass
    42:         case type
    43:           when :integer       then Fixnum
    44:           when :float         then Float
    45:           when :decimal       then BigDecimal
    46:           when :datetime      then Time
    47:           when :date          then Date
    48:           when :timestamp     then Time
    49:           when :time          then Time
    50:           when :text, :string then String
    51:           when :binary        then String
    52:           when :boolean       then Object
    53:         end
    54:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/Column.html#M001200
- :tinyuri: http://tinyurl.com/4qrdvb
  :path: 
  - Rails
  - Generator
  - Spec
  :method: klass
  :description: |+
    
        klass()
    Look up the generator class. Require its class file, find the class in
    ObjectSpace, tag it with this spec, and return.
    
    
    
        # File vendor/rails/railties/lib/rails_generator/spec.rb, line 15
    15:       def klass
    16:         unless @klass
    17:           require class_file
    18:           @klass = lookup_class
    19:           @klass.spec = self
    20:         end
    21:         @klass
    22:       end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Spec.html#M001554
- :tinyuri: http://tinyurl.com/3of9p4
  :path: 
  - ActionView
  - Helpers
  - FormHelper
  :method: label
  :description: |+
    
        label(object_name, method, text = nil, options = {})
    Returns a label tag tailored for
    labelling an input field for a specified attribute (identified by
    method) on an object assigned to the template (identified by
    object). The text of label
    will default to the attribute name unless you specify it explicitly.
    Additional options on the label tag
    can be passed as a hash with options. These options will be tagged
    onto the HTML as an HTML element attribute as in the example shown.
    
    Examples
    
      label(:post, :title)
      #=> <label for="post_title">Title</label>
    
      label(:post, :title, "A short title")
      #=> <label for="post_title">A short title</label>
    
      label(:post, :title, "A short title", :class => "title_label")
      #=> <label for="post_title" class="title_label">A short title</label>
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/form_helper.rb, line 266
    266:       def label(object_name, method, text = nil, options = {})
    267:         InstanceTag.new(object_name, method, self, nil, options.delete(:object)).to_label_tag(text, options)
    268:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/FormHelper.html#M000922
- :tinyuri: http://tinyurl.com/45k4rk
  :path: 
  - ActiveSupport
  - CoreExtensions
  - String
  - Access
  :method: last
  :description: |+
    
        last(limit = 1)
    Returns the last character of the string
    or the last limit characters.
    
    
    Examples:
    
    
      "hello".last     # => "o"
      "hello".last(2)  # => "lo"
      "hello".last(10) # => "hello"
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/string/access.rb, line 52
    52:         def last(limit = 1)
    53:           (chars[(-limit)..-1] || self).to_s
    54:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/String/Access.html#M000758
- :tinyuri: http://tinyurl.com/5xtrwj
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Calculations
  :method: last_month
  :description: |+
    
        last_month()
    Short-hand for months_ago(1)
    
    
    
         # File vendor/rails/activesupport/lib/active_support/core_ext/time/calculations.rb, line 133
    133:         def last_month
    134:           months_ago(1)
    135:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Calculations.html#M000586
- :tinyuri: http://tinyurl.com/3kuj8x
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Date
  - Calculations
  :method: last_month
  :description: |+
    
        last_month()
    Short-hand for months_ago(1)
    
    
    
         # File vendor/rails/activesupport/lib/active_support/core_ext/date/calculations.rb, line 126
    126:         def last_month
    127:           months_ago(1)
    128:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Date/Calculations.html#M000696
- :tinyuri: http://tinyurl.com/4g79cw
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Date
  - Calculations
  :method: last_year
  :description: |+
    
        last_year()
    Short-hand for years_ago(1)
    
    
    
         # File vendor/rails/activesupport/lib/active_support/core_ext/date/calculations.rb, line 116
    116:         def last_year
    117:           years_ago(1)
    118:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Date/Calculations.html#M000694
- :tinyuri: http://tinyurl.com/49qxho
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Calculations
  :method: last_year
  :description: |+
    
        last_year()
    Short-hand for years_ago(1)
    
    
    
         # File vendor/rails/activesupport/lib/active_support/core_ext/time/calculations.rb, line 122
    122:         def last_year
    123:           years_ago(1)
    124:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Calculations.html#M000584
- :tinyuri: http://tinyurl.com/3sl5f8
  :path: 
  - ActionController
  - Layout
  - ClassMethods
  :method: layout
  :description: |+
    
        layout(template_name, conditions = {}, auto = false)
    If a layout is specified, all
    rendered actions will have their result rendered when the layout yields. This layout can itself depend on instance
    variables assigned during action performance and have access to them as any
    normal template would.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/layout.rb, line 171
    171:       def layout(template_name, conditions = {}, auto = false)
    172:         add_layout_conditions(conditions)
    173:         write_inheritable_attribute "layout", template_name
    174:         write_inheritable_attribute "auto_layout", auto
    175:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Layout/ClassMethods.html#M000275
- :tinyuri: http://tinyurl.com/3lzoex
  :path: 
  - ActiveResource
  - Errors
  :method: length
  :description: |
    
        length()
    Alias for size
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Errors.html#M000812
- :tinyuri: http://tinyurl.com/4vx9lf
  :path: 
  - ActiveRecord
  - Errors
  :method: length
  :description: |
    
        length()
    Alias for size
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Errors.html#M001360
- :tinyuri: http://tinyurl.com/3zyxtt
  :path: 
  - ActionView
  - TemplateHandler
  :method: line_offset
  :description: |+
    
        line_offset()
    
    
       # File vendor/rails/actionpack/lib/action_view/template_handler.rb, line 3
    3:     def self.line_offset
    4:       0
    5:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/TemplateHandler.html#M001082
- :tinyuri: http://tinyurl.com/4rfj4b
  :path: 
  - ActionView
  - TemplateHandlers
  - Builder
  :method: line_offset
  :description: |+
    
        line_offset()
    
    
       # File vendor/rails/actionpack/lib/action_view/template_handlers/builder.rb, line 6
    6:       def self.line_offset
    7:         2
    8:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/TemplateHandlers/Builder.html#M001072
- :tinyuri: http://tinyurl.com/4kd533
  :path: 
  - ActionView
  - TemplateHandlers
  - RJS
  :method: line_offset
  :description: |+
    
        line_offset()
    
    
       # File vendor/rails/actionpack/lib/action_view/template_handlers/rjs.rb, line 4
    4:       def self.line_offset
    5:         2
    6:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/TemplateHandlers/RJS.html#M001070
- :tinyuri: http://tinyurl.com/2p6cvh
  :path: 
  - ActionView
  - Helpers
  - UrlHelper
  :method: link_to
  :description: "\n  \n    link_to(name, options = {}, html_options = nil)\n  \n  \n  \n\
    Creates a link tag of the given name using a URL created by the\n\
    set of options. See the valid options in the documentation for url_for. It\xE2\x80\x98s also possible to pass\n\
    a string instead of an options hash to get a link tag that uses the value\n\
    of the string as the href for the link, or use +:back+ to link to the\n\
    referrer - a JavaScript back link will be used in place of a referrer if\n\
    none exists. If nil is passed as a name, the link itself will become the\n\
    name.\n\n\
    Options\n\n\
    :confirm => \xE2\x80\x98question?\xE2\x80\x98 \xE2\x80\x94 This will add a\n\
    JavaScript confirm prompt with the question specified. If the user accepts,\n\
    the link is processed normally, otherwise no action is taken.\n\n\n\
    :popup => true || array of window options \xE2\x80\x94 This will\n\
    force the link to open in a popup window. By passing true, a default\n\
    browser window will be opened with the URL. You can also specify an array\n\
    of options that are passed-thru to JavaScripts window.open method.\n\n\n\
    :method => symbol of HTTP verb \xE2\x80\x94 This modifier will\n\
    dynamically create an HTML form and immediately submit the form for\n\
    processing using the HTTP verb specified. Useful for having links perform a\n\
    POST operation in dangerous actions like deleting a record (which search\n\
    bots can follow while spidering your site). Supported verbs are :post,\n\
    :delete and :put. Note that if the user has JavaScript disabled, the\n\
    request will fall back to using GET. If you are relying on the POST\n\
    behavior, you should check for it in your controller\xE2\x80\x98s action by\n\
    using the request object\xE2\x80\x98s methods for post?, delete? or put?.\n\n\n\
    The html_options will accept a hash of html attributes for the\n\
    link tag.\n\n\n\n\n\
    Note that if the user has JavaScript disabled, the request will fall back\n\
    to using GET. If :href=>\xE2\x80\x99#\xE2\x80\x99 is used and the user has\n\
    JavaScript disabled clicking the link will have no effect. If you are\n\
    relying on the POST behavior, your should check for it in your\n\
    controller\xE2\x80\x98s action by using the request object\xE2\x80\x98s methods for\n\
    post?, delete? or put?.\n\n\n\
    You can mix and match the html_options with the exception of\n\
    :popup and :method which will raise an ActionView::ActionViewError\n\
    exception.\n\n\
    137:       def link_to(name, options = {}, html_options = nil)\n\
    138:         url = case options\n\
    139:           when String\n\
    140:             options\n\
    141:           when :back\n\
    142:             @controller.request.env[\"HTTP_REFERER\"] || 'javascript:history.back()'\n\
    143:           else\n\
    144:             self.url_for(options)\n\
    145:           end\n\
    146: \n\
    147:         if html_options\n\
    148:           html_options = html_options.stringify_keys\n\
    149:           href = html_options['href']\n\
    150:           convert_options_to_javascript!(html_options, url)\n\
    151:           tag_options = tag_options(html_options)\n\
    152:         else\n\
    153:           tag_options = nil\n\
    154:         end\n\
    155:         \n\
    156:         href_attr = \"href=\\\"#{url}\\\"\" unless href\n\
    157:         \"<a #{href_attr}#{tag_options}>#{name || url}</a>\"\n\
    158:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/UrlHelper.html#M000913
- :tinyuri: http://tinyurl.com/2vofgl
  :path: 
  - ActionView
  - Helpers
  - JavaScriptHelper
  :method: link_to_function
  :description: |+
    
        link_to_function(name, *args, &block)
    Returns a link that will trigger a JavaScript function using the
    onclick handler and return false after the fact.
    
    
    The function argument can be omitted in favor of an
    update_page block, which evaluates to a string when the template
    is rendered (instead of making an Ajax request first).
    
    
    Examples:
    
    
      link_to_function "Greeting", "alert('Hello world!')"
        Produces:
          <a onclick="alert('Hello world!'); return false;" href="#">Greeting</a>
    
      link_to_function(image_tag("delete"), "if (confirm('Really?')) do_delete()")
        Produces:
          <a onclick="if (confirm('Really?')) do_delete(); return false;" href="#">
            <img src="/images/delete.png?" alt="Delete"/>
          </a>
    
      link_to_function("Show me more", nil, :id => "more_link") do |page|
        page[:details].visual_effect  :toggle_blind
        page[:more_link].replace_html "Show me less"
      end
        Produces:
          <a href="#" id="more_link" onclick="try {
            $(&quot;details&quot;).visualEffect(&quot;toggle_blind&quot;);
            $(&quot;more_link&quot;).update(&quot;Show me less&quot;);
          }
          catch (e) {
            alert('RJS error:\n\n' + e.toString());
            alert('$(\&quot;details\&quot;).visualEffect(\&quot;toggle_blind\&quot;);
            \n$(\&quot;more_link\&quot;).update(\&quot;Show me less\&quot;);');
            throw e
          };
          return false;">Show me more</a>
    
    
    
        # File vendor/rails/actionpack/lib/action_view/helpers/javascript_helper.rb, line 82
    82:       def link_to_function(name, *args, &block)
    83:         html_options = args.extract_options!
    84:         function = args[0] || ''
    85: 
    86:         html_options.symbolize_keys!
    87:         function = update_page(&block) if block_given?
    88:         content_tag(
    89:           "a", name, 
    90:           html_options.merge({ 
    91:             :href => html_options[:href] || "#", 
    92:             :onclick => (html_options[:onclick] ? "#{html_options[:onclick]}; " : "") + "#{function}; return false;" 
    93:           })
    94:         )
    95:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/JavaScriptHelper.html#M001061
- :tinyuri: http://tinyurl.com/4bzc9q
  :path: 
  - ActionView
  - Helpers
  - UrlHelper
  :method: link_to_if
  :description: |+
    
        link_to_if(condition, name, options = {}, html_options = {}, &block)
    Creates a link tag of the given name using a URL created by the
    set of options if condition is true, in which case only
    the name is returned. To specialize the default behavior, you can pass a
    block that accepts the name or the full argument list for link_to_unless (see the examples in link_to_unless).
    
    Examples
    
      <%= link_to_if(@current_user.nil?, "Login", { :controller => "sessions", :action => "new" }) %>
      # If the user isn't logged in...
      # => <a href="/sessions/new/">Login</a>
    
      <%=
         link_to_if(@current_user.nil?, "Login", { :controller => "sessions", :action => "new" }) do
           link_to(@current_user.login, { :controller => "accounts", :action => "show", :id => @current_user })
         end
      %>
      # If the user isn't logged in...
      # => <a href="/sessions/new/">Login</a>
      # If they are logged in...
      # => <a href="/accounts/show/3">my_username</a>
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/url_helper.rb, line 326
    326:       def link_to_if(condition, name, options = {}, html_options = {}, &block)
    327:         link_to_unless !condition, name, options, html_options, &block
    328:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/UrlHelper.html#M000917
- :tinyuri: http://tinyurl.com/244eay
  :path: 
  - ActionView
  - Helpers
  - PrototypeHelper
  :method: link_to_remote
  :description: "\n  \n    link_to_remote(name, options = {}, html_options = nil)\n  \n  \n  \n\
    Returns a link to a remote action defined by options[:url] (using\n\
    the url_for format) that\xE2\x80\x98s called in the background using\n\
    XMLHttpRequest. The result of that request can then be inserted into a DOM\n\
    object whose id can be specified with options[:update]. Usually,\n\
    the result would be a partial prepared by the controller with render\n\
    :partial.\n\n\n\
    Examples:\n\n\n  # Generates: <a href=\"#\" onclick=\"new Ajax.Updater('posts', '/blog/destroy/3', {asynchronous:true, evalScripts:true});\n  #            return false;\">Delete this post</a>\n  link_to_remote \"Delete this post\", :update => \"posts\",\n    :url => { :action => \"destroy\", :id => post.id }\n\n  # Generates: <a href=\"#\" onclick=\"new Ajax.Updater('emails', '/mail/list_emails', {asynchronous:true, evalScripts:true});\n  #            return false;\"><img alt=\"Refresh\" src=\"/images/refresh.png?\" /></a>\n  link_to_remote(image_tag(\"refresh\"), :update => \"emails\",\n    :url => { :action => \"list_emails\" })\n\n\n\
    You can override the generated HTML options by specifying a hash in\n\
    options[:html].\n\n\n  link_to_remote \"Delete this post\", :update => \"posts\",\n    :url  => post_url(@post), :method => :delete,\n    :html => { :class  => \"destructive\" }\n\n\n\
    You can also specify a hash for options[:update] to allow for easy\n\
    redirection of output to an other DOM element if a server-side error\n\
    occurs:\n\n\n\
    Example:\n\n\n  # Generates: <a href=\"#\" onclick=\"new Ajax.Updater({success:'posts',failure:'error'}, '/blog/destroy/5',\n  #            {asynchronous:true, evalScripts:true}); return false;\">Delete this post</a>\n  link_to_remote \"Delete this post\",\n    :url => { :action => \"destroy\", :id => post.id },\n    :update => { :success => \"posts\", :failure => \"error\" }\n\n\n\
    Optionally, you can use the options[:position] parameter to\n\
    influence how the target DOM element is updated. It must be one of\n\
    :before, :top, :bottom, or :after.\n\n\n\
    The method used is by default POST. You can also specify GET or you can\n\
    simulate PUT or DELETE over POST. All specified with\n\
    options[:method]\n\n\n\
    Example:\n\n\n  # Generates: <a href=\"#\" onclick=\"new Ajax.Request('/person/4', {asynchronous:true, evalScripts:true, method:'delete'});\n  #            return false;\">Destroy</a>\n  link_to_remote \"Destroy\", :url => person_url(:id => person), :method => :delete\n\n\n\
    By default, these remote requests are processed asynchronous during which\n\
    various JavaScript callbacks can be triggered (for progress indicators and\n\
    the likes). All callbacks get access to the request object, which\n\
    holds the underlying XMLHttpRequest.\n\n\n\
    To access the server response, use request.responseText, to find\n\
    out the HTTP status, use request.status.\n\n\n\
    Example:\n\n\n  # Generates: <a href=\"#\" onclick=\"new Ajax.Request('/words/undo?n=33', {asynchronous:true, evalScripts:true,\n  #            onComplete:function(request){undoRequestCompleted(request)}}); return false;\">hello</a>\n  word = 'hello'\n  link_to_remote word,\n    :url => { :action => \"undo\", :n => word_counter },\n    :complete => \"undoRequestCompleted(request)\"\n\n\n\
    The callbacks that may be specified are (in order):\n\n\n\
    :loading:Called when the remote document is being loaded with data by the browser.\n\n\n\
    :loaded:Called when the browser has finished loading the remote document.\n\n\n\
    :interactive:Called when the user can interact with the remote document, even though it\n\
    has not finished loading.\n\n\n\
    :success:Called when the XMLHttpRequest is completed, and the HTTP status code is in\n\
    the 2XX range.\n\n\n\
    :failure:Called when the XMLHttpRequest is completed, and the HTTP status code is\n\
    not in the 2XX range.\n\n\n\
    :complete:Called when the XMLHttpRequest is complete (fires after success/failure if\n\
    they are present).\n\n\n\n\n\
    You can further refine :success and :failure by adding\n\
    additional callbacks for specific status codes.\n\n\n\
    Example:\n\n\n  # Generates: <a href=\"#\" onclick=\"new Ajax.Request('/testing/action', {asynchronous:true, evalScripts:true,\n  #            on404:function(request){alert('Not found...? Wrong URL...?')},\n  #            onFailure:function(request){alert('HTTP Error ' + request.status + '!')}}); return false;\">hello</a>\n  link_to_remote word,\n    :url => { :action => \"action\" },\n    404 => \"alert('Not found...? Wrong URL...?')\",\n    :failure => \"alert('HTTP Error ' + request.status + '!')\"\n\n\n\
    A status code callback overrides the success/failure handlers if present.\n\n\n\
    If you for some reason or another need synchronous processing\n\
    (that\xE2\x80\x98ll block the browser while the request is happening), you can\n\
    specify options[:type] = :synchronous.\n\n\n\
    You can customize further browser side call logic by passing in JavaScript\n\
    code snippets via some optional parameters. In their order of use these\n\
    are:\n\n\n\
    :confirm:Adds confirmation dialog.\n\n\n\
    :condition:Perform remote request conditionally by this expression. Use this to\n\
    describe browser-side conditions when request should not be initiated.\n\n\n\
    :before:Called before request is initiated.\n\n\n\
    :after:Called immediately after request was initiated and before\n\
    :loading.\n\n\n\
    :submit:Specifies the DOM element ID that\xE2\x80\x98s used as the parent of the form\n\
    elements. By default this is the current form, but it could just as well be\n\
    the ID of a table row or any other DOM element.\n\n\n\
    :with:A JavaScript expression specifying the parameters for the XMLHttpRequest.\n\
    Any expressions should return a valid URL query string.\n\n\n\
    Example:\n\n\n  :with => \"'name=' + $('name').value\"\n\n\n\n\n\
    You can generate a link that uses AJAX in the general case, while degrading\n\
    gracefully to plain link behavior in the absence of JavaScript by setting\n\
    html_options[:href] to an alternate URL. Note the extra curly\n\
    braces around the options hash separate it as the second parameter\n\
    from html_options, the third.\n\n\n\
    254:       def link_to_remote(name, options = {}, html_options = nil)  \n\
    255:         link_to_function(name, remote_function(options), html_options || options.delete(:html))\n\
    256:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/PrototypeHelper.html#M000958
- :tinyuri: http://tinyurl.com/28453t
  :path: 
  - ActionView
  - Helpers
  - UrlHelper
  :method: link_to_unless
  :description: |+
    
        link_to_unless(condition, name, options = {}, html_options = {}) {|name| ...}
    Creates a link tag of the given name using a URL created by the
    set of options unless condition is true, in which case
    only the name is returned. To specialize the default behavior (i.e., show a
    login link rather than just the plaintext link text), you can pass a block
    that accepts the name or the full argument list for link_to_unless.
    
    Examples
    
      <%= link_to_unless(@current_user.nil?, "Reply", { :action => "reply" }) %>
      # If the user is logged in...
      # => <a href="/controller/reply/">Reply</a>
    
      <%=
         link_to_unless(@current_user.nil?, "Reply", { :action => "reply" }) do |name|
           link_to(name, { :controller => "accounts", :action => "signup" })
         end
      %>
      # If the user is logged in...
      # => <a href="/controller/reply/">Reply</a>
      # If not...
      # => <a href="/accounts/signup">Reply</a>
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/url_helper.rb, line 294
    294:       def link_to_unless(condition, name, options = {}, html_options = {}, &block)
    295:         if condition
    296:           if block_given?
    297:             block.arity <= 1 ? yield(name) : yield(name, options, html_options)
    298:           else
    299:             name
    300:           end
    301:         else
    302:           link_to(name, options, html_options)
    303:         end
    304:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/UrlHelper.html#M000916
- :tinyuri: http://tinyurl.com/44fv8z
  :path: 
  - ActionView
  - Helpers
  - UrlHelper
  :method: link_to_unless_current
  :description: "\n  \n    link_to_unless_current(name, options = {}, html_options = {}, &block)\n  \n  \n  \n\
    Creates a link tag of the given name using a URL created by the\n\
    set of options unless the current request URI is the same as the\n\
    links, in which case only the name is returned (or the given block is\n\
    yielded, if one exists). You can give link_to_unless_current a block which will\n\
    specialize the default behavior (e.g., show a \"Start Here\" link\n\
    rather than the link\xE2\x80\x98s text).\n\n\
    Examples\n\n\
    Let\xE2\x80\x98s say you have a navigation menu\xE2\x80\xA6\n\n\n  <ul id=\"navbar\">\n    <li><%= link_to_unless_current(\"Home\", { :action => \"index\" }) %></li>\n    <li><%= link_to_unless_current(\"About Us\", { :action => \"about\" }) %></li>\n  </ul>\n\n\n\
    If in the \"about\" action, it will render\xE2\x80\xA6\n\n\n  <ul id=\"navbar\">\n    <li><a href=\"/controller/index\">Home</a></li>\n    <li>About Us</li>\n  </ul>\n\n\n\
    \xE2\x80\xA6but if in the \"home\" action, it will render:\n\n\n  <ul id=\"navbar\">\n    <li><a href=\"/controller/index\">Home</a></li>\n    <li><a href=\"/controller/about\">About Us</a></li>\n  </ul>\n\n\n\
    The implicit block given to link_to_unless_current is evaluated if\n\
    the current action is the action given. So, if we had a comments page and\n\
    wanted to render a \"Go Back\" link instead of a link to the\n\
    270:       def link_to_unless_current(name, options = {}, html_options = {}, &block)\n\
    271:         link_to_unless current_page?(options), name, options, html_options, &block\n\
    272:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/UrlHelper.html#M000915
- :tinyuri: http://tinyurl.com/3jqclv
  :path: 
  - RecursiveHTTPFetcher
  :method: links
  :description: |+
    
        links(base_url, contents)
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 886
    886:   def links(base_url, contents)
    887:     links = []
    888:     contents.scan(/href\s*=\s*\"*[^\">]*/i) do |link|
    889:       link = link.sub(/href="/i, "")
    890:       next if link =~ /svnindex.xsl$/
    891:       next if link =~ /^(\w*:|)\/\// || link =~ /^\./
    892:       links << File.join(base_url, link)
    893:     end
    894:     links
    895:   end
    
    
  :uri: http://api.rubyonrails.org/classes/RecursiveHTTPFetcher.html#M000012
- :tinyuri: http://tinyurl.com/4f32qu
  :path: 
  - ActionView
  - Helpers
  - PrototypeHelper
  - JavaScriptGenerator
  - GeneratorMethods
  :method: literal
  :description: |+
    
        literal(code)
    Returns an object whose to_json evaluates to code. Use
    this to pass a literal
    JavaScript expression as an argument to another JavaScriptGenerator method.
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/prototype_helper.rb, line 671
    671:           def literal(code)
    672:             ActiveSupport::JSON::Variable.new(code.to_s)
    673:           end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#M000975
- :tinyuri: http://tinyurl.com/4t7utd
  :path: 
  - ActiveSupport
  - Multibyte
  - Handlers
  - UTF8Handler
  :method: ljust
  :description: "\n  \n    ljust(str, integer, padstr=' ')\n  \n  \n  \n\
    Works just like String#ljust, only integer specifies characters instead of\n\
    bytes.\n\n\n\
    204:       def ljust(str, integer, padstr=' ')\n\
    205:         justify(str, integer, :left, padstr)\n\
    206:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Handlers/UTF8Handler.html#M000519
- :tinyuri: http://tinyurl.com/3qsqn6
  :path: 
  - ActiveResource
  - Base
  :method: load
  :description: |+
    
        load(attributes)
    A method to manually load attributes from a
    hash. Recursively loads collections of
    resources. This method is called in initialize and create when a Hash of attributes is
    provided.
    
    Examples
    
      my_attrs = {:name => 'J&J Textiles', :industry => 'Cloth and textiles'}
    
      the_supplier = Supplier.find(:first)
      the_supplier.name
      # => 'J&M Textiles'
      the_supplier.load(my_attrs)
      the_supplier.name('J&J Textiles')
    
      # These two calls are the same as Supplier.new(my_attrs)
      my_supplier = Supplier.new
      my_supplier.load(my_attrs)
    
      # These three calls are the same as Supplier.create(my_attrs)
      your_supplier = Supplier.new
      your_supplier.load(my_attrs)
      your_supplier.save
    
    
    
         # File vendor/rails/activeresource/lib/active_resource/base.rb, line 750
    750:     def load(attributes)
    751:       raise ArgumentError, "expected an attributes Hash, got #{attributes.inspect}" unless attributes.is_a?(Hash)
    752:       @prefix_options, attributes = split_options(attributes)
    753:       attributes.each do |key, value|
    754:         @attributes[key.to_s] =
    755:           case value
    756:             when Array
    757:               resource = find_or_create_resource_for_collection(key)
    758:               value.map { |attrs| resource.new(attrs) }
    759:             when Hash
    760:               resource = find_or_create_resource_for(key)
    761:               resource.new(value)
    762:             else
    763:               value.dup rescue value
    764:           end
    765:       end
    766:       self
    767:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Base.html#M000853
- :tinyuri: http://tinyurl.com/4m5gs5
  :path: 
  - Repositories
  :method: load!
  :description: |+
    
        load!()
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 312
    312:   def load!
    313:     contents = File.exist?(@cache_file) ? File.read(@cache_file) : defaults
    314:     contents = defaults if contents.empty?
    315:     @repositories = contents.split(/\n/).reject do |line|
    316:       line =~ /^\s*#/ or line =~ /^\s*$/
    317:     end.map { |source| Repository.new(source.strip) }
    318:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Repositories.html#M000085
- :tinyuri: http://tinyurl.com/3fcg8q
  :path: 
  - Rails
  - Initializer
  :method: load_application_initializers
  :description: |+
    
        load_application_initializers()
    
    
         # File vendor/rails/railties/lib/initializer.rb, line 341
    341:     def load_application_initializers
    342:       Dir["#{configuration.root_path}/config/initializers/**/*.rb"].sort.each do |initializer|
    343:         load(initializer)
    344:       end
    345:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Initializer.html#M001595
- :tinyuri: http://tinyurl.com/4am6dp
  :path: 
  - ActiveResource
  - Base
  :method: load_attributes_from_response
  :description: |+
    
        load_attributes_from_response(response)
    
    
         # File vendor/rails/activeresource/lib/active_resource/base.rb, line 810
    810:       def load_attributes_from_response(response)
    811:         if response['Content-Length'] != "0" && response.body.strip.size > 0
    812:           load(self.class.format.decode(response.body))
    813:         end
    814:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Base.html#M000858
- :tinyuri: http://tinyurl.com/3thbb9
  :path: 
  - Rails
  - Initializer
  :method: load_environment
  :description: |+
    
        load_environment()
    Loads the environment specified by Configuration#environment_path, which
    is typically one of development, test, or production.
    
    
    
         # File vendor/rails/railties/lib/initializer.rb, line 199
    199:     def load_environment
    200:       silence_warnings do
    201:         return if @environment_loaded
    202:         @environment_loaded = true
    203:         
    204:         config = configuration
    205:         constants = self.class.constants
    206:         
    207:         eval(IO.read(configuration.environment_path), binding, configuration.environment_path)
    208:         
    209:         (self.class.constants - constants).each do |const|
    210:           Object.const_set(const, self.class.const_get(const))
    211:         end
    212:       end
    213:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Initializer.html#M001582
- :tinyuri: http://tinyurl.com/3meuay
  :path: 
  - Rails
  - Initializer
  :method: load_observers
  :description: |+
    
        load_observers()
    
    
         # File vendor/rails/railties/lib/initializer.rb, line 215
    215:     def load_observers
    216:       if configuration.frameworks.include?(:active_record)
    217:         ActiveRecord::Base.instantiate_observers
    218:       end
    219:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Initializer.html#M001583
- :tinyuri: http://tinyurl.com/4vtfhg
  :path: 
  - Rails
  - Initializer
  :method: load_plugins
  :description: |+
    
        load_plugins()
    Loads all plugins in config.plugin_paths. plugin_paths
    defaults to vendor/plugins but may also be set to a list of paths,
    such as
    
    
      config.plugin_paths = ["#{RAILS_ROOT}/lib/plugins", "#{RAILS_ROOT}/vendor/plugins"]
    
    
    In the default implementation, as each plugin discovered in
    plugin_paths is initialized:
    
    
    its lib directory, if present, is added to the load path
    (immediately after the applications lib directory)
    
    
    init.rb is evaluated, if present
    
    
    
    
    After all plugins are loaded, duplicates are removed from the load path. If
    an array of plugin names is specified in config.plugins, only those plugins
    will be loaded and they plugins will be loaded in that order. Otherwise,
    plugins are loaded in alphabetical order.
    
    
    if config.plugins ends contains :all then the named plugins will be loaded
    in the given order and all other plugins will be loaded in alphabetical
    order
    
    
    
         # File vendor/rails/railties/lib/initializer.rb, line 189
    189:     def load_plugins
    190:       plugin_loader.load_plugins
    191:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Initializer.html#M001580
- :tinyuri: http://tinyurl.com/4e6tut
  :path: 
  - ActionController
  - RequestProfiler
  :method: load_ruby_prof
  :description: |+
    
        load_ruby_prof()
    
    
         # File vendor/rails/actionpack/lib/action_controller/request_profiler.rb, line 117
    117:       def load_ruby_prof
    118:         begin
    119:           require 'ruby-prof'
    120:           #RubyProf.measure_mode = RubyProf::ALLOCATED_OBJECTS
    121:         rescue LoadError
    122:           abort '`gem install ruby-prof` to use the profiler'
    123:         end
    124:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/RequestProfiler.html#M000387
- :tinyuri: http://tinyurl.com/4x2ysd
  :path: 
  - ActiveSupport
  - CoreExtensions
  - DateTime
  - Calculations
  - ClassMethods
  :method: local_offset
  :description: "\n  \n    local_offset()\n  \n  \n  \n\
    DateTimes aren\xE2\x80\x98t aware of DST rules, so use a consistent non-DST\n\
    14:           def local_offset\n\
    15:             ::Time.local(2007).utc_offset.to_r / 86400\n\
    16:           end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/DateTime/Calculations/ClassMethods.html#M000733
- :tinyuri: http://tinyurl.com/4sbpxc
  :path: 
  - ActionController
  - Rescue
  :method: local_request?
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionController/Rescue.html#M000223
- :tinyuri: http://tinyurl.com/474ftl
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Calculations
  - ClassMethods
  :method: local_time
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Calculations/ClassMethods.html#M000610
- :tinyuri: http://tinyurl.com/3v9n3b
  :path: 
  - ActiveRecord
  - Locking
  - Pessimistic
  :method: lock!
  :description: |+
    
        lock!(lock = true)
    Obtain a row lock on this record. Reloads the record to obtain the
    requested lock. Pass an SQL locking clause to append the end of the SELECT
    statement or pass true for "FOR UPDATE" (the default, an
    exclusive row lock). Returns the locked record.
    
    
    
        # File vendor/rails/activerecord/lib/active_record/locking/pessimistic.rb, line 71
    71:       def lock!(lock = true)
    72:         reload(:lock => lock) unless new_record?
    73:         self
    74:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Locking/Pessimistic.html#M001107
- :tinyuri: http://tinyurl.com/4qjd8a
  :path: 
  - ActiveRecord
  - Locking
  - Optimistic
  - ClassMethods
  :method: locking_column
  :description: |+
    
        locking_column()
    The version column used for optimistic locking. Defaults to lock_version.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/locking/optimistic.rb, line 122
    122:         def locking_column
    123:           reset_locking_column
    124:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#M001111
- :tinyuri: http://tinyurl.com/4jgw72
  :path: 
  - ActiveRecord
  - Locking
  - Optimistic
  - ClassMethods
  :method: locking_enabled?
  :description: |+
    
        locking_enabled?()
    Is optimistic locking enabled for this table? Returns true if the
    lock_optimistically flag is set to true (which it is, by default) and the
    table includes the locking_column
    column (defaults to lock_version).
    
    
    
         # File vendor/rails/activerecord/lib/active_record/locking/optimistic.rb, line 111
    111:         def locking_enabled?
    112:           lock_optimistically && columns_hash[locking_column]
    113:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#M001109
- :tinyuri: http://tinyurl.com/5xlr9z
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - AbstractAdapter
  :method: log
  :description: |+
    
        log(sql, name) {|| ...}
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 128
    128:         def log(sql, name)
    129:           if block_given?
    130:             if @logger and @logger.debug?
    131:               result = nil
    132:               seconds = Benchmark.realtime { result = yield }
    133:               @runtime += seconds
    134:               log_info(sql, name, seconds)
    135:               result
    136:             else
    137:               yield
    138:             end
    139:           else
    140:             log_info(sql, name, 0)
    141:             nil
    142:           end
    143:         rescue Exception => e
    144:           # Log message and raise exception.
    145:           # Set last_verification to 0, so that connection gets verified
    146:           # upon reentering the request loop
    147:           @last_verification = 0
    148:           message = "#{e.class.name}: #{e.message}: #{sql}"
    149:           log_info(message, name, 0)
    150:           raise ActiveRecord::StatementInvalid, message
    151:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#M001295
- :tinyuri: http://tinyurl.com/4fw8mv
  :path: 
  - ActionController
  - Rescue
  :method: log_error
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionController/Rescue.html#M000220
- :tinyuri: http://tinyurl.com/4u43pe
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - AbstractAdapter
  :method: log_info
  :description: |+
    
        log_info(sql, name, runtime)
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 120
    120:       def log_info(sql, name, runtime)
    121:         if @logger && @logger.debug?
    122:           name = "#{name.nil? ? "SQL" : name} (#{sprintf("%f", runtime)})"
    123:           @logger.debug format_log_entry(name, sql.squeeze(' '))
    124:         end
    125:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#M001294
- :tinyuri: http://tinyurl.com/3rowj7
  :path: 
  - RailsFCGIHandler
  :method: logger
  :description: |+
    
        logger()
    
    
         # File vendor/rails/railties/lib/fcgi_handler.rb, line 110
    110:     def logger
    111:       @logger ||= Logger.new(@log_file_path)
    112:     end
    
    
  :uri: http://api.rubyonrails.org/classes/RailsFCGIHandler.html#M000034
- :tinyuri: http://tinyurl.com/4nymo6
  :path: 
  - Rails
  - Generator
  - Lookup
  - ClassMethods
  :method: lookup
  :description: 
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Lookup/ClassMethods.html#M001539
- :tinyuri: http://tinyurl.com/546hqm
  :path: 
  - Mime
  - Type
  :method: lookup
  :description: |+
    
        lookup(string)
    
    
        # File vendor/rails/actionpack/lib/action_controller/mime_type.rb, line 47
    47:       def lookup(string)
    48:         LOOKUP[string]
    49:       end
    
    
  :uri: http://api.rubyonrails.org/classes/Mime/Type.html#M001648
- :tinyuri: http://tinyurl.com/3t2otp
  :path: 
  - Mime
  - Type
  :method: lookup_by_extension
  :description: |+
    
        lookup_by_extension(extension)
    
    
        # File vendor/rails/actionpack/lib/action_controller/mime_type.rb, line 51
    51:       def lookup_by_extension(extension)
    52:         EXTENSION_LOOKUP[extension]
    53:       end
    
    
  :uri: http://api.rubyonrails.org/classes/Mime/Type.html#M001649
- :tinyuri: http://tinyurl.com/3mxash
  :path: 
  - Object
  :method: lookup_missing_generator
  :description: |+
    
        lookup_missing_generator(class_id)
    Lookup missing generators using const_missing. This allows any generator to
    reference another without having to know its location: RubyGems,
    ~/.rails/generators, and RAILS_ROOT/generators.
    
    
    
        # File vendor/rails/railties/lib/rails_generator/lookup.rb, line 8
     8:     def lookup_missing_generator(class_id)
     9:       if md = /(.+)Generator$/.match(class_id.to_s)
    10:         name = md.captures.first.demodulize.underscore
    11:         Rails::Generator::Base.lookup(name).klass
    12:       else
    13:         const_missing_before_generators(class_id)
    14:       end
    15:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Object.html#M000131
- :tinyuri: http://tinyurl.com/4hayxg
  :path: 
  - RecursiveHTTPFetcher
  :method: ls
  :description: |+
    
        ls()
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 865
    865:   def ls
    866:     @urls_to_fetch.collect do |url|
    867:       if url =~ /^svn:\/\/.*/
    868:         `svn ls #{url}`.split("\n").map {|entry| "/#{entry}"} rescue nil
    869:       else
    870:         open(url) do |stream|
    871:           links("", stream.read)
    872:         end rescue nil
    873:       end
    874:     end.flatten
    875:   end
    
    
  :uri: http://api.rubyonrails.org/classes/RecursiveHTTPFetcher.html#M000009
- :tinyuri: http://tinyurl.com/4vet2w
  :path: 
  - ActiveSupport
  - Multibyte
  - Handlers
  - UTF8Handler
  :method: lstrip
  :description: |+
    
        lstrip(str)
    Does Unicode-aware lstrip
    
    
    
         # File vendor/rails/activesupport/lib/active_support/multibyte/handlers/utf8_handler.rb, line 227
    227:       def lstrip(str)
    228:         str.gsub(UNICODE_LEADERS_PAT, '')
    229:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Handlers/UTF8Handler.html#M000522
- :tinyuri: http://tinyurl.com/4dpagc
  :path: 
  - ActiveRecord
  - Reflection
  - MacroReflection
  :method: macro
  :description: "\n  \n    macro()\n  \n  \n  \n\
    Returns the type of the macro,\n\
    so it would return :composed_of for \"composed_of :balance, :class_name =>\n\
    87:       def macro\n\
    88:         @macro\n\
    89:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Reflection/MacroReflection.html#M001128
- :tinyuri: http://tinyurl.com/4ru5zs
  :path: 
  - ActionView
  - Helpers
  - UrlHelper
  :method: mail_to
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/UrlHelper.html#M000918
- :tinyuri: http://tinyurl.com/4krohk
  :path: 
  - ActionMailer
  - Base
  :method: mailer_name
  :description: |+
    
        mailer_name()
    
    
         # File vendor/rails/actionmailer/lib/action_mailer/base.rb, line 341
    341:       def mailer_name
    342:         @mailer_name ||= name.underscore
    343:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionMailer/Base.html#M000876
- :tinyuri: http://tinyurl.com/3gn8jb
  :path: 
  - ActionMailer
  - Base
  :method: mailer_name
  :description: "\n  \n    mailer_name(value = nil)\n  \n  \n  \n\
    Override the mailer name, which defaults to an inflected version of the\n\
    mailer\xE2\x80\x98s class name. If you want to use a template in a non-standard\n\
    323:     def mailer_name(value = nil)\n\
    324:       if value\n\
    325:         self.mailer_name = value\n\
    326:       else\n\
    327:         self.class.mailer_name\n\
    328:       end\n\
    329:     end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionMailer/Base.html#M000874
- :tinyuri: http://tinyurl.com/3us3lr
  :path: 
  - ActionMailer
  - Base
  :method: mailer_name=
  :description: |+
    
        mailer_name=(value)
    
    
         # File vendor/rails/actionmailer/lib/action_mailer/base.rb, line 331
    331:     def mailer_name=(value)
    332:       self.class.mailer_name = value
    333:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionMailer/Base.html#M000875
- :tinyuri: http://tinyurl.com/3npmkj
  :path: 
  - Rails
  - Generator
  - Options
  - ClassMethods
  :method: mandatory_options
  :description: |+
    
        mandatory_options(options = nil)
    
    
        # File vendor/rails/railties/lib/rails_generator/options.rb, line 22
    22:         def mandatory_options(options = nil)
    23:           if options
    24:             write_inheritable_attribute(:mandatory_options, options)
    25:           else
    26:             read_inheritable_attribute(:mandatory_options) or write_inheritable_attribute(:mandatory_options, {})
    27:           end
    28:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Options/ClassMethods.html#M001486
- :tinyuri: http://tinyurl.com/5x77sy
  :path: 
  - Rails
  - Generator
  - Options
  :method: mandatory_options
  :description: |+
    
        mandatory_options()
    Convenient access to class mandatory options.
    
    
    
        # File vendor/rails/railties/lib/rails_generator/options.rb, line 56
    56:         def mandatory_options
    57:           self.class.mandatory_options
    58:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Options.html#M001476
- :tinyuri: http://tinyurl.com/3rad4n
  :path: 
  - Rails
  - Generator
  - Base
  :method: manifest
  :description: "\n  \n    manifest()\n  \n  \n  \n\
    Generators must provide a manifest. Use the\n\
    record method to create a new manifest\n\
    122:       def manifest\n\
    123:         raise NotImplementedError, \"No manifest for '#{spec.name}' generator.\"\n\
    124:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Base.html#M001564
- :tinyuri: http://tinyurl.com/4mk39m
  :path: 
  - RailsFCGIHandler
  :method: mark_features!
  :description: |+
    
        mark_features!()
    Make a note of $" so we can safely reload this instance.
    
    
    
         # File vendor/rails/railties/lib/fcgi_handler.rb, line 197
    197:     def mark_features!
    198:       @features = $".clone
    199:     end
    
    
  :uri: http://api.rubyonrails.org/classes/RailsFCGIHandler.html#M000046
- :tinyuri: http://tinyurl.com/3mtgoz
  :path: 
  - ActionView
  - Helpers
  - TextHelper
  :method: markdown
  :description: |+
    
        markdown(text)
    Returns the text with all the Markdown codes turned into HTML tags.
    This method is only available if BlueCloth is
    available.
    
    Examples
    
      markdown("We are using __Markdown__ now!")
      # => "<p>We are using <strong>Markdown</strong> now!</p>"
    
      markdown("We like to _write_ `code`, not just _read_ it!")
      # => "<p>We like to <em>write</em> <code>code</code>, not just <em>read</em> it!</p>"
    
      markdown("The [Markdown website](http://daringfireball.net/projects/markdown/) has more information.")
      # => "<p>The <a href="http://daringfireball.net/projects/markdown/">Markdown website</a>
      #     has more information.</p>"
    
      markdown('![The ROR logo](http://rubyonrails.com/images/rails.png "Ruby on Rails")')
      # => '<p><img src="http://rubyonrails.com/images/rails.png" alt="The ROR logo" title="Ruby on Rails" /></p>'
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/text_helper.rb, line 249
    249:         def markdown(text)
    250:           text.blank? ? "" : BlueCloth.new(text).to_html
    251:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/TextHelper.html#M001056
- :tinyuri: http://tinyurl.com/44ybry
  :path: 
  - HTML
  - Selector
  :method: match
  :description: 
  :uri: http://api.rubyonrails.org/classes/HTML/Selector.html#M000167
- :tinyuri: http://tinyurl.com/4elgcd
  :path: 
  - ActiveRecord
  - AttributeMethods
  - ClassMethods
  :method: match_attribute_method?
  :description: |+
    
        match_attribute_method?(method_name)
    Returns MatchData if method_name is an attribute method.
    
    
    
        # File vendor/rails/activerecord/lib/active_record/attribute_methods.rb, line 44
    44:       def match_attribute_method?(method_name)
    45:         rebuild_attribute_method_regexp unless defined?(@@attribute_method_regexp) && @@attribute_method_regexp
    46:         @@attribute_method_regexp.match(method_name)
    47:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/AttributeMethods/ClassMethods.html#M001095
- :tinyuri: http://tinyurl.com/4sqbet
  :path: 
  - ActiveRecord
  - Calculations
  - ClassMethods
  :method: maximum
  :description: |+
    
        maximum(column_name, options = {})
    Calculates the maximum value on a
    given column. The value is returned with the same data type of the column.
    See calculate for examples with
    options.
    
    
      Person.maximum('age')
    
    
    
        # File vendor/rails/activerecord/lib/active_record/calculations.rb, line 66
    66:       def maximum(column_name, options = {})
    67:         calculate(:max, column_name, options)
    68:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Calculations/ClassMethods.html#M001340
- :tinyuri: http://tinyurl.com/4lnudl
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Numeric
  - Bytes
  :method: megabyte
  :description: |
    
        megabyte()
    Alias for megabytes
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Numeric/Bytes.html#M000663
- :tinyuri: http://tinyurl.com/52spg4
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Numeric
  - Bytes
  :method: megabytes
  :description: |+
    
        megabytes()
    
      This method is also aliased as
      megabyte
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/numeric/bytes.rb, line 16
    16:         def megabytes
    17:           self * 1024.kilobytes
    18:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Numeric/Bytes.html#M000662
- :tinyuri: http://tinyurl.com/4ct4kb
  :path: 
  - HashWithIndifferentAccess
  :method: merge
  :description: |+
    
        merge(hash)
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/hash/indifferent_access.rb, line 56
    56:   def merge(hash)
    57:     self.dup.update(hash)
    58:   end
    
    
  :uri: http://api.rubyonrails.org/classes/HashWithIndifferentAccess.html#M000070
- :tinyuri: http://tinyurl.com/4rxwmr
  :path: 
  - ActionController
  - AbstractRequest
  :method: method
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionController/AbstractRequest.html#M000394
- :tinyuri: http://tinyurl.com/4jvzlj
  :path: 
  - Object
  :method: method_added
  :description: |+
    
        method_added(name)
    Detect method additions to Object and remove them
    in the BlankSlate class.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/vendor/builder-2.1.2/blankslate.rb, line 83
    83:     def method_added(name)
    84:       result = blank_slate_method_added(name)
    85:       return result if self != Object
    86:       BlankSlate.hide(name)
    87:       result
    88:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Object.html#M000144
- :tinyuri: http://tinyurl.com/4gds4f
  :path: 
  - Kernel
  :method: method_added
  :description: |+
    
        method_added(name)
    Detect method additions to Kernel and remove them
    in the BlankSlate class.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/vendor/builder-2.1.2/blankslate.rb, line 65
    65:     def method_added(name)
    66:       result = blank_slate_method_added(name)
    67:       return result if self != Kernel
    68:       BlankSlate.hide(name)
    69:       result
    70:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Kernel.html#M001644
- :tinyuri: http://tinyurl.com/4uzn6v
  :path: 
  - Builder
  - XmlBase
  :method: method_missing
  :description: |+
    
        method_missing(sym, *args, &block)
    Create XML markup based on the name of the method. This method is never
    invoked directly, but is called for each markup method in the markup block.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/vendor/builder-2.1.2/builder/xmlbase.rb, line 37
    37:     def method_missing(sym, *args, &block)
    38:       text = nil
    39:       attrs = nil
    40:       sym = "#{sym}:#{args.shift}" if args.first.kind_of?(Symbol)
    41:       args.each do |arg|
    42:         case arg
    43:         when Hash
    44:           attrs ||= {}
    45:           attrs.merge!(arg)
    46:         else
    47:           text ||= ''
    48:           text << arg.to_s
    49:         end
    50:       end
    51:       if block
    52:         unless text.nil?
    53:           raise ArgumentError, "XmlMarkup cannot mix a text argument with a block"
    54:         end
    55:         _indent
    56:         _start_tag(sym, attrs)
    57:         _newline
    58:         _nested_structures(block)
    59:         _indent
    60:         _end_tag(sym)
    61:         _newline
    62:       elsif text.nil?
    63:         _indent
    64:         _start_tag(sym, attrs, true)
    65:         _newline
    66:       else
    67:         _indent
    68:         _start_tag(sym, attrs)
    69:         text! text
    70:         _end_tag(sym)
    71:         _newline
    72:       end
    73:       @target
    74:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Builder/XmlBase.html#M000886
- :tinyuri: http://tinyurl.com/3s6jxo
  :path: 
  - ActionController
  - TestProcess
  :method: method_missing
  :description: |+
    
        method_missing(selector, *args)
    
    
         # File vendor/rails/actionpack/lib/action_controller/test_process.rb, line 463
    463:     def method_missing(selector, *args)
    464:       return @controller.send!(selector, *args) if ActionController::Routing::Routes.named_routes.helpers.include?(selector)
    465:       return super
    466:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/TestProcess.html#M000203
- :tinyuri: http://tinyurl.com/49be37
  :path: 
  - ActiveRecord
  - Migration
  :method: method_missing
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Migration.html#M001374
- :tinyuri: http://tinyurl.com/54l486
  :path: 
  - Builder
  - CSS
  :method: method_missing
  :description: |+
    
        method_missing(sym, *args, &block)
    
    
         # File vendor/rails/activesupport/lib/active_support/vendor/builder-2.1.2/builder/css.rb, line 171
    171:     def method_missing(sym, *args, &block)
    172:       sym = "#{sym}:#{args.shift}" if args.first.kind_of?(Symbol)
    173:       if block
    174:         _start_container(sym, args.first)
    175:         _css_block(block)
    176:         _unify_block
    177:       elsif @in_block
    178:         _indent
    179:         _css_line(sym, *args)
    180:         _newline
    181:         return self
    182:       else
    183:         _start_container(sym, args.first, false)
    184:         _unify_block
    185:       end
    186:       self
    187:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Builder/CSS.html#M000907
- :tinyuri: http://tinyurl.com/3ecmxt
  :path: 
  - ActionController
  - Integration
  - Runner
  :method: method_missing
  :description: |+
    
        method_missing(sym, *args, &block)
    Delegate unhandled messages to the current session instance.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/integration.rb, line 446
    446:       def method_missing(sym, *args, &block)
    447:         reset! unless @integration_session
    448:         returning @integration_session.send!(sym, *args, &block) do
    449:           copy_session_variables!
    450:         end
    451:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Integration/Runner.html#M000232
- :tinyuri: http://tinyurl.com/49mc5s
  :path: 
  - Rails
  - Generator
  - Manifest
  :method: method_missing
  :description: |+
    
        method_missing(action, *args, &block)
    Record an action.
    
    
    
        # File vendor/rails/railties/lib/rails_generator/manifest.rb, line 25
    25:       def method_missing(action, *args, &block)
    26:         @actions << [action, args, block]
    27:       end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Manifest.html#M001548
- :tinyuri: http://tinyurl.com/3shh3c
  :path: 
  - ActiveSupport
  - Multibyte
  - Chars
  :method: method_missing
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Chars.html#M000554
- :tinyuri: http://tinyurl.com/3lf324
  :path: 
  - ActionView
  - Helpers
  - PrototypeHelper
  :method: method_option_to_s
  :description: |+
    
        method_option_to_s(method)
    
    
          # File vendor/rails/actionpack/lib/action_view/helpers/prototype_helper.rb, line 1034
    1034:       def method_option_to_s(method) 
    1035:         (method.is_a?(String) and !method.index("'").nil?) ? method : "'#{method}'"
    1036:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/PrototypeHelper.html#M000971
- :tinyuri: http://tinyurl.com/4goq73
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - Column
  :method: microseconds
  :description: "\n  \n    microseconds(time)\n  \n  \n  \n\
    159:           def microseconds(time)\n\
    160:             ((time[:sec_fraction].to_f % 1) * 1_000_000).to_i\n\
    161:           end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/Column.html#M001212
- :tinyuri: http://tinyurl.com/4utl9j
  :path: 
  - ActiveSupport
  - CoreExtensions
  - DateTime
  - Calculations
  :method: midnight
  :description: |
    
        midnight()
    Alias for beginning_of_day
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/DateTime/Calculations.html#M000729
- :tinyuri: http://tinyurl.com/4d72mw
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Calculations
  :method: midnight
  :description: |
    
        midnight()
    Alias for beginning_of_day
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Calculations.html#M000593
- :tinyuri: http://tinyurl.com/3w27kg
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Date
  - Calculations
  :method: midnight
  :description: |
    
        midnight()
    Alias for beginning_of_day
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Date/Calculations.html#M000684
- :tinyuri: http://tinyurl.com/4rbupf
  :path: 
  - ActiveRecord
  - Migration
  :method: migrate
  :description: |+
    
        migrate(direction)
    Execute this migration in the named direction
    
    
    
         # File vendor/rails/activerecord/lib/active_record/migration.rb, line 210
    210:       def migrate(direction)
    211:         return unless respond_to?(direction)
    212: 
    213:         case direction
    214:           when :up   then announce "migrating"
    215:           when :down then announce "reverting"
    216:         end
    217: 
    218:         result = nil
    219:         time = Benchmark.measure { result = send("#{direction}_without_benchmarks") }
    220: 
    221:         case direction
    222:           when :up   then announce "migrated (%.4fs)" % time.real; write
    223:           when :down then announce "reverted (%.4fs)" % time.real; write
    224:         end
    225: 
    226:         result
    227:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Migration.html#M001368
- :tinyuri: http://tinyurl.com/464llo
  :path: 
  - Rails
  - Generator
  - Commands
  - Base
  :method: migration_directory
  :description: |+
    
        migration_directory(relative_path)
    
    
        # File vendor/rails/railties/lib/rails_generator/commands.rb, line 60
    60:           def migration_directory(relative_path)
    61:             directory(@migration_directory = relative_path)
    62:           end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Commands/Base.html#M001502
- :tinyuri: http://tinyurl.com/5yebqn
  :path: 
  - Rails
  - Generator
  - Commands
  - Base
  :method: migration_exists?
  :description: |+
    
        migration_exists?(file_name)
    
    
        # File vendor/rails/railties/lib/rails_generator/commands.rb, line 68
    68:           def migration_exists?(file_name)
    69:             not existing_migrations(file_name).empty?
    70:           end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Commands/Base.html#M001504
- :tinyuri: http://tinyurl.com/4benuu
  :path: 
  - Rails
  - Generator
  - Commands
  - Create
  :method: migration_template
  :description: |+
    
        migration_template(relative_source, relative_destination, template_options = {})
    When creating a migration, it knows to find the first available file in db/migrate and use the migration.rb
    template.
    
    
    
         # File vendor/rails/railties/lib/rails_generator/commands.rb, line 344
    344:         def migration_template(relative_source, relative_destination, template_options = {})
    345:           migration_directory relative_destination
    346:           migration_file_name = template_options[:migration_file_name] || file_name
    347:           raise "Another migration is already named #{migration_file_name}: #{existing_migrations(migration_file_name).first}" if migration_exists?(migration_file_name)
    348:           template(relative_source, "#{relative_destination}/#{next_migration_string}_#{migration_file_name}.rb", template_options)
    349:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Commands/Create.html#M001529
- :tinyuri: http://tinyurl.com/4zh4w5
  :path: 
  - Rails
  - Generator
  - Commands
  - Destroy
  :method: migration_template
  :description: |+
    
        migration_template(relative_source, relative_destination, template_options = {})
    When deleting a migration, it knows to delete every file named "[0-9]*_#{file_name}".
    
    
    
         # File vendor/rails/railties/lib/rails_generator/commands.rb, line 489
    489:         def migration_template(relative_source, relative_destination, template_options = {})
    490:           migration_directory relative_destination
    491: 
    492:           migration_file_name = template_options[:migration_file_name] || file_name
    493:           unless migration_exists?(migration_file_name)
    494:             puts "There is no migration named #{migration_file_name}"
    495:             return
    496:           end
    497: 
    498: 
    499:           existing_migrations(migration_file_name).each do |file_path|
    500:             file(relative_source, file_path, template_options)
    501:           end
    502:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Commands/Destroy.html#M001495
- :tinyuri: http://tinyurl.com/4xrjcz
  :path: 
  - Rails
  - Generator
  - Commands
  - List
  :method: migration_template
  :description: |+
    
        migration_template(relative_source, relative_destination, options = {})
    
    
         # File vendor/rails/railties/lib/rails_generator/commands.rb, line 543
    543:         def migration_template(relative_source, relative_destination, options = {})
    544:           migration_directory relative_destination
    545:           logger.migration_template file_name
    546:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Commands/List.html#M001516
- :tinyuri: http://tinyurl.com/47uxdq
  :path: 
  - ActiveResource
  - Formats
  - XmlFormat
  :method: mime_type
  :description: |+
    
        mime_type()
    
    
        # File vendor/rails/activeresource/lib/active_resource/formats/xml_format.rb, line 10
    10:       def mime_type
    11:         "application/xml"
    12:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Formats/XmlFormat.html#M000790
- :tinyuri: http://tinyurl.com/2mja9l
  :path: 
  - ActiveResource
  - Formats
  - JsonFormat
  :method: mime_type
  :description: |+
    
        mime_type()
    
    
        # File vendor/rails/activeresource/lib/active_resource/formats/json_format.rb, line 10
    10:       def mime_type
    11:         "application/json"
    12:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Formats/JsonFormat.html#M000794
- :tinyuri: http://tinyurl.com/3tdmwd
  :path: 
  - ActiveRecord
  - Calculations
  - ClassMethods
  :method: minimum
  :description: |+
    
        minimum(column_name, options = {})
    Calculates the minimum value on a
    given column. The value is returned with the same data type of the column.
    See calculate for examples with
    options.
    
    
      Person.minimum('age')
    
    
    
        # File vendor/rails/activerecord/lib/active_record/calculations.rb, line 59
    59:       def minimum(column_name, options = {})
    60:         calculate(:min, column_name, options)
    61:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Calculations/ClassMethods.html#M001339
- :tinyuri: http://tinyurl.com/4hkw34
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Numeric
  - Time
  :method: minute
  :description: |
    
        minute()
    Alias for minutes
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Numeric/Time.html#M000641
- :tinyuri: http://tinyurl.com/43g4xl
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Numeric
  - Time
  :method: minutes
  :description: |+
    
        minutes()
    
      This method is also aliased as
      minute
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/numeric/time.rb, line 38
    38:         def minutes
    39:           ActiveSupport::Duration.new(self * 60, [[:seconds, self * 60]])
    40:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Numeric/Time.html#M000640
- :tinyuri: http://tinyurl.com/4vpr5k
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Calculations
  :method: monday
  :description: |
    
        monday()
    Alias for beginning_of_week
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Calculations.html#M000589
- :tinyuri: http://tinyurl.com/3zqzey
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Date
  - Calculations
  :method: monday
  :description: |
    
        monday()
    Alias for beginning_of_week
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Date/Calculations.html#M000699
- :tinyuri: http://tinyurl.com/3wvdgh
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Numeric
  - Time
  :method: month
  :description: |
    
        month()
    Alias for months
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Numeric/Time.html#M000651
- :tinyuri: http://tinyurl.com/3pswf9
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Numeric
  - Time
  :method: months
  :description: |+
    
        months()
    
      This method is also aliased as
      month
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/numeric/time.rb, line 63
    63:         def months
    64:           ActiveSupport::Duration.new(self * 30.days, [[:months, self]])
    65:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Numeric/Time.html#M000650
- :tinyuri: http://tinyurl.com/52ahmo
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Calculations
  :method: months_ago
  :description: |+
    
        months_ago(months)
    Returns a new Time representing the time a number of specified months ago
    
    
    
         # File vendor/rails/activesupport/lib/active_support/core_ext/time/calculations.rb, line 102
    102:         def months_ago(months)
    103:           advance(:months => -months)
    104:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Calculations.html#M000580
- :tinyuri: http://tinyurl.com/4catqv
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Date
  - Calculations
  :method: months_ago
  :description: |+
    
        months_ago(months)
    Returns a new Date/DateTime representing the time a number of specified
    months ago
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/date/calculations.rb, line 96
    96:         def months_ago(months)
    97:           advance(:months => -months)
    98:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Date/Calculations.html#M000690
- :tinyuri: http://tinyurl.com/4qfote
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Date
  - Calculations
  :method: months_since
  :description: |+
    
        months_since(months)
    Returns a new Date/DateTime representing the time a number of specified
    months in the future
    
    
    
         # File vendor/rails/activesupport/lib/active_support/core_ext/date/calculations.rb, line 101
    101:         def months_since(months)
    102:           advance(:months => months)
    103:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Date/Calculations.html#M000691
- :tinyuri: http://tinyurl.com/3o3kn7
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Calculations
  :method: months_since
  :description: |+
    
        months_since(months)
    Returns a new Time representing the time a number of specified months in the future
    
    
    
         # File vendor/rails/activesupport/lib/active_support/core_ext/time/calculations.rb, line 107
    107:         def months_since(months)
    108:           advance(:months => months)
    109:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Calculations.html#M000581
- :tinyuri: http://tinyurl.com/458fpn
  :path: 
  - ActionView
  - CompiledTemplates
  :method: mtime
  :description: |+
    
        mtime(identifier, arg_names)
    Return the time at which the method for the given identifier and argument
    names was compiled.
    
    
    
        # File vendor/rails/actionpack/lib/action_view/compiled_templates.rb, line 35
    35:     def mtime(identifier, arg_names)
    36:       @mtimes[full_key(identifier, arg_names)]
    37:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/CompiledTemplates.html#M001079
- :tinyuri: http://tinyurl.com/3kzu63
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Integer
  - EvenOdd
  :method: multiple_of?
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Integer/EvenOdd.html#M000564
- :tinyuri: http://tinyurl.com/4fskb2
  :path: 
  - ActiveRecord
  - Reflection
  - MacroReflection
  :method: name
  :description: "\n  \n    name()\n  \n  \n  \n\
    Returns the name of the macro, so it would return :balance\n\
    for \"composed_of :balance, :class_name =>\n\
    81:       def name\n\
    82:         @name\n\
    83:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Reflection/MacroReflection.html#M001127
- :tinyuri: http://tinyurl.com/4uxfdz
  :path: 
  - Rails
  - Generator
  - Source
  :method: names
  :description: |+
    
        names()
    Return a convenient sorted list of all generator names.
    
    
    
         # File vendor/rails/railties/lib/rails_generator/lookup.rb, line 171
    171:       def names
    172:         map { |spec| spec.name }.sort
    173:       end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Source.html#M001559
- :tinyuri: http://tinyurl.com/2nf3vp
  :path: 
  - ActionController
  - Routing
  - RouteSet
  - Mapper
  :method: namespace
  :description: "\n  \n    namespace(name, options = {}, &block)\n  \n  \n  \n\
    Enables the use of resources in a module by setting the name_prefix,\n\
    path_prefix, and namespace for the model.\n\
    Example:\n\n\n  map.namespace(:admin) do |admin|\n    admin.resources :products,\n      :has_many => [ :tags, :images, :variants ]\n  end\n\n\n\
    This will create admin_products_url pointing to\n\
    \"admin/products\", which will look for an\n\
    Admin::ProductsController. It\xE2\x80\x98ll also create\n\
    admin_product_tags_url pointing to\n\
    \"admin/products/#{product_id}/tags\", which will look for\n\
    1088:         def namespace(name, options = {}, &block)\n\
    1089:           if options[:namespace]\n\
    1090:             with_options({:path_prefix => \"#{options.delete(:path_prefix)}/#{name}\", :name_prefix => \"#{options.delete(:name_prefix)}#{name}_\", :namespace => \"#{options.delete(:namespace)}#{name}/\" }.merge(options), &block)\n\
    1091:           else\n\
    1092:             with_options({:path_prefix => name, :name_prefix => \"#{name}_\", :namespace => \"#{name}/\" }.merge(options), &block)\n\
    1093:           end\n\
    1094:         end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionController/Routing/RouteSet/Mapper.html#M000351
- :tinyuri: http://tinyurl.com/4mvyca
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - SchemaStatements
  :method: native_database_types
  :description: |+
    
        native_database_types()
    Returns a Hash of mappings from the abstract data types to the native
    database types. See TableDefinition#column for details
    on the recognized abstract data types.
    
    
    
       # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 7
    7:       def native_database_types
    8:         {}
    9:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#M001146
- :tinyuri: http://tinyurl.com/542teq
  :path: 
  - ActiveSupport
  - Multibyte
  - Chars
  :method: new
  :description: |+
    
        new(str)
    Create a new Chars instance.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/multibyte/chars.rb, line 51
    51:     def initialize(str)
    52:       @string = str.respond_to?(:string) ? str.string : str
    53:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Chars.html#M000549
- :tinyuri: http://tinyurl.com/4a3vkc
  :path: 
  - ActionController
  - Routing
  - Optimisation
  - Optimiser
  :method: new
  :description: |+
    
        new(route, kind)
    
    
        # File vendor/rails/actionpack/lib/action_controller/routing_optimisation.rb, line 23
    23:         def initialize(route, kind)
    24:           @route = route
    25:           @kind  = kind
    26:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Routing/Optimisation/Optimiser.html#M000344
- :tinyuri: http://tinyurl.com/3ltmgl
  :path: 
  - RailsFCGIHandler
  :method: new
  :description: |+
    
        new(log_file_path = nil, gc_request_period = nil) {|self if block_given?| ...}
    Initialize the FastCGI instance with the path to a crash log detailing
    unhandled exceptions (default RAILS_ROOT/log/fastcgi.crash.log) and the
    number of requests to process between garbage collection runs (default nil
    for normal GC behavior.) Optionally, pass a block which takes this instance
    as an argument for further configuration.
    
    
    
        # File vendor/rails/railties/lib/fcgi_handler.rb, line 32
    32:   def initialize(log_file_path = nil, gc_request_period = nil)
    33:     self.log_file_path = log_file_path || "#{RAILS_ROOT}/log/fastcgi.crash.log"
    34:     self.gc_request_period = gc_request_period
    35: 
    36:     # Yield for additional configuration.
    37:     yield self if block_given?
    38: 
    39:     # Safely install signal handlers.
    40:     install_signal_handlers
    41: 
    42:     # Start error timestamp at 11 seconds ago.
    43:     @last_error_on = Time.now - 11
    44:   end
    
    
  :uri: http://api.rubyonrails.org/classes/RailsFCGIHandler.html#M000030
- :tinyuri: http://tinyurl.com/4h6clk
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - Column
  :method: new
  :description: "\n  \n    new(name, default, sql_type = nil, null = true)\n  \n  \n  \n\
    Instantiates a new column in the table.\n\n\n\
    name is the column\xE2\x80\x98s name, as in supplier_id\n\
    int(11). default is the type-casted default value, such as\n\
    sales_stage varchar(20) default \xE2\x80\x98new\xE2\x80\x98. sql_type is\n\
    only used to extract the column\xE2\x80\x98s length, if necessary. For example,\n\
    company_name varchar(60). null determines if this\n\
    23:       def initialize(name, default, sql_type = nil, null = true)\n\
    24:         @name, @sql_type, @null = name, sql_type, null\n\
    25:         @limit, @precision, @scale  = extract_limit(sql_type), extract_precision(sql_type), extract_scale(sql_type) \n\
    26:         @type = simplified_type(sql_type)\n\
    27:         @default = extract_default(default)\n\
    28: \n\
    29:         @primary = nil\n\
    30:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/Column.html#M001197
- :tinyuri: http://tinyurl.com/4vb7o3
  :path: 
  - Builder
  - CSS
  :method: new
  :description: |+
    
        new(indent=2)
    Create a CSS builder.
    
    
    out:Object receiving the markup.1 out
    must respond to <<.
    
    
    indent:Number of spaces used for indentation (0 implies no indentation and no line
    breaks).
    
    
    
    
    
         # File vendor/rails/activesupport/lib/active_support/vendor/builder-2.1.2/builder/css.rb, line 101
    101:     def initialize(indent=2)
    102:       @indent      = indent
    103:       @target      = []
    104:       @parts       = []
    105:       @library     = {}
    106:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Builder/CSS.html#M000896
- :tinyuri: http://tinyurl.com/4dlm4g
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - MysqlAdapter
  :method: new
  :description: |+
    
        new(connection, logger, connection_options, config)
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb, line 163
    163:       def initialize(connection, logger, connection_options, config)
    164:         super(connection, logger)
    165:         @connection_options, @config = connection_options, config
    166: 
    167:         connect
    168:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#M001227
- :tinyuri: http://tinyurl.com/4rqh6w
  :path: 
  - ActionController
  - RequestProfiler
  :method: new
  :description: |+
    
        new(options = {})
    
    
        # File vendor/rails/actionpack/lib/action_controller/request_profiler.rb, line 49
    49:     def initialize(options = {})
    50:       @options = default_options.merge(options)
    51:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/RequestProfiler.html#M000379
- :tinyuri: http://tinyurl.com/46j838
  :path: 
  - Commands
  - Unsource
  :method: new
  :description: |+
    
        new(base_command)
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 605
    605:     def initialize(base_command)
    606:       @base_command = base_command
    607:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Commands/Unsource.html#M000512
- :tinyuri: http://tinyurl.com/3gjk7f
  :path: 
  - RailsEnvironment
  :method: new
  :description: |+
    
        new(dir)
    
    
        # File vendor/rails/railties/lib/commands/plugin.rb, line 61
    61:   def initialize(dir)
    62:     @root = dir
    63:   end
    
    
  :uri: http://api.rubyonrails.org/classes/RailsEnvironment.html#M000051
- :tinyuri: http://tinyurl.com/3uof9v
  :path: 
  - Rails
  - Initializer
  :method: new
  :description: |+
    
        new(configuration)
    Create a new Initializer instance that references the given
    Configuration instance.
    
    
    
        # File vendor/rails/railties/lib/initializer.rb, line 55
    55:     def initialize(configuration)
    56:       @configuration = configuration
    57:       @loaded_plugins = []
    58:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Initializer.html#M001572
- :tinyuri: http://tinyurl.com/4qy5eu
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - TableDefinition
  :method: new
  :description: |+
    
        new(base)
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 278
    278:       def initialize(base)
    279:         @columns = []
    280:         @base = base
    281:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#M001219
- :tinyuri: http://tinyurl.com/3nmy8n
  :path: 
  - HashWithIndifferentAccess
  :method: new
  :description: |+
    
        new(constructor = {})
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/hash/indifferent_access.rb, line 5
     5:   def initialize(constructor = {})
     6:     if constructor.is_a?(Hash)
     7:       super()
     8:       update(constructor)
     9:     else
    10:       super(constructor)
    11:     end
    12:   end
    
    
  :uri: http://api.rubyonrails.org/classes/HashWithIndifferentAccess.html#M000062
- :tinyuri: http://tinyurl.com/4zvodm
  :path: 
  - Rails
  - Generator
  - Base
  :method: new
  :description: |+
    
        new(runtime_args, runtime_options = {})
    
    
         # File vendor/rails/railties/lib/rails_generator/base.rb, line 101
    101:       def initialize(runtime_args, runtime_options = {})
    102:         @args = runtime_args
    103:         parse!(@args, runtime_options)
    104: 
    105:         # Derive source and destination paths.
    106:         @source_root = options[:source] || File.join(spec.path, 'templates')
    107:         if options[:destination]
    108:           @destination_root = options[:destination]
    109:         elsif defined? ::RAILS_ROOT
    110:           @destination_root = ::RAILS_ROOT
    111:         end
    112: 
    113:         # Silence the logger if requested.
    114:         logger.quiet = options[:quiet]
    115: 
    116:         # Raise usage error if help is requested.
    117:         usage if options[:help]
    118:       end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Base.html#M001563
- :tinyuri: http://tinyurl.com/44qtb6
  :path: 
  - ActiveRecord
  - Base
  :method: new
  :description: "\n  \n    new(attributes = nil) {|self if block_given?| ...}\n  \n  \n  \n\
    New objects can be instantiated as either empty (pass no construction\n\
    parameter) or pre-set with attributes but\n\
    not yet saved (pass a hash with key names\n\
    matching the associated table column names). In both instances, valid\n\
    attribute keys are determined by the column names of the associated table\n\
    \xE2\x80\x94 hence you can\xE2\x80\x98t have attributes that aren\xE2\x80\x98t part of the table\n\
    1921:       def initialize(attributes = nil)\n\
    1922:         @attributes = attributes_from_column_definition\n\
    1923:         @attributes_cache = {}\n\
    1924:         @new_record = true\n\
    1925:         ensure_proper_type\n\
    1926:         self.attributes = attributes unless attributes.nil?\n\
    1927:         self.class.send(:scope, :create).each { |att,value| self.send(\"#{att}=\", value) } if self.class.send(:scoped?, :create)\n\
    1928:         result = yield self if block_given?\n\
    1929:         callback(:after_initialize) if respond_to_without_attributes?(:after_initialize)\n\
    1930:         result\n\
    1931:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001425
- :tinyuri: http://tinyurl.com/4fextz
  :path: 
  - ActiveSupport
  - BufferedLogger
  :method: new
  :description: |+
    
        new(log, level = DEBUG)
    
    
        # File vendor/rails/activesupport/lib/active_support/buffered_logger.rb, line 38
    38:     def initialize(log, level = DEBUG)
    39:       @level         = level
    40:       @buffer        = []
    41:       @auto_flushing = 1
    42: 
    43:       if log.respond_to?(:write)
    44:         @log = log
    45:       elsif File.exist?(log)
    46:         @log = open(log, (File::WRONLY | File::APPEND))
    47:         @log.sync = true
    48:       else
    49:         @log = open(log, (File::WRONLY | File::APPEND | File::CREAT))
    50:         @log.sync = true
    51:         @log.write("# Logfile created on %s" % [Time.now.to_s])
    52:       end
    53:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/BufferedLogger.html#M000765
- :tinyuri: http://tinyurl.com/4tzswy
  :path: 
  - TimeZone
  :method: new
  :description: |+
    
        new(name)
    Return a TimeZone instance with the given name,
    or nil if no such TimeZone instance
    exists. (This exists to support the use of this class with the composed_of
    macro.)
    
    
    
        # File vendor/rails/activesupport/lib/active_support/values/time_zone.rb, line 87
    87:     def new(name)
    88:       self[name]
    89:     end
    
    
  :uri: http://api.rubyonrails.org/classes/TimeZone.html#M000025
- :tinyuri: http://tinyurl.com/3r6opr
  :path: 
  - Builder
  - XmlMarkup
  :method: new
  :description: |+
    
        new(options={})
    Create an XML markup builder. Parameters are specified by an option hash.
    
    
    :target=>target_object:Object receiving the markup. out must
    respond to the << operator. The default is a plain string
    target.
    
    
    :indent=>indentation:Number of spaces used for indentation. The default is no indentation and no
    line breaks.
    
    
    :margin=>initial_indentation_level:Amount of initial indentation (specified in levels, not spaces).
    
    
    :escape_attrs=><b>OBSOLETE</em>:The :escape_attrs option is no longer supported by builder (and will be
    quietly ignored). String attribute values are now automatically escaped. If
    you need unescaped attribute values (perhaps you are using entities in the
    attribute values), then give the value as a Symbol. This allows much finer
    control over escaping attribute values.
    
    
    
    
    
         # File vendor/rails/activesupport/lib/active_support/vendor/builder-2.1.2/builder/xmlmarkup.rb, line 185
    185:     def initialize(options={})
    186:       indent = options[:indent] || 0
    187:       margin = options[:margin] || 0
    188:       super(indent, margin)
    189:       @target = options[:target] || ""
    190:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Builder/XmlMarkup.html#M000890
- :tinyuri: http://tinyurl.com/4bx4gd
  :path: 
  - HTML
  - Selector
  :method: new
  :description: 
  :uri: http://api.rubyonrails.org/classes/HTML/Selector.html#M000166
- :tinyuri: http://tinyurl.com/3ts9du
  :path: 
  - Rails
  - Generator
  - Source
  :method: new
  :description: |+
    
        new(label)
    
    
         # File vendor/rails/railties/lib/rails_generator/lookup.rb, line 160
    160:       def initialize(label)
    161:         @label = label
    162:       end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Source.html#M001557
- :tinyuri: http://tinyurl.com/4p4wzt
  :path: 
  - Builder
  - XmlBase
  :method: new
  :description: |+
    
        new(indent=0, initial=0)
    Create an XML markup builder.
    
    
    out:Object receiving the markup. out must
    respond to <<.
    
    
    indent:Number of spaces used for indentation (0 implies no indentation and no line
    breaks).
    
    
    initial:Level of initial indentation.
    
    
    
    
    
        # File vendor/rails/activesupport/lib/active_support/vendor/builder-2.1.2/builder/xmlbase.rb, line 22
    22:     def initialize(indent=0, initial=0)
    23:       @indent = indent
    24:       @level  = initial
    25:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Builder/XmlBase.html#M000884
- :tinyuri: http://tinyurl.com/4w7dk4
  :path: 
  - Commands
  - Update
  :method: new
  :description: |+
    
        new(base_command)
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 777
    777:     def initialize(base_command)
    778:       @base_command = base_command
    779:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Commands/Update.html#M000509
- :tinyuri: http://tinyurl.com/3j84sz
  :path: 
  - Rails
  - Generator
  - Spec
  :method: new
  :description: |+
    
        new(name, path, source)
    
    
        # File vendor/rails/railties/lib/rails_generator/spec.rb, line 9
     9:       def initialize(name, path, source)
    10:         @name, @path, @source = name, path, source
    11:       end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Spec.html#M001553
- :tinyuri: http://tinyurl.com/4ehsxh
  :path: 
  - Commands
  - Source
  :method: new
  :description: |+
    
        new(base_command)
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 575
    575:     def initialize(base_command)
    576:       @base_command = base_command
    577:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Commands/Source.html#M000494
- :tinyuri: http://tinyurl.com/4xcwvy
  :path: 
  - Commands
  - Install
  :method: new
  :description: |+
    
        new(base_command)
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 710
    710:     def initialize(base_command)
    711:       @base_command = base_command
    712:       @method = :http
    713:       @options = { :quiet => false, :revision => nil, :force => false }
    714:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Commands/Install.html#M000490
- :tinyuri: http://tinyurl.com/4lk9yp
  :path: 
  - Rails
  - Generator
  - Manifest
  :method: new
  :description: |+
    
        new(target = nil) {|self if block_given?| ...}
    Take a default action target. Yield self if block given.
    
    
    
        # File vendor/rails/railties/lib/rails_generator/manifest.rb, line 19
    19:       def initialize(target = nil)
    20:         @target, @actions = target, []
    21:         yield self if block_given?
    22:       end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Manifest.html#M001547
- :tinyuri: http://tinyurl.com/3hfq3g
  :path: 
  - Rails
  - Generator
  - NamedBase
  :method: new
  :description: |+
    
        new(runtime_args, runtime_options = {})
    
    
         # File vendor/rails/railties/lib/rails_generator/base.rb, line 203
    203:       def initialize(runtime_args, runtime_options = {})
    204:         super
    205: 
    206:         # Name argument is required.
    207:         usage if runtime_args.empty?
    208: 
    209:         @args = runtime_args.dup
    210:         base_name = @args.shift
    211:         assign_names!(base_name)
    212:       end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/NamedBase.html#M001544
- :tinyuri: http://tinyurl.com/4qubav
  :path: 
  - Rails
  - Generator
  - AbstractGemSource
  :method: new
  :description: |+
    
        new()
    
    
         # File vendor/rails/railties/lib/rails_generator/lookup.rb, line 197
    197:       def initialize
    198:         super :RubyGems
    199:       end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/AbstractGemSource.html#M001543
- :tinyuri: http://tinyurl.com/45n277
  :path: 
  - Repository
  :method: new
  :description: |+
    
        new(uri)
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 367
    367:   def initialize(uri)
    368:     @uri = uri.chomp('/') << "/"
    369:     @plugins = nil
    370:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Repository.html#M000161
- :tinyuri: http://tinyurl.com/3lxgkk
  :path: 
  - ActionController
  - NonInferrableControllerError
  :method: new
  :description: |+
    
        new(name)
    
    
       # File vendor/rails/actionpack/lib/action_controller/test_case.rb, line 5
    5:     def initialize(name)
    6:       super "Unable to determine the controller to test from #{name}. " +
    7:         "You'll need to specify it using 'tests YourController' in your " +
    8:         "test case definition"
    9:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/NonInferrableControllerError.html#M000431
- :tinyuri: http://tinyurl.com/4ga6pj
  :path: 
  - Fixtures
  :method: new
  :description: |+
    
        new(connection, table_name, class_name, fixture_path, file_filter = DEFAULT_FILTER_RE)
    
    
         # File vendor/rails/activerecord/lib/active_record/fixtures.rb, line 542
    542:   def initialize(connection, table_name, class_name, fixture_path, file_filter = DEFAULT_FILTER_RE)
    543:     @connection, @table_name, @fixture_path, @file_filter = connection, table_name, fixture_path, file_filter
    544:     @class_name = class_name ||
    545:                   (ActiveRecord::Base.pluralize_table_names ? @table_name.singularize.camelize : @table_name.camelize)
    546:     @table_name = ActiveRecord::Base.table_name_prefix + @table_name + ActiveRecord::Base.table_name_suffix
    547:     @table_name = class_name.table_name if class_name.respond_to?(:table_name)
    548:     @connection = class_name.connection if class_name.respond_to?(:connection)
    549:     read_fixture_files
    550:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Fixtures.html#M000158
- :tinyuri: http://tinyurl.com/425bn3
  :path: 
  - ActionView
  - Helpers
  - AtomFeedHelper
  - AtomFeedBuilder
  :method: new
  :description: |+
    
        new(xml, view)
    
    
        # File vendor/rails/actionpack/lib/action_view/helpers/atom_feed_helper.rb, line 70
    70:         def initialize(xml, view)
    71:           @xml, @view = xml, view
    72:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/AtomFeedHelper/AtomFeedBuilder.html#M000932
- :tinyuri: http://tinyurl.com/3s2uls
  :path: 
  - Rails
  - Generator
  - PathSource
  :method: new
  :description: |+
    
        new(label, path)
    
    
         # File vendor/rails/railties/lib/rails_generator/lookup.rb, line 181
    181:       def initialize(label, path)
    182:         super label
    183:         @path = path
    184:       end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/PathSource.html#M001541
- :tinyuri: http://tinyurl.com/497pob
  :path: 
  - Rails
  - SecretKeyGenerator
  :method: new
  :description: |+
    
        new(identifier)
    
    
        # File vendor/rails/railties/lib/rails_generator/secret_key_generator.rb, line 12
    12:     def initialize(identifier)
    13:       @identifier = identifier
    14:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/SecretKeyGenerator.html#M001596
- :tinyuri: http://tinyurl.com/3ejvol
  :path: 
  - Commands
  - Info
  :method: new
  :description: |+
    
        new(base_command)
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 834
    834:     def initialize(base_command)
    835:       @base_command = base_command
    836:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Commands/Info.html#M000487
- :tinyuri: http://tinyurl.com/49tltk
  :path: 
  - ActionView
  - CompiledTemplates
  :method: new
  :description: |+
    
        new()
    
    
        # File vendor/rails/actionpack/lib/action_view/compiled_templates.rb, line 15
    15:     def initialize
    16:       @method_names = Hash.new do |hash, key|
    17:         hash[key] = "__compiled_method_#{(hash.length + 1)}"
    18:       end
    19:       @mtimes = {}
    20:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/CompiledTemplates.html#M001075
- :tinyuri: http://tinyurl.com/3soqr4
  :path: 
  - ActiveResource
  - HttpMock
  :method: new
  :description: |+
    
        new(site)
    
    
        # File vendor/rails/activeresource/lib/active_resource/http_mock.rb, line 72
    72:     def initialize(site)
    73:       @site = site
    74:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/HttpMock.html#M000818
- :tinyuri: http://tinyurl.com/3lmcpt
  :path: 
  - ActiveResource
  - HttpMock
  - Responder
  :method: new
  :description: |+
    
        new(responses)
    
    
        # File vendor/rails/activeresource/lib/active_resource/http_mock.rb, line 8
     8:       def initialize(responses)
     9:         @responses = responses
    10:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/HttpMock/Responder.html#M000819
- :tinyuri: http://tinyurl.com/4gw2us
  :path: 
  - ActionController
  - TestUploadedFile
  :method: new
  :description: |+
    
        new(path, content_type = Mime::TEXT, binary = false)
    
    
         # File vendor/rails/actionpack/lib/action_controller/test_process.rb, line 338
    338:     def initialize(path, content_type = Mime::TEXT, binary = false)
    339:       raise "#{path} file does not exist" unless File.exist?(path)
    340:       @content_type = content_type
    341:       @original_filename = path.sub(/^.*#{File::SEPARATOR}([^#{File::SEPARATOR}]+)$/) { $1 }
    342:       @tempfile = Tempfile.new(@original_filename)
    343:       @tempfile.binmode if binary
    344:       FileUtils.copy_file(path, @tempfile.path)
    345:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/TestUploadedFile.html#M000463
- :tinyuri: http://tinyurl.com/4decdo
  :path: 
  - ActionController
  - Dispatcher
  :method: new
  :description: |+
    
        new(output, request = nil, response = nil)
    
    
         # File vendor/rails/actionpack/lib/action_controller/dispatcher.rb, line 109
    109:     def initialize(output, request = nil, response = nil)
    110:       @output, @request, @response = output, request, response
    111:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Dispatcher.html#M000469
- :tinyuri: http://tinyurl.com/3w9hb8
  :path: 
  - ActiveResource
  - Response
  :method: new
  :description: |+
    
        new(body, message = 200, headers = {})
    
    
         # File vendor/rails/activeresource/lib/active_resource/http_mock.rb, line 105
    105:     def initialize(body, message = 200, headers = {})
    106:       @body, @message, @headers = body, message.to_s, headers
    107:       @code = @message[0,3].to_i
    108: 
    109:       resp_cls = Net::HTTPResponse::CODE_TO_OBJ[@code.to_s]
    110:       if resp_cls && !resp_cls.body_permitted?
    111:         @body = nil
    112:       end
    113: 
    114:       if @body.nil?
    115:         self['Content-Length'] = "0"
    116:       else
    117:         self['Content-Length'] = body.size.to_s
    118:       end
    119:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Response.html#M000820
- :tinyuri: http://tinyurl.com/46bvcg
  :path: 
  - Rails
  - Configuration
  :method: new
  :description: |+
    
        new()
    Create a new Configuration instance, initialized with the
    default values.
    
    
    
         # File vendor/rails/railties/lib/initializer.rb, line 460
    460:     def initialize
    461:       set_root_path!
    462: 
    463:       self.frameworks                   = default_frameworks
    464:       self.load_paths                   = default_load_paths
    465:       self.load_once_paths              = default_load_once_paths
    466:       self.log_path                     = default_log_path
    467:       self.log_level                    = default_log_level
    468:       self.view_path                    = default_view_path
    469:       self.controller_paths             = default_controller_paths
    470:       self.cache_classes                = default_cache_classes
    471:       self.whiny_nils                   = default_whiny_nils
    472:       self.plugins                      = default_plugins
    473:       self.plugin_paths                 = default_plugin_paths
    474:       self.plugin_locators              = default_plugin_locators
    475:       self.plugin_loader                = default_plugin_loader
    476:       self.database_configuration_file  = default_database_configuration_file
    477: 
    478:       for framework in default_frameworks
    479:         self.send("#{framework}=", Rails::OrderedOptions.new)
    480:       end
    481:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Configuration.html#M001606
- :tinyuri: http://tinyurl.com/3gcagn
  :path: 
  - Commands
  - Remove
  :method: new
  :description: |+
    
        new(base_command)
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 812
    812:     def initialize(base_command)
    813:       @base_command = base_command
    814:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Commands/Remove.html#M000497
- :tinyuri: http://tinyurl.com/3neohv
  :path: 
  - Logger
  - Formatter
  :method: new
  :description: |+
    
        new()
    
    
        # File vendor/rails/activesupport/lib/active_support/clean_logger.rb, line 62
    62:       def initialize
    63:         @datetime_format = nil
    64:       end
    
    
  :uri: http://api.rubyonrails.org/classes/Logger/Formatter.html#M000129
- :tinyuri: http://tinyurl.com/4zoemu
  :path: 
  - ActiveResource
  - Connection
  :method: new
  :description: |+
    
        new(site, format = ActiveResource::Formats[:xml])
    The site parameter is required and will set the site
    attribute to the URI for the remote resource service.
    
    
    
        # File vendor/rails/activeresource/lib/active_resource/connection.rb, line 69
    69:     def initialize(site, format = ActiveResource::Formats[:xml])
    70:       raise ArgumentError, 'Missing site URI' unless site
    71:       self.site = site
    72:       self.format = format
    73:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Connection.html#M000868
- :tinyuri: http://tinyurl.com/3juyxr
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - PostgreSQLAdapter
  :method: new
  :description: |+
    
        new(connection, logger, connection_parameters, config)
    Initializes and connects a PostgreSQL adapter.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 233
    233:       def initialize(connection, logger, connection_parameters, config)
    234:         super(connection, logger)
    235:         @connection_parameters, @config = connection_parameters, config
    236: 
    237:         connect
    238:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#M001252
- :tinyuri: http://tinyurl.com/4f6o5q
  :path: 
  - ActionController
  - RequestProfiler
  - Sandbox
  :method: new
  :description: |+
    
        new(script_path)
    
    
        # File vendor/rails/actionpack/lib/action_controller/request_profiler.rb, line 14
    14:       def initialize(script_path)
    15:         @quiet = false
    16:         define_run_method(File.read(script_path))
    17:         reset!
    18:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/RequestProfiler/Sandbox.html#M000390
- :tinyuri: http://tinyurl.com/3qwf22
  :path: 
  - ActionController
  - Integration
  - Session
  :method: new
  :description: |+
    
        new()
    Create and initialize a new Session instance.
    
    
    
        # File vendor/rails/actionpack/lib/action_controller/integration.rb, line 58
    58:       def initialize
    59:         reset!
    60:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Integration/Session.html#M000233
- :tinyuri: http://tinyurl.com/53ex9h
  :path: 
  - XmlSimple
  - Cache
  :method: new
  :description: |+
    
        new()
    Creates and initializes a new Cache object.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/vendor/xml-simple-1.0.11/xmlsimple.rb, line 20
    20:     def initialize
    21:       @mem_share_cache = {}
    22:       @mem_copy_cache  = {}
    23:     end
    
    
  :uri: http://api.rubyonrails.org/classes/XmlSimple/Cache.html#M000116
- :tinyuri: http://tinyurl.com/3fg4km
  :path: 
  - Inflector
  - Inflections
  :method: new
  :description: |+
    
        new()
    
    
        # File vendor/rails/activesupport/lib/active_support/inflector.rb, line 27
    27:     def initialize
    28:       @plurals, @singulars, @uncountables = [], [], []
    29:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Inflector/Inflections.html#M001630
- :tinyuri: http://tinyurl.com/3tkwn5
  :path: 
  - Commands
  - Discover
  :method: new
  :description: |+
    
        new(base_command)
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 637
    637:     def initialize(base_command)
    638:       @base_command = base_command
    639:       @list = false
    640:       @prompt = true
    641:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Commands/Discover.html#M000479
- :tinyuri: http://tinyurl.com/3jxs4q
  :path: 
  - ActiveResource
  - Request
  :method: new
  :description: |+
    
        new(method, path, body = nil, headers = {})
    
    
        # File vendor/rails/activeresource/lib/active_resource/http_mock.rb, line 80
    80:     def initialize(method, path, body = nil, headers = {})
    81:       @method, @path, @body, @headers = method, path, body, headers.dup
    82:       @headers.update('Content-Type' => 'application/xml')
    83:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Request.html#M000862
- :tinyuri: http://tinyurl.com/4eaz9p
  :path: 
  - XmlSimple
  :method: new
  :description: |+
    
        new(defaults = nil)
    Creates and intializes a new XmlSimple object.
    
    
    defaults:Default values for options.
    
    
    
    
    
         # File vendor/rails/activesupport/lib/active_support/vendor/xml-simple-1.0.11/xmlsimple.rb, line 128
    128:   def initialize(defaults = nil)
    129:     unless defaults.nil? || defaults.instance_of?(Hash)
    130:       raise ArgumentError, "Options have to be a Hash."
    131:     end
    132:     @default_options = normalize_option_names(defaults, (KNOWN_OPTIONS['in'] + KNOWN_OPTIONS['out']).uniq)
    133:     @options = Hash.new
    134:     @_var_values = nil
    135:   end
    
    
  :uri: http://api.rubyonrails.org/classes/XmlSimple.html#M000111
- :tinyuri: http://tinyurl.com/4sfdc8
  :path: 
  - Commands
  - Plugin
  :method: new
  :description: |+
    
        new()
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 403
    403:     def initialize
    404:       @environment = RailsEnvironment.default
    405:       @rails_root = RailsEnvironment.default.root
    406:       @script_name = File.basename($0) 
    407:       @sources = []
    408:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Commands/Plugin.html#M000503
- :tinyuri: http://tinyurl.com/3q396y
  :path: 
  - ActionView
  - TemplateHandler
  :method: new
  :description: |+
    
        new(view)
    
    
       # File vendor/rails/actionpack/lib/action_view/template_handler.rb, line 7
    7:     def initialize(view)
    8:       @view = view
    9:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/TemplateHandler.html#M001083
- :tinyuri: http://tinyurl.com/47848h
  :path: 
  - ActiveResource
  - Base
  :method: new
  :description: |+
    
        new(attributes = {})
    Constructor method for new resources; the
    optional attributes parameter takes a Hash of attributes
    for the new resource.
    
    Examples
    
      my_course = Course.new
      my_course.name = "Western Civilization"
      my_course.lecturer = "Don Trotter"
      my_course.save
    
      my_other_course = Course.new(:name => "Philosophy: Reason and Being", :lecturer => "Ralph Cling")
      my_other_course.save
    
    
    
         # File vendor/rails/activeresource/lib/active_resource/base.rb, line 519
    519:     def initialize(attributes = {})
    520:       @attributes     = {}
    521:       @prefix_options = {}
    522:       load(attributes)
    523:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Base.html#M000839
- :tinyuri: http://tinyurl.com/52hrdg
  :path: 
  - ActiveRecord
  - Reflection
  - MacroReflection
  :method: new
  :description: |+
    
        new(macro, name, options, active_record)
    
    
        # File vendor/rails/activerecord/lib/active_record/reflection.rb, line 75
    75:       def initialize(macro, name, options, active_record)
    76:         @macro, @name, @options, @active_record = macro, name, options, active_record
    77:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Reflection/MacroReflection.html#M001126
- :tinyuri: http://tinyurl.com/4cz6hn
  :path: 
  - SourceAnnotationExtractor
  :method: new
  :description: |+
    
        new(tag)
    
    
        # File vendor/rails/railties/lib/source_annotation_extractor.rb, line 17
    17:   def initialize(tag)
    18:     @tag = tag
    19:   end
    
    
  :uri: http://api.rubyonrails.org/classes/SourceAnnotationExtractor.html#M000100
- :tinyuri: http://tinyurl.com/3oaudw
  :path: 
  - Plugin
  :method: new
  :description: |+
    
        new(uri, name=nil)
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 148
    148:   def initialize(uri, name=nil)
    149:     @uri = uri
    150:     guess_name(uri)
    151:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Plugin.html#M000091
- :tinyuri: http://tinyurl.com/5xpfle
  :path: 
  - ActiveRecord
  - Observer
  :method: new
  :description: |+
    
        new()
    Start observing the declared classes and their subclasses.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/observer.rb, line 151
    151:     def initialize
    152:       Set.new(observed_classes + observed_subclasses).each { |klass| add_observer! klass }
    153:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Observer.html#M001364
- :tinyuri: http://tinyurl.com/3kq6ts
  :path: 
  - Commands
  - Sources
  :method: new
  :description: |+
    
        new(base_command)
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 548
    548:     def initialize(base_command)
    549:       @base_command = base_command
    550:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Commands/Sources.html#M000484
- :tinyuri: http://tinyurl.com/4yvywb
  :path: 
  - TimeZone
  :method: new
  :description: |+
    
        new(name, utc_offset)
    Create a new TimeZone object with the given name and offset.
    The offset is the number of seconds that this time zone is offset from UTC
    (GMT). Seconds were chosen as the offset unit because that is the unit that
    Ruby uses to represent time zone offsets (see Time#utc_offset).
    
    
    
        # File vendor/rails/activesupport/lib/active_support/values/time_zone.rb, line 18
    18:   def initialize(name, utc_offset)
    19:     @name = name
    20:     @utc_offset = utc_offset
    21:   end
    
    
  :uri: http://api.rubyonrails.org/classes/TimeZone.html#M000016
- :tinyuri: http://tinyurl.com/3rskv3
  :path: 
  - RecursiveHTTPFetcher
  :method: new
  :description: |+
    
        new(urls_to_fetch, level = 1, cwd = ".")
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 858
    858:   def initialize(urls_to_fetch, level = 1, cwd = ".")
    859:     @level = level
    860:     @cwd = cwd
    861:     @urls_to_fetch = urls_to_fetch.to_a
    862:     @quiet = false
    863:   end
    
    
  :uri: http://api.rubyonrails.org/classes/RecursiveHTTPFetcher.html#M000008
- :tinyuri: http://tinyurl.com/4n5b32
  :path: 
  - Mime
  - Type
  :method: new
  :description: |+
    
        new(string, symbol = nil, synonyms = [])
    
    
         # File vendor/rails/actionpack/lib/action_controller/mime_type.rb, line 122
    122:     def initialize(string, symbol = nil, synonyms = [])
    123:       @symbol, @synonyms = symbol, synonyms
    124:       @string = string
    125:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Mime/Type.html#M001653
- :tinyuri: http://tinyurl.com/49xgxj
  :path: 
  - ActionController
  - Caching
  - Actions
  - ActionCachePath
  :method: new
  :description: |+
    
        new(controller, options = {})
    
    
         # File vendor/rails/actionpack/lib/action_controller/caching.rb, line 275
    275:         def initialize(controller, options = {})
    276:           @extension = extract_extension(controller.request.path)
    277:           path = controller.url_for(options).split('://').last
    278:           normalize!(path)
    279:           add_extension!(path, @extension)
    280:           @path = URI.unescape(path)
    281:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Caching/Actions/ActionCachePath.html#M000268
- :tinyuri: http://tinyurl.com/54a65z
  :path: 
  - Commands
  - List
  :method: new
  :description: |+
    
        new(base_command)
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 499
    499:     def initialize(base_command)
    500:       @base_command = base_command
    501:       @sources = []
    502:       @local = false
    503:       @remote = true
    504:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Commands/List.html#M000500
- :tinyuri: http://tinyurl.com/3fyz65
  :path: 
  - Repositories
  :method: new
  :description: |+
    
        new(cache_file = File.join(find_home, ".rails-plugin-sources"))
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 276
    276:   def initialize(cache_file = File.join(find_home, ".rails-plugin-sources"))
    277:     @cache_file = File.expand_path(cache_file)
    278:     load!
    279:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Repositories.html#M000078
- :tinyuri: http://tinyurl.com/4ab8b4
  :path: 
  - Rails
  - Generator
  - GeneratedAttribute
  :method: new
  :description: |+
    
        new(name, type)
    
    
        # File vendor/rails/railties/lib/rails_generator/generated_attribute.rb, line 8
     8:       def initialize(name, type)
     9:         @name, @type = name, type.to_sym
    10:         @column = ActiveRecord::ConnectionAdapters::Column.new(name, nil, @type)
    11:       end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/GeneratedAttribute.html#M001560
- :tinyuri: http://tinyurl.com/4og3dk
  :path: 
  - ActiveResource
  - Base
  :method: new?
  :description: |+
    
        new?()
    A method to determine if the resource a new
    object (i.e., it has not been POSTed to the remote service yet).
    
    Examples
    
      not_new = Computer.create(:brand => 'Apple', :make => 'MacBook', :vendor => 'MacMall')
      not_new.new?
      # => false
    
      is_new = Computer.new(:brand => 'IBM', :make => 'Thinkpad', :vendor => 'IBM')
      is_new.new?
      # => true
    
      is_new.save
      is_new.new?
      # => false
    
    
    
         # File vendor/rails/activeresource/lib/active_resource/base.rb, line 540
    540:     def new?
    541:       id.nil?
    542:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Base.html#M000840
- :tinyuri: http://tinyurl.com/4hdmcc
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - Column
  :method: new_date
  :description: |+
    
        new_date(year, mon, mday)
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 163
    163:           def new_date(year, mon, mday)
    164:             if year && year != 0
    165:               Date.new(year, mon, mday) rescue nil
    166:             end
    167:           end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/Column.html#M001213
- :tinyuri: http://tinyurl.com/3zj8n9
  :path: 
  - ActiveRecord
  - Base
  :method: new_record?
  :description: "\n  \n    new_record?()\n  \n  \n  \n\
    Returns true if this object hasn\xE2\x80\x98t been saved yet \xE2\x80\x94 that is, a\n\
    1965:       def new_record?\n\
    1966:         @new_record\n\
    1967:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001429
- :tinyuri: http://tinyurl.com/5237vw
  :path: 
  - vendor/rails/railties/lib/console_app.rb
  :method: new_session
  :description: |+
    
        new_session() {|session if block_given?| ...}
    create a new session. If a block is given, the new session will be yielded
    to the block before being returned.
    
    
    
        # File vendor/rails/railties/lib/console_app.rb, line 17
    17: def new_session
    18:   session = ActionController::Integration::Session.new
    19:   yield session if block_given?
    20:   session
    21: end
    
    
  :uri: http://api.rubyonrails.org/files/vendor/rails/railties/lib/console_app_rb.html#M000002
- :tinyuri: http://tinyurl.com/4c3k36
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - Column
  :method: new_time
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/Column.html#M001214
- :tinyuri: http://tinyurl.com/4j6y4e
  :path: 
  - HTML
  - Selector
  :method: next_element
  :description: 
  :uri: http://api.rubyonrails.org/classes/HTML/Selector.html#M000170
- :tinyuri: http://tinyurl.com/3kbkfb
  :path: 
  - Rails
  - Generator
  - Commands
  - Base
  :method: next_migration_number
  :description: |+
    
        next_migration_number()
    
    
        # File vendor/rails/railties/lib/rails_generator/commands.rb, line 79
    79:           def next_migration_number
    80:             current_migration_number + 1
    81:           end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Commands/Base.html#M001506
- :tinyuri: http://tinyurl.com/4ygfhr
  :path: 
  - Rails
  - Generator
  - Commands
  - Base
  :method: next_migration_string
  :description: |+
    
        next_migration_string(padding = 3)
    
    
        # File vendor/rails/railties/lib/rails_generator/commands.rb, line 83
    83:           def next_migration_string(padding = 3)
    84:             "%.#{padding}d" % next_migration_number
    85:           end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Commands/Base.html#M001507
- :tinyuri: http://tinyurl.com/4mnolz
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Calculations
  :method: next_month
  :description: |+
    
        next_month()
    Short-hand for months_since(1)
    
    
    
         # File vendor/rails/activesupport/lib/active_support/core_ext/time/calculations.rb, line 138
    138:         def next_month
    139:           months_since(1)
    140:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Calculations.html#M000587
- :tinyuri: http://tinyurl.com/53sjoy
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Date
  - Calculations
  :method: next_month
  :description: |+
    
        next_month()
    Short-hand for months_since(1)
    
    
    
         # File vendor/rails/activesupport/lib/active_support/core_ext/date/calculations.rb, line 131
    131:         def next_month
    132:           months_since(1)
    133:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Date/Calculations.html#M000697
- :tinyuri: http://tinyurl.com/3fuo26
  :path: 
  - HTML
  - Selector
  :method: next_selector
  :description: |+
    
        next_selector(statement, values)
    Called to create a dependent selector (sibling, descendant, etc). Passes
    the remainder of the statement that will be reduced to zero eventually, and
    array of substitution values.
    
    
    This method is called from four places, so it helps to put it here for
    reuse. The only logic deals with the need to detect comma separators
    (alternate) and apply them to the selector group of the top selector.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/vendor/html-scanner/html/selector.rb, line 800
    800:     def next_selector(statement, values)
    801:       second = Selector.new(statement, values)
    802:       # If there are alternate selectors, we group them in the top selector.
    803:       if alternates = second.instance_variable_get(:@alternates)
    804:         second.instance_variable_set(:@alternates, [])
    805:         @alternates.concat alternates
    806:       end
    807:       second
    808:     end
    
    
  :uri: http://api.rubyonrails.org/classes/HTML/Selector.html#M000175
- :tinyuri: http://tinyurl.com/4pc99l
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Date
  - Calculations
  :method: next_week
  :description: |+
    
        next_week(day = :monday)
    Returns a new Date/DateTime representing the start of the given day in next week (default is Monday).
    
    
    
         # File vendor/rails/activesupport/lib/active_support/core_ext/date/calculations.rb, line 145
    145:         def next_week(day = :monday)
    146:           days_into_week = { :monday => 0, :tuesday => 1, :wednesday => 2, :thursday => 3, :friday => 4, :saturday => 5, :sunday => 6}
    147:           result = (self + 7).beginning_of_week + days_into_week[day]
    148:           self.acts_like?(:time) ? result.change(:hour => 0) : result
    149:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Date/Calculations.html#M000701
- :tinyuri: http://tinyurl.com/5l879e
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Calculations
  :method: next_week
  :description: |+
    
        next_week(day = :monday)
    Returns a new Time representing the start of the given day in next week (default is Monday).
    
    
    
         # File vendor/rails/activesupport/lib/active_support/core_ext/time/calculations.rb, line 151
    151:         def next_week(day = :monday)
    152:           days_into_week = { :monday => 0, :tuesday => 1, :wednesday => 2, :thursday => 3, :friday => 4, :saturday => 5, :sunday => 6}
    153:           since(1.week).beginning_of_week.since(days_into_week[day].day).change(:hour => 0)
    154:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Calculations.html#M000591
- :tinyuri: http://tinyurl.com/4z9s8d
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Date
  - Calculations
  :method: next_year
  :description: |+
    
        next_year()
    Short-hand for years_since(1)
    
    
    
         # File vendor/rails/activesupport/lib/active_support/core_ext/date/calculations.rb, line 121
    121:         def next_year
    122:           years_since(1)
    123:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Date/Calculations.html#M000695
- :tinyuri: http://tinyurl.com/4wenat
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Calculations
  :method: next_year
  :description: |+
    
        next_year()
    Short-hand for years_since(1)
    
    
    
         # File vendor/rails/activesupport/lib/active_support/core_ext/time/calculations.rb, line 127
    127:         def next_year
    128:           years_since(1)
    129:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Calculations.html#M000585
- :tinyuri: http://tinyurl.com/4ep4o9
  :path: 
  - Builder
  - XmlBase
  :method: nil?
  :description: "\n  \n    nil?()\n  \n  \n  \n\
    For some reason, nil? is sent to the XmlMarkup object. If nil? is not defined and method_missing is invoked, some strange\n\
    kind of recursion happens. Since nil?\n\
    won\xE2\x80\x98t ever be an XML tag, it is pretty safe to define it here. (Note:\n\
    107:     def nil?\n\
    108:       false\n\
    109:     end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/Builder/XmlBase.html#M000889
- :tinyuri: http://tinyurl.com/4lrzph
  :path: 
  - Builder
  - CSS
  :method: nil?
  :description: |+
    
        nil?()
    "Cargo culted" from Jim who also "cargo culted" it. See
    xmlbase.rb.
    
    
    
         # File vendor/rails/activesupport/lib/active_support/vendor/builder-2.1.2/builder/css.rb, line 190
    190:     def nil?
    191:       false
    192:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Builder/CSS.html#M000908
- :tinyuri: http://tinyurl.com/4cwpw7
  :path: 
  - ActiveSupport
  - Multibyte
  - Handlers
  - UTF8Handler
  :method: normalize
  :description: |+
    
        normalize(str, form=ActiveSupport::Multibyte::DEFAULT_NORMALIZATION_FORM)
    Returns the KC normalization of the string by default. NFKC is considered
    the best normalization form for passing strings to databases and
    validations.
    
    
    str - The string to perform normalization on.
    
    
    form - The form you want to normalize in. Should be one of the
    following: :c, :kc, :d or :kd.
    
    
    
    
    
         # File vendor/rails/activesupport/lib/active_support/multibyte/handlers/utf8_handler.rb, line 289
    289:       def normalize(str, form=ActiveSupport::Multibyte::DEFAULT_NORMALIZATION_FORM)
    290:         # See http://www.unicode.org/reports/tr15, Table 1
    291:         codepoints = u_unpack(str)
    292:         case form
    293:           when :d
    294:             reorder_characters(decompose_codepoints(:canonical, codepoints))
    295:           when :c
    296:             compose_codepoints reorder_characters(decompose_codepoints(:canonical, codepoints))
    297:           when :kd
    298:             reorder_characters(decompose_codepoints(:compatability, codepoints))
    299:           when :kc
    300:             compose_codepoints reorder_characters(decompose_codepoints(:compatability, codepoints))
    301:           else
    302:             raise ArgumentError, "#{form} is not a valid normalization variant", caller
    303:         end.pack('U*')
    304:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Handlers/UTF8Handler.html#M000530
- :tinyuri: http://tinyurl.com/4r4lyn
  :path: 
  - ActionController
  - Routing
  :method: normalize_paths
  :description: |+
    
        normalize_paths(paths)
    
    
         # File vendor/rails/actionpack/lib/action_controller/routing.rb, line 300
    300:       def normalize_paths(paths)
    301:         # do the hokey-pokey of path normalization...
    302:         paths = paths.collect do |path|
    303:           path = path.
    304:             gsub("//", "/").           # replace double / chars with a single
    305:             gsub("\\\\", "\\").        # replace double \ chars with a single
    306:             gsub(%r{(.)[\\/]$}, '\1')  # drop final / or \ if path ends with it
    307: 
    308:           # eliminate .. paths where possible
    309:           re = %r{\w+[/\\]\.\.[/\\]}
    310:           path.gsub!(%r{\w+[/\\]\.\.[/\\]}, "") while path.match(re)
    311:           path
    312:         end
    313: 
    314:         # start with longest path, first
    315:         paths = paths.uniq.sort_by { |path| - path.length }
    316:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Routing.html#M000333
- :tinyuri: http://tinyurl.com/4k27xf
  :path: 
  - TimeZone
  :method: now
  :description: |+
    
        now()
    Compute and return the current time, in the time zone represented by
    self.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/values/time_zone.rb, line 37
    37:   def now
    38:     adjust(Time.now)
    39:   end
    
    
  :uri: http://api.rubyonrails.org/classes/TimeZone.html#M000018
- :tinyuri: http://tinyurl.com/5y722v
  :path: 
  - ActionController
  - Flash
  - FlashHash
  :method: now
  :description: "\n  \n    now()\n  \n  \n  \n\
    Sets a flash that will not be available to the next action, only to the\n\
    current.\n\n\n    flash.now[:message] = \"Hello current action\"\n\n\n\
    This method enables you to use the flash as a central messaging system in\n\
    your app. When you need to pass an object to the next action, you use the\n\
    standard flash assign ([]=). When you need to pass an object to\n\
    the current action, you use now, and your object will vanish\n\
    when the current action is done.\n\n\n\
    Entries set via now are\n\
    accessed the same way as standard entries:\n\
    86:       def now\n\
    87:         FlashNow.new(self)\n\
    88:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionController/Flash/FlashHash.html#M000287
- :tinyuri: http://tinyurl.com/42clds
  :path: 
  - HTML
  - Selector
  :method: nth_child
  :description: 
  :uri: http://api.rubyonrails.org/classes/HTML/Selector.html#M000173
- :tinyuri: http://tinyurl.com/3e6yss
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - Column
  :method: number?
  :description: |+
    
        number?()
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 36
    36:       def number?
    37:         [:float, :integer, :decimal].include? type
    38:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/Column.html#M001199
- :tinyuri: http://tinyurl.com/3satvb
  :path: 
  - ActionView
  - Helpers
  - NumberHelper
  :method: number_to_currency
  :description: |+
    
        number_to_currency(number, options = {})
    Formats a number into a currency string (e.g., $13.65). You can
    customize the format in the options hash.
    
    Options
    
    :precision - Sets the level of precision (defaults to 2).
    
    
    :unit - Sets the denomination of the currency (defaults to
    "$").
    
    
    :separator - Sets the separator between the units (defaults to
    ".").
    
    
    :delimiter - Sets the thousands delimiter (defaults to
    ",").
    
    
    
    Examples
    
     number_to_currency(1234567890.50)                    # => $1,234,567,890.50
     number_to_currency(1234567890.506)                   # => $1,234,567,890.51
     number_to_currency(1234567890.506, :precision => 3)  # => $1,234,567,890.506
    
     number_to_currency(1234567890.50, :unit => "&pound;", :separator => ",", :delimiter => "")
     # => &pound;1234567890,50
    
    
    
        # File vendor/rails/actionpack/lib/action_view/helpers/number_helper.rb, line 65
    65:       def number_to_currency(number, options = {})
    66:         options   = options.stringify_keys
    67:         precision = options["precision"] || 2
    68:         unit      = options["unit"] || "$"
    69:         separator = precision > 0 ? options["separator"] || "." : ""
    70:         delimiter = options["delimiter"] || ","
    71: 
    72:         begin
    73:           parts = number_with_precision(number, precision).split('.')
    74:           unit + number_with_delimiter(parts[0], delimiter) + separator + parts[1].to_s
    75:         rescue
    76:           number
    77:         end
    78:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/NumberHelper.html#M000995
- :tinyuri: http://tinyurl.com/4nkk3a
  :path: 
  - ActionView
  - Helpers
  - NumberHelper
  :method: number_to_human_size
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/NumberHelper.html#M000999
- :tinyuri: http://tinyurl.com/4gz622
  :path: 
  - ActionView
  - Helpers
  - NumberHelper
  :method: number_to_percentage
  :description: |+
    
        number_to_percentage(number, options = {})
    Formats a number as a percentage string (e.g., 65%). You can
    customize the format in the options hash.
    
    Options
    
    :precision - Sets the level of precision (defaults to 3).
    
    
    :separator - Sets the separator between the units (defaults to
    ".").
    
    
    
    Examples
    
     number_to_percentage(100)                         # => 100.000%
     number_to_percentage(100, :precision => 0)        # => 100%
    
     number_to_percentage(302.24398923423, :precision => 5)
     # => 302.24399%
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/number_helper.rb, line 93
     93:       def number_to_percentage(number, options = {})
     94:         options   = options.stringify_keys
     95:         precision = options["precision"] || 3
     96:         separator = options["separator"] || "."
     97: 
     98:         begin
     99:           number = number_with_precision(number, precision)
    100:           parts = number.split('.')
    101:           if parts.at(1).nil?
    102:             parts[0] + "%"
    103:           else
    104:             parts[0] + separator + parts[1].to_s + "%"
    105:           end
    106:         rescue
    107:           number
    108:         end
    109:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/NumberHelper.html#M000996
- :tinyuri: http://tinyurl.com/4uny4z
  :path: 
  - ActionView
  - Helpers
  - NumberHelper
  :method: number_to_phone
  :description: |+
    
        number_to_phone(number, options = {})
    Formats a number into a US phone number (e.g., (555) 123-9876).
    You can customize the format in the options hash.
    
    Options
    
    :area_code - Adds parentheses around the area code.
    
    
    :delimiter - Specifies the delimiter to use (defaults to
    "-").
    
    
    :extension - Specifies an extension to add to the end of the
    generated number.
    
    
    :country_code - Sets the country code for the phone number.
    
    
    
    Examples
    
     number_to_phone(1235551234)                                        # => 123-555-1234
     number_to_phone(1235551234, :area_code => true)                    # => (123) 555-1234
     number_to_phone(1235551234, :delimiter => " ")                     # => 123 555 1234
     number_to_phone(1235551234, :area_code => true, :extension => 555) # => (123) 555-1234 x 555
     number_to_phone(1235551234, :country_code => 1)                    # => +1-123-555-1234
    
     number_to_phone(1235551234, :country_code => 1, :extension => 1343, :delimiter => ".")
     => +1.123.555.1234 x 1343
    
    
    
        # File vendor/rails/actionpack/lib/action_view/helpers/number_helper.rb, line 26
    26:       def number_to_phone(number, options = {})
    27:         number       = number.to_s.strip unless number.nil?
    28:         options      = options.stringify_keys
    29:         area_code    = options["area_code"] || nil
    30:         delimiter    = options["delimiter"] || "-"
    31:         extension    = options["extension"].to_s.strip || nil
    32:         country_code = options["country_code"] || nil
    33: 
    34:         begin
    35:           str = ""
    36:           str << "+#{country_code}#{delimiter}" unless country_code.blank?
    37:           str << if area_code
    38:             number.gsub!(/([0-9]{1,3})([0-9]{3})([0-9]{4}$)/,"(\\1) \\2#{delimiter}\\3")
    39:           else
    40:             number.gsub!(/([0-9]{1,3})([0-9]{3})([0-9]{4})$/,"\\1#{delimiter}\\2#{delimiter}\\3")
    41:           end
    42:           str << " x #{extension}" unless extension.blank?
    43:           str
    44:         rescue
    45:           number
    46:         end
    47:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/NumberHelper.html#M000994
- :tinyuri: http://tinyurl.com/2x2djp
  :path: 
  - ActionView
  - Helpers
  - NumberHelper
  :method: number_with_delimiter
  :description: |+
    
        number_with_delimiter(number, delimiter=",", separator=".")
    Formats a number with grouped thousands using delimiter
    (e.g., 12,324). You can customize the format using optional
    delimiter and separator parameters.
    
    Options
    
    delimiter - Sets the thousands delimiter (defaults to
    ",").
    
    
    separator - Sets the separator between the units (defaults to
    ".").
    
    
    
    Examples
    
     number_with_delimiter(12345678)       # => 12,345,678
     number_with_delimiter(12345678.05)    # => 12,345,678.05
     number_with_delimiter(12345678, ".")  # => 12.345.678
    
     number_with_delimiter(98765432.98, " ", ",")
     # => 98 765 432,98
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/number_helper.rb, line 125
    125:       def number_with_delimiter(number, delimiter=",", separator=".")
    126:         begin
    127:           parts = number.to_s.split('.')
    128:           parts[0].gsub!(/(\d)(?=(\d\d\d)+(?!\d))/, "\\1#{delimiter}")
    129:           parts.join separator
    130:         rescue
    131:           number
    132:         end
    133:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/NumberHelper.html#M000997
- :tinyuri: http://tinyurl.com/4r5ake
  :path: 
  - ActionView
  - Helpers
  - NumberHelper
  :method: number_with_precision
  :description: |+
    
        number_with_precision(number, precision=3)
    Formats a number with the specified level of precision
    (e.g., 112.32 has a precision of 2). The default level of precision is 3.
    
    Examples
    
     number_with_precision(111.2345)     # => 111.235
     number_with_precision(111.2345, 2)  # => 111.24
     number_with_precision(13, 5)        # => 13.00000
     number_with_precision(389.32314, 0) # => 389
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/number_helper.rb, line 143
    143:       def number_with_precision(number, precision=3)
    144:         "%01.#{precision}f" % number
    145:       rescue
    146:         number
    147:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/NumberHelper.html#M000998
- :tinyuri: http://tinyurl.com/3oq6e7
  :path: 
  - ActiveRecord
  - Observer
  :method: observe
  :description: |+
    
        observe(*models)
    Attaches the observer to the supplied model classes.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/observer.rb, line 133
    133:       def observe(*models)
    134:         models.flatten!
    135:         models.collect! { |model| model.is_a?(Symbol) ? model.to_s.camelize.constantize : model }
    136:         define_method(:observed_classes) { Set.new(models) }
    137:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Observer.html#M001362
- :tinyuri: http://tinyurl.com/2wlmq4
  :path: 
  - ActionView
  - Helpers
  - PrototypeHelper
  :method: observe_field
  :description: "\n  \n    observe_field(field_id, options = {})\n  \n  \n  \n\
    Observes the field with the DOM ID specified by field_id and calls\n\
    a callback when its contents have changed. The default callback is an Ajax\n\
    call. By default the value of the observed field is sent as a parameter\n\
    with the Ajax call.\n\n\n\
    Example:\n\n\n # Generates: new Form.Element.Observer('suggest', 0.25, function(element, value) {new Ajax.Updater('suggest',\n #         '/testing/find_suggestion', {asynchronous:true, evalScripts:true, parameters:'q=' + value})})\n <%= observe_field :suggest, :url => { :action => :find_suggestion },\n      :frequency => 0.25,\n      :update => :suggest,\n      :with => 'q'\n      %>\n\n\n\
    Required options are either of:\n\n\n\
    :url:url_for-style options for the action to call when the field has\n\
    changed.\n\n\n\
    :function:Instead of making a remote call to a URL, you can specify javascript code\n\
    to be called instead. Note that the value of this option is used as the\n\
    body of the javascript function, a function definition with\n\
    parameters named element and value will be generated for you for example:\n\n\n  observe_field(\"glass\", :frequency => 1, :function => \"alert('Element changed')\")\n\n\n\
    will generate:\n\n\n  new Form.Element.Observer('glass', 1, function(element, value) {alert('Element changed')})\n\n\n\
    The element parameter is the DOM element being observed, and the value is\n\
    its value at the time the observer is triggered.\n\n\n\n\n\
    Additional options are:\n\n\n\
    :frequency:The frequency (in seconds) at which changes to this field will be detected.\n\
    Not setting this option at all or to a value equal to or less than zero\n\
    will use event based observation instead of time based observation.\n\n\n\
    :update:Specifies the DOM ID of the element whose innerHTML should be updated with\n\
    the XMLHttpRequest response text.\n\n\n\
    :with:A JavaScript expression specifying the parameters for the XMLHttpRequest.\n\
    The default is to send the key and value of the observed field. Any custom\n\
    expressions should return a valid URL query string. The value of the field\n\
    is stored in the JavaScript variable value.\n\n\n\
    Examples\n\n\n  :with => \"'my_custom_key=' + value\"\n  :with => \"'person[name]=' + prompt('New name')\"\n  :with => \"Form.Element.serialize('other-field')\"\n\n\n\
    Finally\n\n\n  :with => 'name'\n\n\n\
    is shorthand for\n\n\n  :with => \"'name=' + value\"\n\n\n\
    This essentially just changes the key of the parameter.\n\n\n\
    :on:Specifies which event handler to observe. By default, it\xE2\x80\x98s set to\n\
    \"changed\" for text fields and areas and \"click\" for\n\
    radio buttons and checkboxes. With this, you can specify it instead to be\n\
    \"blur\" or \"focus\" or any other event.\n\n\n\n\n\
    Additionally, you may specify any of the options documented in the\n\
    Common options section at the top of this document.\n\n\n\
    551:       def observe_field(field_id, options = {})\n\
    552:         if options[:frequency] && options[:frequency] > 0\n\
    553:           build_observer('Form.Element.Observer', field_id, options)\n\
    554:         else\n\
    555:           build_observer('Form.Element.EventObserver', field_id, options)\n\
    556:         end\n\
    557:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/PrototypeHelper.html#M000966
- :tinyuri: http://tinyurl.com/4pcvsc
  :path: 
  - ActionView
  - Helpers
  - PrototypeHelper
  :method: observe_form
  :description: |+
    
        observe_form(form_id, options = {})
    Observes the form with the DOM ID specified by form_id and calls a
    callback when its contents have changed. The default callback is an Ajax
    call. By default all fields of the observed field are sent as parameters
    with the Ajax call.
    
    
    The options for observe_form are the same as
    the options for observe_field. The JavaScript
    variable value available to the :with option is set to
    the serialized form by default.
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/prototype_helper.rb, line 567
    567:       def observe_form(form_id, options = {})
    568:         if options[:frequency]
    569:           build_observer('Form.Observer', form_id, options)
    570:         else
    571:           build_observer('Form.EventObserver', form_id, options)
    572:         end
    573:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/PrototypeHelper.html#M000967
- :tinyuri: http://tinyurl.com/4jac2y
  :path: 
  - ActiveRecord
  - Observer
  :method: observed_class
  :description: "\n  \n    observed_class()\n  \n  \n  \n\
    The class observed by default is inferred from the observer\xE2\x80\x98s class\n\
    141:       def observed_class\n\
    142:         if observed_class_name = name.scan(/(.*)Observer/)[0]\n\
    143:           observed_class_name[0].constantize\n\
    144:         else\n\
    145:           nil\n\
    146:         end\n\
    147:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Observer.html#M001363
- :tinyuri: http://tinyurl.com/455gwz
  :path: 
  - ActiveRecord
  - Observer
  :method: observed_classes
  :description: |+
    
        observed_classes()
    
    
         # File vendor/rails/activerecord/lib/active_record/observer.rb, line 168
    168:       def observed_classes
    169:         Set.new([self.class.observed_class].compact.flatten)
    170:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Observer.html#M001365
- :tinyuri: http://tinyurl.com/4ykqfe
  :path: 
  - ActiveRecord
  - Observer
  :method: observed_subclasses
  :description: |+
    
        observed_subclasses()
    
    
         # File vendor/rails/activerecord/lib/active_record/observer.rb, line 172
    172:       def observed_subclasses
    173:         observed_classes.collect(&:subclasses).flatten
    174:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Observer.html#M001366
- :tinyuri: http://tinyurl.com/3eo9m8
  :path: 
  - ActiveRecord
  - Observing
  - ClassMethods
  :method: observers
  :description: |+
    
        observers()
    Gets the current observers.
    
    
    
        # File vendor/rails/activerecord/lib/active_record/observer.rb, line 29
    29:       def observers
    30:         @observers ||= []
    31:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Observing/ClassMethods.html#M001117
- :tinyuri: http://tinyurl.com/4o5rtn
  :path: 
  - ActiveRecord
  - Observing
  - ClassMethods
  :method: observers=
  :description: |+
    
        observers=(*observers)
    Activates the observers assigned.
    Examples:
    
    
      # Calls PersonObserver.instance
      ActiveRecord::Base.observers = :person_observer
    
      # Calls Cacher.instance and GarbageCollector.instance
      ActiveRecord::Base.observers = :cacher, :garbage_collector
    
      # Same as above, just using explicit class references
      ActiveRecord::Base.observers = Cacher, GarbageCollector
    
    
    Note: Setting this does not instantiate the observers yet. instantiate_observers is called during
    startup, and before each development request.
    
    
    
        # File vendor/rails/activerecord/lib/active_record/observer.rb, line 24
    24:       def observers=(*observers)
    25:         @observers = observers.flatten
    26:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Observing/ClassMethods.html#M001116
- :tinyuri: http://tinyurl.com/4v88uv
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Integer
  - EvenOdd
  :method: odd?
  :description: |+
    
        odd?()
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/integer/even_odd.rb, line 18
    18:         def odd?
    19:           !even?
    20:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Integer/EvenOdd.html#M000566
- :tinyuri: http://tinyurl.com/3wds8s
  :path: 
  - ActiveResource
  - Errors
  :method: "on"
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Errors.html#M000803
- :tinyuri: http://tinyurl.com/46g9a3
  :path: 
  - ActiveRecord
  - Errors
  :method: "on"
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Errors.html#M001350
- :tinyuri: http://tinyurl.com/3gglea
  :path: 
  - ActiveResource
  - Errors
  :method: on_base
  :description: |+
    
        on_base()
    A method to return errors assigned to base object through add_to_base, which returns nil, if no errors
    are associated with the specified attribute, the error message if
    one error is associated with the specified attribute, or an array
    of error messages if more than one error is associated with the specified
    attribute.
    
    Examples
    
      my_account = Account.find(1)
      my_account.errors.on_base
      # => nil
    
      my_account.errors.add_to_base("This account is frozen")
      my_account.errors.on_base
      # => "This account is frozen"
    
      my_account.errors.add_to_base("This account has been closed")
      my_account.errors.on_base
      # => ["This account is frozen", "This account has been closed"]
    
    
    
         # File vendor/rails/activeresource/lib/active_resource/validations.rb, line 112
    112:     def on_base
    113:       on(:base)
    114:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Errors.html#M000805
- :tinyuri: http://tinyurl.com/3ulggq
  :path: 
  - ActiveRecord
  - Errors
  :method: on_base
  :description: |+
    
        on_base()
    Returns errors assigned to the base object through add_to_base according to the normal rules of
    on(attribute).
    
    
    
         # File vendor/rails/activerecord/lib/active_record/validations.rb, line 122
    122:     def on_base
    123:       on(:base)
    124:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Errors.html#M001352
- :tinyuri: http://tinyurl.com/4pv6lp
  :path: 
  - HTML
  - Selector
  :method: only_child
  :description: 
  :uri: http://api.rubyonrails.org/classes/HTML/Selector.html#M000174
- :tinyuri: http://tinyurl.com/44nuzy
  :path: 
  - ActionController
  - Integration
  - Runner
  :method: open_session
  :description: |+
    
        open_session() {|session if block_given?| ...}
    Open a new session instance. If a block is given, the new session is
    yielded to the block before being returned.
    
    
      session = open_session do |sess|
        sess.extend(CustomAssertions)
      end
    
    
    By default, a single session is automatically created for you, but you can
    use this method to open multiple sessions that ought to be tested
    simultaneously.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/integration.rb, line 413
    413:       def open_session
    414:         session = Integration::Session.new
    415: 
    416:         # delegate the fixture accessors back to the test instance
    417:         extras = Module.new { attr_accessor :delegate, :test_result }
    418:         if self.class.respond_to?(:fixture_table_names)
    419:           self.class.fixture_table_names.each do |table_name|
    420:             name = table_name.tr(".", "_")
    421:             next unless respond_to?(name)
    422:             extras.send!(:define_method, name) { |*args| delegate.send(name, *args) }
    423:           end
    424:         end
    425: 
    426:         # delegate add_assertion to the test case
    427:         extras.send!(:define_method, :add_assertion) { test_result.add_assertion }
    428:         session.extend(extras)
    429:         session.delegate = self
    430:         session.test_result = @_result
    431: 
    432:         yield session if block_given?
    433:         session
    434:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Integration/Runner.html#M000231
- :tinyuri: http://tinyurl.com/3kybve
  :path: 
  - ActionView
  - Helpers
  - FormOptionsHelper
  :method: option_groups_from_collection_for_select
  :description: |+
    
        option_groups_from_collection_for_select(collection, group_method, group_label_method, option_key_method, option_value_method, selected_key = nil)
    Returns a string of <option> tags, like options_from_collection_for_select,
    but groups them by <optgroup> tags based on the object
    relationships of the arguments.
    
    
    Parameters:
    
    
    collection:An array of objects representing the <optgroup> tags
    
    
    group_method:The name of a method which, when called on a member of collection,
    returns an array of child objects representing the <option>
    tags
    
    
    group_label_method:The name of a method which, when called on a member of collection,
    returns a string to be used as the label attribute for its
    <optgroup> tag
    
    
    option_key_method:The name of a method which, when called on a child object of a member of
    collection, returns a value to be used as the value
    attribute for its <option> tag
    
    
    option_value_method:The name of a method which, when called on a child object of a member of
    collection, returns a value to be used as the contents of its
    <option> tag
    
    
    selected_key:A value equal to the value attribute for one of the
    <option> tags, which will have the selected
    attribute set. Corresponds to the return value of one of the calls to
    option_key_method. If nil, no selection is made.
    
    
    
    
    Example object structure for use with this method:
    
    
      class Continent < ActiveRecord::Base
        has_many :countries
        # attribs: id, name
      end
      class Country < ActiveRecord::Base
        belongs_to :continent
        # attribs: id, name, continent_id
      end
    
    
    Sample usage:
    
    
      option_groups_from_collection_for_select(@continents, :countries, :name, :id, :name, 3)
    
    
    Possible output:
    
    
      <optgroup label="Africa">
        <option value="1">Egypt</option>
        <option value="4">Rwanda</option>
        ...
      </optgroup>
      <optgroup label="Asia">
        <option value="3" selected="selected">China</option>
        <option value="12">India</option>
        <option value="5">Japan</option>
        ...
      </optgroup>
    
    
    Note: Only the <optgroup> and <option>
    tags are returned, so you still have to wrap the output in an appropriate
    <select> tag.
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/form_options_helper.rb, line 233
    233:       def option_groups_from_collection_for_select(collection, group_method, group_label_method, option_key_method, option_value_method, selected_key = nil)
    234:         collection.inject("") do |options_for_select, group|
    235:           group_label_string = eval("group.#{group_label_method}")
    236:           options_for_select += "<optgroup label=\"#{html_escape(group_label_string)}\">"
    237:           options_for_select += options_from_collection_for_select(eval("group.#{group_method}"), option_key_method, option_value_method, selected_key)
    238:           options_for_select += '</optgroup>'
    239:         end
    240:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/FormOptionsHelper.html#M000946
- :tinyuri: http://tinyurl.com/4fb23d
  :path: 
  - Commands
  - Source
  :method: options
  :description: |+
    
        options()
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 579
    579:     def options
    580:       OptionParser.new do |o|
    581:         o.set_summary_indent('  ')
    582:         o.banner =    "Usage: #{@base_command.script_name} source REPOSITORY [REPOSITORY [REPOSITORY]...]"
    583:         o.define_head "Add new repositories to the default search list."
    584:       end
    585:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Commands/Source.html#M000495
- :tinyuri: http://tinyurl.com/3r3pwm
  :path: 
  - Commands
  - Discover
  :method: options
  :description: |+
    
        options()
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 643
    643:     def options
    644:       OptionParser.new do |o|
    645:         o.set_summary_indent('  ')
    646:         o.banner =    "Usage: #{@base_command.script_name} discover URI [URI [URI]...]"
    647:         o.define_head "Discover repositories referenced on a page."
    648:         o.separator   ""        
    649:         o.separator   "Options:"
    650:         o.separator   ""
    651:         o.on(         "-l", "--list", 
    652:                       "List but don't prompt or add discovered repositories.") { |@list| @prompt = !@list }
    653:         o.on(         "-n", "--no-prompt", 
    654:                       "Add all new repositories without prompting.") { |v| @prompt = !v }
    655:       end
    656:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Commands/Discover.html#M000480
- :tinyuri: http://tinyurl.com/488l25
  :path: 
  - Commands
  - Remove
  :method: options
  :description: |+
    
        options()
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 816
    816:     def options
    817:       OptionParser.new do |o|
    818:         o.set_summary_indent('  ')
    819:         o.banner =    "Usage: #{@base_command.script_name} remove name [name]..."
    820:         o.define_head "Remove plugins."
    821:       end
    822:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Commands/Remove.html#M000498
- :tinyuri: http://tinyurl.com/3tpakp
  :path: 
  - Rails
  - Generator
  - Options
  :method: options
  :description: "\n  \n    options()\n  \n  \n  \n\
    Each instance has an options hash\n\
    49:       def options\n\
    50:         @options ||= {}\n\
    51:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Options.html#M001475
- :tinyuri: http://tinyurl.com/3mmtjh
  :path: 
  - Commands
  - Sources
  :method: options
  :description: |+
    
        options()
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 552
    552:     def options
    553:       OptionParser.new do |o|
    554:         o.set_summary_indent('  ')
    555:         o.banner =    "Usage: #{@base_command.script_name} sources [OPTIONS] [PATTERN]"
    556:         o.define_head "List configured plugin repositories."
    557:         o.separator   ""        
    558:         o.separator   "Options:"
    559:         o.separator   ""
    560:         o.on(         "-c", "--check", 
    561:                       "Report status of repository.") { |@sources|}
    562:       end
    563:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Commands/Sources.html#M000485
- :tinyuri: http://tinyurl.com/43romx
  :path: 
  - Commands
  - Update
  :method: options
  :description: |+
    
        options()
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 781
    781:     def options
    782:       OptionParser.new do |o|
    783:         o.set_summary_indent('  ')
    784:         o.banner =    "Usage: #{@base_command.script_name} update [name [name]...]"
    785:         o.on(         "-r REVISION", "--revision REVISION",
    786:                       "Checks out the given revision from subversion.",
    787:                       "Ignored if subversion is not used.") { |v| @revision = v }
    788:         o.define_head "Update plugins."
    789:       end
    790:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Commands/Update.html#M000510
- :tinyuri: http://tinyurl.com/3j562d
  :path: 
  - Commands
  - Plugin
  :method: options
  :description: |+
    
        options()
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 415
    415:     def options
    416:       OptionParser.new do |o|
    417:         o.set_summary_indent('  ')
    418:         o.banner =    "Usage: #{@script_name} [OPTIONS] command"
    419:         o.define_head "Rails plugin manager."
    420:         
    421:         o.separator ""        
    422:         o.separator "GENERAL OPTIONS"
    423:         
    424:         o.on("-r", "--root=DIR", String,
    425:              "Set an explicit rails app directory.",
    426:              "Default: #{@rails_root}") { |@rails_root| self.environment = RailsEnvironment.new(@rails_root) }
    427:         o.on("-s", "--source=URL1,URL2", Array,
    428:              "Use the specified plugin repositories instead of the defaults.") { |@sources|}
    429:         
    430:         o.on("-v", "--verbose", "Turn on verbose output.") { |$verbose| }
    431:         o.on("-h", "--help", "Show this help message.") { puts o; exit }
    432:         
    433:         o.separator ""
    434:         o.separator "COMMANDS"
    435:         
    436:         o.separator "  discover   Discover plugin repositories."
    437:         o.separator "  list       List available plugins."
    438:         o.separator "  install    Install plugin(s) from known repositories or URLs."
    439:         o.separator "  update     Update installed plugins."
    440:         o.separator "  remove     Uninstall plugins."
    441:         o.separator "  source     Add a plugin source repository."
    442:         o.separator "  unsource   Remove a plugin repository."
    443:         o.separator "  sources    List currently configured plugin repositories."
    444:         
    445:         o.separator ""
    446:         o.separator "EXAMPLES"
    447:         o.separator "  Install a plugin:"
    448:         o.separator "    #{@script_name} install continuous_builder\n"
    449:         o.separator "  Install a plugin from a subversion URL:"
    450:         o.separator "    #{@script_name} install http://dev.rubyonrails.com/svn/rails/plugins/continuous_builder\n"
    451:         o.separator "  Install a plugin and add a svn:externals entry to vendor/plugins"
    452:         o.separator "    #{@script_name} install -x continuous_builder\n"
    453:         o.separator "  List all available plugins:"
    454:         o.separator "    #{@script_name} list\n"
    455:         o.separator "  List plugins in the specified repository:"
    456:         o.separator "    #{@script_name} list --source=http://dev.rubyonrails.com/svn/rails/plugins/\n"
    457:         o.separator "  Discover and prompt to add new repositories:"
    458:         o.separator "    #{@script_name} discover\n"
    459:         o.separator "  Discover new repositories but just list them, don't add anything:"
    460:         o.separator "    #{@script_name} discover -l\n"
    461:         o.separator "  Add a new repository to the source list:"
    462:         o.separator "    #{@script_name} source http://dev.rubyonrails.com/svn/rails/plugins/\n"
    463:         o.separator "  Remove a repository from the source list:"
    464:         o.separator "    #{@script_name} unsource http://dev.rubyonrails.com/svn/rails/plugins/\n"
    465:         o.separator "  Show currently configured repositories:"
    466:         o.separator "    #{@script_name} sources\n"        
    467:       end
    468:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Commands/Plugin.html#M000505
- :tinyuri: http://tinyurl.com/4xay4t
  :path: 
  - Commands
  - Unsource
  :method: options
  :description: |+
    
        options()
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 609
    609:     def options
    610:       OptionParser.new do |o|
    611:         o.set_summary_indent('  ')
    612:         o.banner =    "Usage: #{@base_command.script_name} source URI [URI [URI]...]"
    613:         o.define_head "Remove repositories from the default search list."
    614:         o.separator ""
    615:         o.on_tail("-h", "--help", "Show this help message.") { puts o; exit }
    616:       end
    617:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Commands/Unsource.html#M000513
- :tinyuri: http://tinyurl.com/52m5b3
  :path: 
  - Commands
  - Info
  :method: options
  :description: |+
    
        options()
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 838
    838:     def options
    839:       OptionParser.new do |o|
    840:         o.set_summary_indent('  ')
    841:         o.banner =    "Usage: #{@base_command.script_name} info name [name]..."
    842:         o.define_head "Shows plugin info at {url}/about.yml."
    843:       end
    844:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Commands/Info.html#M000488
- :tinyuri: http://tinyurl.com/3hcrab
  :path: 
  - Commands
  - List
  :method: options
  :description: |+
    
        options()
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 506
    506:     def options
    507:       OptionParser.new do |o|
    508:         o.set_summary_indent('  ')
    509:         o.banner =    "Usage: #{@base_command.script_name} list [OPTIONS] [PATTERN]"
    510:         o.define_head "List available plugins."
    511:         o.separator   ""        
    512:         o.separator   "Options:"
    513:         o.separator   ""
    514:         o.on(         "-s", "--source=URL1,URL2", Array,
    515:                       "Use the specified plugin repositories.") {|@sources|}
    516:         o.on(         "--local", 
    517:                       "List locally installed plugins.") {|@local| @remote = false}
    518:         o.on(         "--remote",
    519:                       "List remotely available plugins. This is the default behavior",
    520:                       "unless --local is provided.") {|@remote|}
    521:       end
    522:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Commands/List.html#M000501
- :tinyuri: http://tinyurl.com/3of8bj
  :path: 
  - ActiveRecord
  - Reflection
  - MacroReflection
  :method: options
  :description: "\n  \n    options()\n  \n  \n  \n\
    Returns the hash of options used\n\
    for the macro, so it would\n\
    return { :class_name =>\n\
    \"Money\" } for \"composed_of :balance, :class_name =>\n\
    93:       def options\n\
    94:         @options\n\
    95:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Reflection/MacroReflection.html#M001129
- :tinyuri: http://tinyurl.com/4jovgz
  :path: 
  - Commands
  - Install
  :method: options
  :description: |+
    
        options()
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 716
    716:     def options
    717:       OptionParser.new do |o|
    718:         o.set_summary_indent('  ')
    719:         o.banner =    "Usage: #{@base_command.script_name} install PLUGIN [PLUGIN [PLUGIN] ...]"
    720:         o.define_head "Install one or more plugins."
    721:         o.separator   ""
    722:         o.separator   "Options:"
    723:         o.on(         "-x", "--externals", 
    724:                       "Use svn:externals to grab the plugin.", 
    725:                       "Enables plugin updates and plugin versioning.") { |v| @method = :externals }
    726:         o.on(         "-o", "--checkout",
    727:                       "Use svn checkout to grab the plugin.",
    728:                       "Enables updating but does not add a svn:externals entry.") { |v| @method = :checkout }
    729:         o.on(         "-q", "--quiet",
    730:                       "Suppresses the output from installation.",
    731:                       "Ignored if -v is passed (./script/plugin -v install ...)") { |v| @options[:quiet] = true }
    732:         o.on(         "-r REVISION", "--revision REVISION",
    733:                       "Checks out the given revision from subversion.",
    734:                       "Ignored if subversion is not used.") { |v| @options[:revision] = v }
    735:         o.on(         "-f", "--force",
    736:                       "Reinstalls a plugin if it's already installed.") { |v| @options[:force] = true }
    737:         o.separator   ""
    738:         o.separator   "You can specify plugin names as given in 'plugin list' output or absolute URLs to "
    739:         o.separator   "a plugin repository."
    740:       end
    741:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Commands/Install.html#M000491
- :tinyuri: http://tinyurl.com/45k3e2
  :path: 
  - ActionView
  - Helpers
  - PrototypeHelper
  :method: options_for_ajax
  :description: |+
    
        options_for_ajax(options)
    
    
          # File vendor/rails/actionpack/lib/action_view/helpers/prototype_helper.rb, line 1006
    1006:       def options_for_ajax(options)
    1007:         js_options = build_callbacks(options)
    1008:       
    1009:         js_options['asynchronous'] = options[:type] != :synchronous
    1010:         js_options['method']       = method_option_to_s(options[:method]) if options[:method]
    1011:         js_options['insertion']    = "Insertion.#{options[:position].to_s.camelize}" if options[:position]
    1012:         js_options['evalScripts']  = options[:script].nil? || options[:script]
    1013: 
    1014:         if options[:form]
    1015:           js_options['parameters'] = 'Form.serialize(this)'
    1016:         elsif options[:submit]
    1017:           js_options['parameters'] = "Form.serialize('#{options[:submit]}')"
    1018:         elsif options[:with]
    1019:           js_options['parameters'] = options[:with]
    1020:         end
    1021:         
    1022:         if protect_against_forgery?
    1023:           if js_options['parameters']
    1024:             js_options['parameters'] << " + '&"
    1025:           else
    1026:             js_options['parameters'] = "'"
    1027:           end
    1028:           js_options['parameters'] << "#{request_forgery_protection_token}=' + encodeURIComponent('#{escape_javascript form_authenticity_token}')"
    1029:         end
    1030:       
    1031:         options_for_javascript(js_options)
    1032:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/PrototypeHelper.html#M000970
- :tinyuri: http://tinyurl.com/3kuhrf
  :path: 
  - ActionView
  - Helpers
  - JavaScriptHelper
  :method: options_for_javascript
  :description: |+
    
        options_for_javascript(options)
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/javascript_helper.rb, line 196
    196:       def options_for_javascript(options)
    197:         '{' + options.map {|k, v| "#{k}:#{v}"}.sort.join(', ') + '}'
    198:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/JavaScriptHelper.html#M001066
- :tinyuri: http://tinyurl.com/4g77we
  :path: 
  - ActionView
  - Helpers
  - FormOptionsHelper
  :method: options_for_select
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/FormOptionsHelper.html#M000944
- :tinyuri: http://tinyurl.com/4uc3yu
  :path: 
  - ActionView
  - Helpers
  - FormOptionsHelper
  :method: options_from_collection_for_select
  :description: |+
    
        options_from_collection_for_select(collection, value_method, text_method, selected = nil)
    Returns a string of option tags that have been compiled by iterating over
    the collection and assigning the the result of a call to the
    value_method as the option value and the text_method as
    the option text. If selected is specified, the element returning a
    match on value_method will get the selected option tag.
    
    
    Example (call, result). Imagine a loop iterating over each person
    in @project.people to generate an input tag:
    
    
      options_from_collection_for_select(@project.people, "id", "name")
        <option value="#{person.id}">#{person.name}</option>
    
    
    NOTE: Only the option tags are returned, you have to wrap this call in a
    regular HTML select tag.
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/form_options_helper.rb, line 179
    179:       def options_from_collection_for_select(collection, value_method, text_method, selected = nil)
    180:         options = collection.map do |element|
    181:           [element.send(text_method), element.send(value_method)]
    182:         end
    183:         options_for_select(options, selected)
    184:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/FormOptionsHelper.html#M000945
- :tinyuri: http://tinyurl.com/494qv6
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - SchemaStatements
  :method: options_include_default?
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#M001164
- :tinyuri: http://tinyurl.com/3egwvg
  :path: 
  - ActiveSupport
  - CoreExtensions
  - String
  - Conversions
  :method: ord
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/String/Conversions.html#M000736
- :tinyuri: http://tinyurl.com/3slsxw
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Integer
  - Inflections
  :method: ordinalize
  :description: |+
    
        ordinalize()
    Ordinalize turns a number into an ordinal string used to denote the
    position in an ordered sequence such as 1st, 2nd, 3rd, 4th.
    
    
    Examples
    
    
      1.ordinalize    # => "1st"
      2.ordinalize    # => "2nd"
      1002.ordinalize # => "1002nd"
      1003.ordinalize # => "1003rd"
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/integer/inflections.rb, line 15
    15:         def ordinalize
    16:           Inflector.ordinalize(self)
    17:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Integer/Inflections.html#M000567
- :tinyuri: http://tinyurl.com/3ljdwo
  :path: 
  - Inflector
  :method: ordinalize
  :description: |+
    
        ordinalize(number)
    Ordinalize turns a number into an ordinal string used to denote the
    position in an ordered sequence such as 1st, 2nd, 3rd, 4th.
    
    
    Examples
    
    
      ordinalize(1)     # => "1st"
      ordinalize(2)     # => "2nd"
      ordinalize(1002)  # => "1002nd"
      ordinalize(1003)  # => "1003rd"
    
    
    
         # File vendor/rails/activesupport/lib/active_support/inflector.rb, line 268
    268:   def ordinalize(number)
    269:     if (11..13).include?(number.to_i % 100)
    270:       "#{number}th"
    271:     else
    272:       case number.to_i % 10
    273:         when 1; "#{number}st"
    274:         when 2; "#{number}nd"
    275:         when 3; "#{number}rd"
    276:         else    "#{number}th"
    277:       end
    278:     end
    279:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Inflector.html#M001629
- :tinyuri: http://tinyurl.com/4kdrlr
  :path: 
  - ActionController
  - UploadedFile
  :method: original_filename
  :description: "\n  \n    original_filename()\n  \n  \n  \n\
    Take the basename of the upload\xE2\x80\x98s original filename. This handles the\n\
    full Windows paths given by Internet Explorer (and perhaps other broken\n\
    user agents) without affecting those which give the lone filename. The\n\
    708:     def original_filename\n\
    709:       unless defined? @original_filename\n\
    710:         @original_filename =\n\
    711:           unless original_path.blank?\n\
    712:             if original_path =~ /^(?:.*[:\\\\\\/])?(.*)/m\n\
    713:               $1\n\
    714:             else\n\
    715:               File.basename original_path\n\
    716:             end\n\
    717:           end\n\
    718:       end\n\
    719:       @original_filename\n\
    720:     end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionController/UploadedFile.html#M000302
- :tinyuri: http://tinyurl.com/5yzmoa
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Range
  - Overlaps
  :method: overlaps?
  :description: |+
    
        overlaps?(other)
    
    
       # File vendor/rails/activesupport/lib/active_support/core_ext/range/overlaps.rb, line 6
    6:         def overlaps?(other)
    7:           include?(other.first) || other.include?(first)
    8:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Range/Overlaps.html#M000563
- :tinyuri: http://tinyurl.com/4pntvx
  :path: 
  - ActiveSupport
  - Multibyte
  - Handlers
  - UTF8Handler
  :method: padding
  :description: |+
    
        padding(padsize, padstr=' ')
    Generates a padding string of a
    certain size.
    
    
    
         # File vendor/rails/activesupport/lib/active_support/multibyte/handlers/utf8_handler.rb, line 444
    444:       def padding(padsize, padstr=' ')
    445:         if padsize != 0
    446:           slice(padstr * ((padsize / size(padstr)) + 1), 0, padsize)
    447:         else
    448:           ''
    449:         end
    450:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Handlers/UTF8Handler.html#M000542
- :tinyuri: http://tinyurl.com/3nbpoq
  :path: 
  - ActionController
  - AbstractRequest
  :method: parameters
  :description: |+
    
        parameters()
    Returns both GET and POST parameters in a single hash.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/request.rb, line 286
    286:     def parameters
    287:       @parameters ||= request_parameters.merge(query_parameters).update(path_parameters).with_indifferent_access
    288:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/AbstractRequest.html#M000425
- :tinyuri: http://tinyurl.com/4wqaw8
  :path: 
  - Mime
  - Type
  :method: parse
  :description: |+
    
        parse(accept_header)
    
    
         # File vendor/rails/actionpack/lib/action_controller/mime_type.rb, line 70
     70:       def parse(accept_header)
     71:         # keep track of creation order to keep the subsequent sort stable
     72:         list = []
     73:         accept_header.split(/,/).each_with_index do |header, index| 
     74:           params = header.split(/;\s*q=/)
     75:           list << AcceptItem.new(index, *params) unless params.empty?
     76:         end
     77:         list.sort!
     78: 
     79:         # Take care of the broken text/xml entry by renaming or deleting it
     80:         text_xml = list.index("text/xml")
     81:         app_xml = list.index(Mime::XML.to_s)
     82: 
     83:         if text_xml && app_xml
     84:           # set the q value to the max of the two
     85:           list[app_xml].q = [list[text_xml].q, list[app_xml].q].max
     86: 
     87:           # make sure app_xml is ahead of text_xml in the list
     88:           if app_xml > text_xml
     89:             list[app_xml], list[text_xml] = list[text_xml], list[app_xml]
     90:             app_xml, text_xml = text_xml, app_xml
     91:           end
     92: 
     93:           # delete text_xml from the list
     94:           list.delete_at(text_xml)
     95: 
     96:         elsif text_xml
     97:           list[text_xml].name = Mime::XML.to_s
     98:         end
     99: 
    100:         # Look for more specific xml-based types and sort them ahead of app/xml
    101: 
    102:         if app_xml
    103:           idx = app_xml
    104:           app_xml_type = list[app_xml]
    105: 
    106:           while(idx < list.length)
    107:             type = list[idx]
    108:             break if type.q < app_xml_type.q
    109:             if type.name =~ /\+xml$/
    110:               list[app_xml], list[idx] = list[idx], list[app_xml]
    111:               app_xml = idx
    112:             end
    113:             idx += 1
    114:           end
    115:         end
    116: 
    117:         list.map! { |i| Mime::Type.lookup(i.name) }.uniq!
    118:         list
    119:       end
    
    
  :uri: http://api.rubyonrails.org/classes/Mime/Type.html#M001652
- :tinyuri: http://tinyurl.com/3jr27m
  :path: 
  - Commands
  - Info
  :method: parse!
  :description: |+
    
        parse!(args)
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 846
    846:     def parse!(args)
    847:       options.parse!(args)
    848:       args.each do |name|
    849:         puts ::Plugin.find(name).info
    850:         puts
    851:       end
    852:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Commands/Info.html#M000489
- :tinyuri: http://tinyurl.com/4xvua5
  :path: 
  - Commands
  - Update
  :method: parse!
  :description: |+
    
        parse!(args)
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 792
    792:     def parse!(args)
    793:       options.parse!(args)
    794:       root = @base_command.environment.root
    795:       cd root
    796:       args = Dir["vendor/plugins/*"].map do |f|
    797:         File.directory?("#{f}/.svn") ? File.basename(f) : nil
    798:       end.compact if args.empty?
    799:       cd "vendor/plugins"
    800:       args.each do |name|
    801:         if File.directory?(name)
    802:           puts "Updating plugin: #{name}"
    803:           system("svn #{$verbose ? '' : '-q'} up \"#{name}\" #{@revision ? "-r #{@revision}" : ''}")
    804:         else
    805:           puts "Plugin doesn't exist: #{name}"
    806:         end
    807:       end
    808:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Commands/Update.html#M000511
- :tinyuri: http://tinyurl.com/4m66dt
  :path: 
  - Commands
  - Source
  :method: parse!
  :description: |+
    
        parse!(args)
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 587
    587:     def parse!(args)
    588:       options.parse!(args)
    589:       count = 0
    590:       args.each do |uri|
    591:         if Repositories.instance.add(uri)
    592:           puts "added: #{uri.ljust(50)}" if $verbose
    593:           count += 1
    594:         else
    595:           puts "failed: #{uri.ljust(50)}"
    596:         end
    597:       end
    598:       Repositories.instance.save
    599:       puts "Added #{count} repositories."
    600:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Commands/Source.html#M000496
- :tinyuri: http://tinyurl.com/3fd5rh
  :path: 
  - Commands
  - Plugin
  :method: parse!
  :description: |+
    
        parse!(args=ARGV)
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 492
    492:     def self.parse!(args=ARGV)
    493:       Plugin.new.parse!(args)
    494:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Commands/Plugin.html#M000508
- :tinyuri: http://tinyurl.com/43kev8
  :path: 
  - Commands
  - Plugin
  :method: parse!
  :description: |+
    
        parse!(args=ARGV)
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 470
    470:     def parse!(args=ARGV)
    471:       general, sub = split_args(args)
    472:       options.parse!(general)
    473:       
    474:       command = general.shift
    475:       if command =~ /^(list|discover|install|source|unsource|sources|remove|update|info)$/
    476:         command = Commands.const_get(command.capitalize).new(self)
    477:         command.parse!(sub)
    478:       else
    479:         puts "Unknown command: #{command}"
    480:         puts options
    481:         exit 1
    482:       end
    483:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Commands/Plugin.html#M000506
- :tinyuri: http://tinyurl.com/3zutbl
  :path: 
  - Commands
  - Discover
  :method: parse!
  :description: |+
    
        parse!(args)
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 658
    658:     def parse!(args)
    659:       options.parse!(args)
    660:       args = ['http://wiki.rubyonrails.org/rails/pages/Plugins'] if args.empty?
    661:       args.each do |uri|
    662:         scrape(uri) do |repo_uri|
    663:           catch(:next_uri) do
    664:             if @prompt
    665:               begin
    666:                 $stdout.print "Add #{repo_uri}? [Y/n] "
    667:                 throw :next_uri if $stdin.gets !~ /^y?$/i
    668:               rescue Interrupt
    669:                 $stdout.puts
    670:                 exit 1
    671:               end
    672:             elsif @list
    673:               puts repo_uri
    674:               throw :next_uri
    675:             end
    676:             Repositories.instance.add(repo_uri)
    677:             puts "discovered: #{repo_uri}" if $verbose or !@prompt
    678:           end
    679:         end
    680:       end
    681:       Repositories.instance.save
    682:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Commands/Discover.html#M000481
- :tinyuri: http://tinyurl.com/4scej3
  :path: 
  - Commands
  - Remove
  :method: parse!
  :description: |+
    
        parse!(args)
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 824
    824:     def parse!(args)
    825:       options.parse!(args)
    826:       root = @base_command.environment.root
    827:       args.each do |name|
    828:         ::Plugin.new(name).uninstall
    829:       end
    830:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Commands/Remove.html#M000499
- :tinyuri: http://tinyurl.com/3qxact
  :path: 
  - Commands
  - List
  :method: parse!
  :description: |+
    
        parse!(args)
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 524
    524:     def parse!(args)
    525:       options.order!(args)
    526:       unless @sources.empty?
    527:         @sources.map!{ |uri| Repository.new(uri) }
    528:       else
    529:         @sources = Repositories.instance.all
    530:       end
    531:       if @remote
    532:         @sources.map{|r| r.plugins}.flatten.each do |plugin| 
    533:           if @local or !plugin.installed?
    534:             puts plugin.to_s
    535:           end
    536:         end
    537:       else
    538:         cd "#{@base_command.environment.root}/vendor/plugins"
    539:         Dir["*"].select{|p| File.directory?(p)}.each do |name| 
    540:           puts name
    541:         end
    542:       end
    543:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Commands/List.html#M000502
- :tinyuri: http://tinyurl.com/4755fc
  :path: 
  - Rails
  - Generator
  - Options
  :method: parse!
  :description: |+
    
        parse!(args, runtime_options = {})
    Parse arguments into the options hash.
    Classes may customize parsing behavior by overriding these methods:
    
    
      #banner                 Usage: ./script/generate [options]
      #add_options!           Options:
                                some options..
      #add_general_options!   General Options:
                                general options..
    
    
    
        # File vendor/rails/railties/lib/rails_generator/options.rb, line 81
    81:         def parse!(args, runtime_options = {})
    82:           self.options = {}
    83: 
    84:           @option_parser = OptionParser.new do |opt|
    85:             opt.banner = banner
    86:             add_options!(opt)
    87:             add_general_options!(opt)
    88:             opt.parse!(args)
    89:           end
    90: 
    91:           return args
    92:         ensure
    93:           self.options = full_options(runtime_options)
    94:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Options.html#M001479
- :tinyuri: http://tinyurl.com/3h5hjj
  :path: 
  - Commands
  - Unsource
  :method: parse!
  :description: |+
    
        parse!(args)
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 619
    619:     def parse!(args)
    620:       options.parse!(args)
    621:       count = 0
    622:       args.each do |uri|
    623:         if Repositories.instance.remove(uri)
    624:           count += 1
    625:           puts "removed: #{uri.ljust(50)}"
    626:         else
    627:           puts "failed: #{uri.ljust(50)}"
    628:         end
    629:       end
    630:       Repositories.instance.save
    631:       puts "Removed #{count} repositories."
    632:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Commands/Unsource.html#M000514
- :tinyuri: http://tinyurl.com/4qk2ry
  :path: 
  - Commands
  - Sources
  :method: parse!
  :description: |+
    
        parse!(args)
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 565
    565:     def parse!(args)
    566:       options.parse!(args)
    567:       Repositories.each do |repo|
    568:         puts repo.uri
    569:       end
    570:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Commands/Sources.html#M000486
- :tinyuri: http://tinyurl.com/4ys366
  :path: 
  - Commands
  - Install
  :method: parse!
  :description: |+
    
        parse!(args)
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 761
    761:     def parse!(args)
    762:       options.parse!(args)
    763:       environment = @base_command.environment
    764:       install_method = determine_install_method
    765:       puts "Plugins will be installed using #{install_method}" if $verbose
    766:       args.each do |name|
    767:         ::Plugin.find(name).install(install_method, @options)
    768:       end
    769:     rescue StandardError => e
    770:       puts "Plugin not found: #{args.inspect}"
    771:       puts e.inspect if $verbose
    772:       exit 1
    773:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Commands/Install.html#M000493
- :tinyuri: http://tinyurl.com/4n2c9u
  :path: 
  - ActionController
  - RequestProfiler
  :method: parse_options
  :description: |+
    
        parse_options(args)
    Parse command-line options
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/request_profiler.rb, line 97
     97:     def parse_options(args)
     98:       OptionParser.new do |opt|
     99:         opt.banner = "USAGE: #{$0} [options] [session script path]"
    100: 
    101:         opt.on('-n', '--times [0000]', 'How many requests to process. Defaults to 100.') { |v| options[:n] = v.to_i }
    102:         opt.on('-b', '--benchmark', 'Benchmark instead of profiling') { |v| options[:benchmark] = v }
    103:         opt.on('--open [CMD]', 'Command to open profile results. Defaults to "open %s &"') { |v| options[:open] = v }
    104:         opt.on('-h', '--help', 'Show this help') { puts opt; exit }
    105: 
    106:         opt.parse args
    107: 
    108:         if args.empty?
    109:           puts opt
    110:           exit
    111:         end
    112:         options[:script] = args.pop
    113:       end
    114:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/RequestProfiler.html#M000386
- :tinyuri: http://tinyurl.com/4a89hw
  :path: 
  - ActionController
  - RecordIdentifier
  :method: partial_path
  :description: |+
    
        partial_path(record_or_class)
    Returns plural/singular for a record or class. Example:
    
    
      partial_path(post)   # => "posts/post"
      partial_path(Person) # => "people/person"
    
    
    
        # File vendor/rails/actionpack/lib/action_controller/record_identifier.rb, line 38
    38:     def partial_path(record_or_class)
    39:       klass = class_from_record_or_class(record_or_class)
    40:       "#{klass.name.tableize}/#{klass.name.demodulize.underscore}"
    41:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/RecordIdentifier.html#M000276
- :tinyuri: http://tinyurl.com/4od4kf
  :path: 
  - ActionView
  - Helpers
  - RecordIdentificationHelper
  :method: partial_path
  :description: "\n  \n    partial_path(*args, &block)\n  \n  \n  \n\
    See ActionController::RecordIdentifier.partial_path \xE2\x80\x94 this is just a\n\
    5:       def partial_path(*args, &block)\n\
    6:         ActionController::RecordIdentifier.partial_path(*args, &block)\n\
    7:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/RecordIdentificationHelper.html#M000949
- :tinyuri: http://tinyurl.com/3myxe8
  :path: 
  - ActionView
  - Helpers
  - FormHelper
  :method: password_field
  :description: |+
    
        password_field(object_name, method, options = {})
    Returns an input tag of the "password" type tailored for
    accessing a specified attribute (identified by method) on an
    object assigned to the template (identified by object). Additional
    options on the input tag can be passed as a hash with options.
    These options will be tagged onto the HTML as an HTML element attribute as
    in the example shown.
    
    Examples
    
      password_field(:login, :pass, :size => 20)
      # => <input type="text" id="login_pass" name="login[pass]" size="20" value="#{@login.pass}" />
    
      password_field(:account, :secret, :class => "form_input")
      # => <input type="text" id="account_secret" name="account[secret]" value="#{@account.secret}" class="form_input" />
    
      password_field(:user, :password, :onchange => "if $('user[password]').length > 30 { alert('Your password needs to be shorter!'); }")
      # => <input type="text" id="user_password" name="user[password]" value="#{@user.password}" onchange = "if $('user[password]').length > 30 { alert('Your password needs to be shorter!'); }"/>
    
      password_field(:account, :pin, :size => 20, :class => 'form_input')
      # => <input type="text" id="account_pin" name="account[pin]" size="20" value="#{@account.pin}" class="form_input" />
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/form_helper.rb, line 310
    310:       def password_field(object_name, method, options = {})
    311:         InstanceTag.new(object_name, method, self, nil, options.delete(:object)).to_input_field_tag("password", options)
    312:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/FormHelper.html#M000924
- :tinyuri: http://tinyurl.com/435sgo
  :path: 
  - ActionView
  - Helpers
  - FormTagHelper
  :method: password_field_tag
  :description: |+
    
        password_field_tag(name = "password", value = nil, options = {})
    Creates a password field, a masked text field that will hide the users
    input behind a mask character.
    
    Options
    
    :disabled - If set to true, the user will not be able to use this
    input.
    
    
    :size - The number of visible characters that will fit in the
    input.
    
    
    :maxlength - The maximum number of characters that the browser
    will allow the user to enter.
    
    
    Any other key creates standard HTML attributes for the tag.
    
    
    
    Examples
    
      password_field_tag 'pass'
      # => <input id="pass" name="pass" type="password" />
    
      password_field_tag 'secret', 'Your secret here'
      # => <input id="secret" name="secret" type="password" value="Your secret here" />
    
      password_field_tag 'masked', nil, :class => 'masked_input_field'
      # => <input class="masked_input_field" id="masked" name="masked" type="password" />
    
      password_field_tag 'token', '', :size => 15
      # => <input id="token" name="token" size="15" type="password" value="" />
    
      password_field_tag 'key', nil, :maxlength => 16
      # => <input id="key" maxlength="16" name="key" type="password" />
    
      password_field_tag 'confirm_pass', nil, :disabled => true
      # => <input disabled="disabled" id="confirm_pass" name="confirm_pass" type="password" />
    
      password_field_tag 'pin', '1234', :maxlength => 4, :size => 6, :class => "pin-input"
      # => <input class="pin-input" id="pin" maxlength="4" name="pin" size="6" type="password" value="1234" />
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/form_tag_helper.rb, line 203
    203:       def password_field_tag(name = "password", value = nil, options = {})
    204:         text_field_tag(name, value, options.update("type" => "password"))
    205:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/FormTagHelper.html#M001041
- :tinyuri: http://tinyurl.com/3zg9u4
  :path: 
  - ActionController
  - AbstractRequest
  :method: path
  :description: |+
    
        path()
    Returns the interpreted path to
    requested resource after all the installation directory of this application
    was taken into account
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/request.rb, line 251
    251:     def path
    252:       path = (uri = request_uri) ? uri.split('?').first.to_s : ''
    253: 
    254:       # Cut off the path to the installation directory if given
    255:       path.sub!(%r/^#{relative_url_root}/, '')
    256:       path || ''      
    257:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/AbstractRequest.html#M000422
- :tinyuri: http://tinyurl.com/3pznvc
  :path: 
  - ActionController
  - Caching
  - Actions
  - ActionCachePath
  :method: path_for
  :description: |+
    
        path_for(controller, options)
    
    
         # File vendor/rails/actionpack/lib/action_controller/caching.rb, line 270
    270:           def path_for(controller, options)
    271:             new(controller, options).path
    272:           end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Caching/Actions/ActionCachePath.html#M000267
- :tinyuri: http://tinyurl.com/52x95r
  :path: 
  - ActionController
  - AbstractRequest
  :method: path_parameters
  :description: |+
    
        path_parameters()
    Returns a hash with the parameters used to form the path of the request. Returned hash
    keys are strings. See symbolized_path_parameters for
    symbolized keys.
    
    
    Example:
    
    
      {'action' => 'my_action', 'controller' => 'my_controller'}
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/request.rb, line 306
    306:     def path_parameters
    307:       @path_parameters ||= {}
    308:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/AbstractRequest.html#M000427
- :tinyuri: http://tinyurl.com/3gnv52
  :path: 
  - ActionView
  - Helpers
  - AssetTagHelper
  :method: path_to_image
  :description: |
    
        path_to_image(source)
    Alias for image_path
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/AssetTagHelper.html#M001030
- :tinyuri: http://tinyurl.com/4q5gch
  :path: 
  - ActionView
  - Helpers
  - AssetTagHelper
  :method: path_to_javascript
  :description: |
    
        path_to_javascript(source)
    Alias for javascript_path
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/AssetTagHelper.html#M001023
- :tinyuri: http://tinyurl.com/3nqc6a
  :path: 
  - ActionView
  - Helpers
  - AssetTagHelper
  :method: path_to_stylesheet
  :description: |
    
        path_to_stylesheet(source)
    Alias for stylesheet_path
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/AssetTagHelper.html#M001027
- :tinyuri: http://tinyurl.com/4j32b9
  :path: 
  - ActionController
  - Caching
  - SqlCache
  :method: perform_action_with_caching
  :description: |+
    
        perform_action_with_caching()
    
    
         # File vendor/rails/actionpack/lib/action_controller/caching.rb, line 676
    676:       def perform_action_with_caching
    677:         ActiveRecord::Base.cache do
    678:           perform_action_without_caching
    679:         end
    680:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Caching/SqlCache.html#M000269
- :tinyuri: http://tinyurl.com/44v78q
  :path: 
  - ActionView
  - Helpers
  - PrototypeHelper
  :method: periodically_call_remote
  :description: |+
    
        periodically_call_remote(options = {})
    Periodically calls the specified url (options[:url]) every
    options[:frequency] seconds (default is 10). Usually used to
    update a specified div (options[:update]) with the results of the
    remote call. The options for specifying the target with :url and defining
    callbacks is the same as link_to_remote. Examples:
    
    
     # Call get_averages and put its results in 'avg' every 10 seconds
     # Generates:
     #      new PeriodicalExecuter(function() {new Ajax.Updater('avg', '/grades/get_averages',
     #      {asynchronous:true, evalScripts:true})}, 10)
     periodically_call_remote(:url => { :action => 'get_averages' }, :update => 'avg')
    
     # Call invoice every 10 seconds with the id of the customer
     # If it succeeds, update the invoice DIV; if it fails, update the error DIV
     # Generates:
     #      new PeriodicalExecuter(function() {new Ajax.Updater({success:'invoice',failure:'error'},
     #      '/testing/invoice/16', {asynchronous:true, evalScripts:true})}, 10)
     periodically_call_remote(:url => { :action => 'invoice', :id => customer.id },
        :update => { :success => "invoice", :failure => "error" }
    
     # Call update every 20 seconds and update the new_block DIV
     # Generates:
     # new PeriodicalExecuter(function() {new Ajax.Updater('news_block', 'update', {asynchronous:true, evalScripts:true})}, 20)
     periodically_call_remote(:url => 'update', :frequency => '20', :update => 'news_block')
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/prototype_helper.rb, line 283
    283:       def periodically_call_remote(options = {})
    284:          frequency = options[:frequency] || 10 # every ten seconds by default
    285:          code = "new PeriodicalExecuter(function() {#{remote_function(options)}}, #{frequency})"
    286:          javascript_tag(code)
    287:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/PrototypeHelper.html#M000959
- :tinyuri: http://tinyurl.com/4fzbr5
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Numeric
  - Bytes
  :method: petabyte
  :description: |
    
        petabyte()
    Alias for petabytes
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Numeric/Bytes.html#M000669
- :tinyuri: http://tinyurl.com/4tn6tl
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Numeric
  - Bytes
  :method: petabytes
  :description: |+
    
        petabytes()
    
      This method is also aliased as
      petabyte
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/numeric/bytes.rb, line 31
    31:         def petabytes
    32:           self * 1024.terabytes
    33:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Numeric/Bytes.html#M000668
- :tinyuri: http://tinyurl.com/4mkpsd
  :path: 
  - Rails
  - Initializer
  :method: plugin_loader
  :description: |+
    
        plugin_loader()
    
    
         # File vendor/rails/railties/lib/initializer.rb, line 193
    193:     def plugin_loader
    194:       @plugin_loader ||= configuration.plugin_loader.new(self)
    195:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Initializer.html#M001581
- :tinyuri: http://tinyurl.com/4b4fex
  :path: 
  - Repository
  :method: plugins
  :description: |+
    
        plugins()
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 372
    372:   def plugins
    373:     unless @plugins
    374:       if $verbose
    375:         puts "Discovering plugins in #{@uri}" 
    376:         puts index
    377:       end
    378: 
    379:       @plugins = index.reject{ |line| line !~ /\/$/ }
    380:       @plugins.map! { |name| Plugin.new(File.join(@uri, name), name) }
    381:     end
    382: 
    383:     @plugins
    384:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Repository.html#M000162
- :tinyuri: http://tinyurl.com/4p9agg
  :path: 
  - Rails
  - Configuration
  :method: plugins=
  :description: |+
    
        plugins=(plugins)
    
    
         # File vendor/rails/railties/lib/initializer.rb, line 429
    429:     def plugins=(plugins)
    430:       @plugins = plugins.nil? ? nil : plugins.map { |p| p.to_sym }
    431:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Configuration.html#M001603
- :tinyuri: http://tinyurl.com/4z6tf8
  :path: 
  - Inflector
  - Inflections
  :method: plural
  :description: |+
    
        plural(rule, replacement)
    Specifies a new pluralization rule
    and its replacement. The rule can either be a string or a regular
    expression. The replacement should always be a string that may include
    references to the matched data from the rule.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/inflector.rb, line 33
    33:     def plural(rule, replacement)
    34:       @plurals.insert(0, [rule, replacement])
    35:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Inflector/Inflections.html#M001631
- :tinyuri: http://tinyurl.com/442ycp
  :path: 
  - ActionController
  - RecordIdentifier
  :method: plural_class_name
  :description: |+
    
        plural_class_name(record_or_class)
    Returns the plural class name of a record or class. Examples:
    
    
      plural_class_name(post)             # => "posts"
      plural_class_name(Highrise::Person) # => "highrise_people"
    
    
    
        # File vendor/rails/actionpack/lib/action_controller/record_identifier.rb, line 74
    74:     def plural_class_name(record_or_class)
    75:       singular_class_name(record_or_class).pluralize
    76:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/RecordIdentifier.html#M000279
- :tinyuri: http://tinyurl.com/3dqats
  :path: 
  - ActionView
  - Helpers
  - TextHelper
  :method: pluralize
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/TextHelper.html#M001052
- :tinyuri: http://tinyurl.com/286zru
  :path: 
  - Inflector
  :method: pluralize
  :description: |+
    
        pluralize(word)
    Returns the plural form of the word in the string.
    
    
    Examples
    
    
      "post".pluralize #=> "posts"
      "octopus".pluralize #=> "octopi"
      "sheep".pluralize #=> "sheep"
      "words".pluralize #=> "words"
      "the blue mailman".pluralize #=> "the blue mailmen"
      "CamelOctopus".pluralize #=> "CamelOctopi"
    
    
    
         # File vendor/rails/activesupport/lib/active_support/inflector.rb, line 106
    106:   def pluralize(word)
    107:     result = word.to_s.dup
    108: 
    109:     if word.empty? || inflections.uncountables.include?(result.downcase)
    110:       result
    111:     else
    112:       inflections.plurals.each { |(rule, replacement)| break if result.gsub!(rule, replacement) }
    113:       result
    114:     end
    115:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Inflector.html#M001617
- :tinyuri: http://tinyurl.com/3vow3j
  :path: 
  - ActiveSupport
  - CoreExtensions
  - String
  - Inflections
  :method: pluralize
  :description: |+
    
        pluralize()
    Returns the plural form of the word in the string.
    
    
    Examples
    
    
      "post".pluralize #=> "posts"
      "octopus".pluralize #=> "octopi"
      "sheep".pluralize #=> "sheep"
      "words".pluralize #=> "words"
      "the blue mailman".pluralize #=> "the blue mailmen"
      "CamelOctopus".pluralize #=> "CamelOctopi"
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/string/inflections.rb, line 19
    19:         def pluralize
    20:           Inflector.pluralize(self)
    21:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/String/Inflections.html#M000740
- :tinyuri: http://tinyurl.com/4jw87a
  :path: 
  - ActionController
  - PolymorphicRoutes
  :method: polymorphic_path
  :description: |+
    
        polymorphic_path(record_or_hash_or_array)
    
    
        # File vendor/rails/actionpack/lib/action_controller/polymorphic_routes.rb, line 30
    30:     def polymorphic_path(record_or_hash_or_array)
    31:       polymorphic_url(record_or_hash_or_array, :routing_type => :path)
    32:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/PolymorphicRoutes.html#M000282
- :tinyuri: http://tinyurl.com/45rd4r
  :path: 
  - ActionController
  - PolymorphicRoutes
  :method: polymorphic_url
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionController/PolymorphicRoutes.html#M000281
- :tinyuri: http://tinyurl.com/3l4rz7
  :path: 
  - RecursiveHTTPFetcher
  :method: pop_d
  :description: |+
    
        pop_d()
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 882
    882:   def pop_d
    883:     @cwd = File.dirname(@cwd)
    884:   end
    
    
  :uri: http://api.rubyonrails.org/classes/RecursiveHTTPFetcher.html#M000011
- :tinyuri: http://tinyurl.com/4ujcpm
  :path: 
  - ActionController
  - AbstractRequest
  :method: port
  :description: |+
    
        port()
    Returns the port number of this
    request as an integer.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/request.rb, line 182
    182:     def port
    183:       @port_as_int ||= @env['SERVER_PORT'].to_i
    184:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/AbstractRequest.html#M000415
- :tinyuri: http://tinyurl.com/49c3lv
  :path: 
  - ActionController
  - AbstractRequest
  :method: port_string
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionController/AbstractRequest.html#M000417
- :tinyuri: http://tinyurl.com/3e7tyq
  :path: 
  - ActionController
  - Routing
  :method: possible_controllers
  :description: |+
    
        possible_controllers()
    
    
         # File vendor/rails/actionpack/lib/action_controller/routing.rb, line 318
    318:       def possible_controllers
    319:         unless @possible_controllers
    320:           @possible_controllers = []
    321: 
    322:           paths = controller_paths.select { |path| File.directory?(path) && path != "." }
    323: 
    324:           seen_paths = Hash.new {|h, k| h[k] = true; false}
    325:           normalize_paths(paths).each do |load_path|
    326:             Dir["#{load_path}/**/*_controller.rb"].collect do |path|
    327:               next if seen_paths[path.gsub(%r{^\.[/\\]}, "")]
    328: 
    329:               controller_name = path[(load_path.length + 1)..-1]
    330: 
    331:               controller_name.gsub!(/_controller\.rb\Z/, '')
    332:               @possible_controllers << controller_name
    333:             end
    334:           end
    335: 
    336:           # remove duplicates
    337:           @possible_controllers.uniq!
    338:         end
    339:         @possible_controllers
    340:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Routing.html#M000334
- :tinyuri: http://tinyurl.com/3sco49
  :path: 
  - ActiveResource
  - CustomMethods
  - InstanceMethods
  :method: post
  :description: |+
    
        post(method_name, options = {}, body = '')
    
    
        # File vendor/rails/activeresource/lib/active_resource/custom_methods.rb, line 78
    78:       def post(method_name, options = {}, body = '')
    79:         if new?
    80:           connection.post(custom_method_new_element_url(method_name, options), (body.nil? ? to_xml : body), self.class.headers)
    81:         else
    82:           connection.post(custom_method_element_url(method_name, options), body, self.class.headers)
    83:         end
    84:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/CustomMethods/InstanceMethods.html#M000785
- :tinyuri: http://tinyurl.com/3laa3y
  :path: 
  - ActiveResource
  - CustomMethods
  :method: post
  :description: |+
    
        post(method_name, options = {}, body = '')
    
    
        # File vendor/rails/activeresource/lib/active_resource/custom_methods.rb, line 46
    46:           def post(method_name, options = {}, body = '')
    47:             connection.post(custom_method_collection_url(method_name, options), body, headers)
    48:           end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/CustomMethods.html#M000780
- :tinyuri: http://tinyurl.com/4gkx8x
  :path: 
  - ActiveResource
  - Connection
  :method: post
  :description: |+
    
        post(path, body = '', headers = {})
    Execute a POST request. Used to create new resources.
    
    
    
         # File vendor/rails/activeresource/lib/active_resource/connection.rb, line 100
    100:     def post(path, body = '', headers = {})
    101:       request(:post, path, body.to_s, build_request_headers(headers))
    102:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Connection.html#M000873
- :tinyuri: http://tinyurl.com/4uosag
  :path: 
  - ActionController
  - Integration
  - Session
  :method: post
  :description: |+
    
        post(path, parameters = nil, headers = nil)
    Performs a POST request with the given parameters. See get() for more details.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/integration.rb, line 176
    176:       def post(path, parameters = nil, headers = nil)
    177:         process :post, path, parameters, headers
    178:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Integration/Session.html#M000246
- :tinyuri: http://tinyurl.com/4d29nt
  :path: 
  - ActionController
  - AbstractRequest
  :method: post?
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionController/AbstractRequest.html#M000396
- :tinyuri: http://tinyurl.com/3vueld
  :path: 
  - ActionController
  - Integration
  - Session
  :method: post_via_redirect
  :description: |+
    
        post_via_redirect(path, parameters = nil, headers = nil)
    Performs a POST request, following any subsequent redirect. See request_via_redirect() for more
    information.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/integration.rb, line 142
    142:       def post_via_redirect(path, parameters = nil, headers = nil)
    143:         request_via_redirect(:post, path, parameters, headers)
    144:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Integration/Session.html#M000241
- :tinyuri: http://tinyurl.com/4r74qc
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - PostgreSQLAdapter
  :method: postgresql_version
  :description: |+
    
        postgresql_version()
    Returns the version of the connected PostgreSQL version.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 696
    696:         def postgresql_version
    697:           @postgresql_version ||=
    698:             if @connection.respond_to?(:server_version)
    699:               @connection.server_version
    700:             else
    701:               # Mimic PGconn.server_version behavior
    702:               begin
    703:                 query('SELECT version()')[0][0] =~ /PostgreSQL (\d+)\.(\d+)\.(\d+)/
    704:                 ($1.to_i * 10000) + ($2.to_i * 100) + $3.to_i
    705:               rescue
    706:                 0
    707:               end
    708:             end
    709:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#M001281
- :tinyuri: http://tinyurl.com/3osxk5
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - AbstractAdapter
  :method: prefetch_primary_key?
  :description: "\n  \n    prefetch_primary_key?(table_name = nil)\n  \n  \n  \n\
    Should primary key values be selected from their corresponding sequence\n\
    before the insert statement? If true, next_sequence_value is called before\n\
    each insert to set the record\xE2\x80\x98s primary key. This is false for all\n\
    57:       def prefetch_primary_key?(table_name = nil)\n\
    58:         false\n\
    59:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#M001285
- :tinyuri: http://tinyurl.com/5y9zrk
  :path: 
  - ActiveResource
  - Base
  :method: prefix
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Base.html#M000830
- :tinyuri: http://tinyurl.com/3gx7qs
  :path: 
  - ActiveResource
  - Base
  :method: prefix=
  :description: "\n  \n    prefix=(value = '/')\n  \n  \n  \n\
    Sets the prefix for a resource\xE2\x80\x98s\n\
    nested URL (e.g., prefix/collectionname/1.xml). Default value is\n\
    234:       def prefix=(value = '/')\n\
    235:         # Replace :placeholders with '#{embedded options[:lookups]}'\n\
    236:         prefix_call = value.gsub(/:\\w+/) { |key| \"\\#{options[#{key}]}\" }\n\
    237: \n\
    238:         # Redefine the new methods.\n\
    239:         code = \"def prefix_source() \\\"\\#{value}\\\" end\\ndef prefix(options={}) \\\"\\#{prefix_call}\\\" end\\n\"\n\
    240:         silence_warnings { instance_eval code, __FILE__, __LINE__ }\n\
    241:       rescue\n\
    242:         logger.error \"Couldn't set prefix: #{$!}\\n  #{code}\"\n\
    243:         raise\n\
    244:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Base.html#M000832
- :tinyuri: http://tinyurl.com/3u52tb
  :path: 
  - ActiveResource
  - Base
  :method: prefix_source
  :description: |+
    
        prefix_source()
    An attribute reader for the source string for the resource path prefix. This method is regenerated at runtime
    based on what the prefix is set to.
    
    
    
         # File vendor/rails/activeresource/lib/active_resource/base.rb, line 227
    227:       def prefix_source
    228:         prefix # generate #prefix and #prefix_source methods first
    229:         prefix_source
    230:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Base.html#M000831
- :tinyuri: http://tinyurl.com/4peqya
  :path: 
  - ActionController
  - Dispatcher
  :method: prepare_application
  :description: |+
    
        prepare_application(force = false)
    
    
         # File vendor/rails/actionpack/lib/action_controller/dispatcher.rb, line 139
    139:     def prepare_application(force = false)
    140:       begin
    141:         require_dependency 'application' unless defined?(::ApplicationController)
    142:       rescue LoadError => error
    143:         raise unless error.message =~ /application\.rb/
    144:       end
    145: 
    146:       ActiveRecord::Base.verify_active_connections! if defined?(ActiveRecord)
    147: 
    148:       if unprepared || force
    149:         run_callbacks :prepare
    150:         self.unprepared = false
    151:       end
    152:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Dispatcher.html#M000473
- :tinyuri: http://tinyurl.com/3n2ls3
  :path: 
  - ActionController
  - TestCase
  :method: prepare_controller_class
  :description: |+
    
        prepare_controller_class(new_class)
    
    
        # File vendor/rails/actionpack/lib/action_controller/test_case.rb, line 38
    38:       def prepare_controller_class(new_class)
    39:         new_class.class_eval do
    40:           def rescue_action(e)
    41:             raise e
    42:           end
    43:         end
    44:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/TestCase.html#M000376
- :tinyuri: http://tinyurl.com/4xmqdf
  :path: 
  - ActionController
  - Filters
  - ClassMethods
  :method: prepend_after_filter
  :description: |+
    
        prepend_after_filter(*filters, &block)
    The passed filters will be prepended to the array of filters that
    run after actions on this controller are performed.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/filters.rb, line 271
    271:       def prepend_after_filter(*filters, &block)
    272:         prepend_filter_to_chain(filters, :after, &block)
    273:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Filters/ClassMethods.html#M000314
- :tinyuri: http://tinyurl.com/4swgze
  :path: 
  - ActionController
  - Filters
  - ClassMethods
  :method: prepend_around_filter
  :description: |+
    
        prepend_around_filter(*filters, &block)
    If you prepend_around_filter A.new,
    B.new, the filter chain looks like:
    
    
      A#before
        B#before
          # run the action
        B#after
      A#after
    
    
    With around filters which yield to the action block, before and after are
    the code before and after the yield.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/filters.rb, line 306
    306:       def prepend_around_filter(*filters, &block)
    307:         filters, conditions = extract_conditions(filters, &block)
    308:         filters.map { |f| proxy_before_and_after_filter(f) }.each do |filter|
    309:           prepend_filter_to_chain([filter, conditions])
    310:         end
    311:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Filters/ClassMethods.html#M000317
- :tinyuri: http://tinyurl.com/4lu2h6
  :path: 
  - ActionController
  - Filters
  - ClassMethods
  :method: prepend_before_filter
  :description: |+
    
        prepend_before_filter(*filters, &block)
    The passed filters will be prepended to the filter_chain and will execute before
    the action on this controller is performed.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/filters.rb, line 256
    256:       def prepend_before_filter(*filters, &block)
    257:         prepend_filter_to_chain(filters, :before, &block)
    258:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Filters/ClassMethods.html#M000311
- :tinyuri: http://tinyurl.com/47p7en
  :path: 
  - ActionController
  - Filters
  - ClassMethods
  :method: prepend_filter_to_chain
  :description: |+
    
        prepend_filter_to_chain(filters, filter_type = :around, &block)
    
    
         # File vendor/rails/actionpack/lib/action_controller/filters.rb, line 519
    519:         def prepend_filter_to_chain(filters, filter_type = :around, &block)
    520:           pos = find_filter_prepend_position(filters, filter_type)
    521:           update_filter_chain(filters, filter_type, pos, &block)
    522:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Filters/ClassMethods.html#M000324
- :tinyuri: http://tinyurl.com/3f4yur
  :path: 
  - Rails
  - Generator
  - Lookup
  - ClassMethods
  :method: prepend_sources
  :description: |+
    
        prepend_sources(*args)
    Add a source to the beginning of the list.
    
    
    
        # File vendor/rails/railties/lib/rails_generator/lookup.rb, line 74
    74:         def prepend_sources(*args)
    75:           write_inheritable_array(:sources, args.flatten + sources)
    76:           invalidate_cache!
    77:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Lookup/ClassMethods.html#M001535
- :tinyuri: http://tinyurl.com/4adp2q
  :path: 
  - ActionView
  - Base
  :method: prepend_view_path
  :description: |+
    
        prepend_view_path(path)
    Adds a view_path to the front of the view_paths array. This change affects
    the current request only.
    
    
      @template.prepend_view_path("views/default")
      @template.prepend_view_path(["views/default", "views/custom"])
    
    
    
         # File vendor/rails/actionpack/lib/action_view/base.rb, line 430
    430:     def prepend_view_path(path)
    431:       @view_paths.unshift(*path)
    432:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Base.html#M001092
- :tinyuri: http://tinyurl.com/3t8uxa
  :path: 
  - ActionController
  - Base
  :method: prepend_view_path
  :description: |+
    
        prepend_view_path(path)
    Adds a view_path to the front of the view_paths array. If the current class has no
    view paths, copy them from the superclass. This change will be visible for
    all future requests.
    
    
      ArticleController.prepend_view_path("views/default")
      ArticleController.prepend_view_path(["views/default", "views/custom"])
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/base.rb, line 440
    440:       def prepend_view_path(path)
    441:         @view_paths = superclass.view_paths.dup if @view_paths.nil?
    442:         view_paths.unshift(*path)
    443:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Base.html#M000439
- :tinyuri: http://tinyurl.com/43bbyz
  :path: 
  - ActionController
  - Base
  :method: prepend_view_path
  :description: |+
    
        prepend_view_path(path)
    Adds a view_path to the front of the view_paths array. This change affects the
    current request only.
    
    
      self.prepend_view_path("views/default")
      self.prepend_view_path(["views/default", "views/custom"])
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/base.rb, line 658
    658:       def prepend_view_path(path)
    659:         (@template || self.class).prepend_view_path(path)
    660:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Base.html#M000450
- :tinyuri: http://tinyurl.com/3zlpev
  :path: 
  - ActiveRecord
  - Base
  :method: primary_key
  :description: "\n  \n    primary_key()\n  \n  \n  \n\
    Defines the primary key field \xE2\x80\x94 can be overridden in subclasses.\n\
    Overwriting will negate any effect of the primary_key_prefix_type setting,\n\
    955:       def primary_key\n\
    956:         reset_primary_key\n\
    957:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001397
- :tinyuri: http://tinyurl.com/4s3amd
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - TableDefinition
  :method: primary_key
  :description: |+
    
        primary_key(name)
    Appends a primary key definition to the table definition. Can be called
    multiple times, but this is probably not a good idea.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 285
    285:       def primary_key(name)
    286:         column(name, :primary_key)
    287:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#M001220
- :tinyuri: http://tinyurl.com/3po6g6
  :path: 
  - Rails
  - Initializer
  :method: process
  :description: |+
    
        process()
    Sequentially step through all of the available initialization routines, in
    order:
    
    
    check_ruby_version
    
    
    set_load_path
    
    
    require_frameworks
    
    
    set_autoload_paths
    
    
    add_plugin_load_paths
    
    
    load_environment
    
    
    initialize_encoding
    
    
    initialize_database
    
    
    initialize_logger
    
    
    initialize_framework_logging
    
    
    initialize_framework_views
    
    
    initialize_dependency_mechanism
    
    
    initialize_whiny_nils
    
    
    initialize_temporary_directories
    
    
    initialize_framework_settings
    
    
    add_support_load_paths
    
    
    load_plugins
    
    
    load_observers
    
    
    initialize_routing
    
    
    after_initialize
    
    
    load_application_initializers
    
    
    
    
    
         # File vendor/rails/railties/lib/initializer.rb, line 84
     84:     def process
     85:       check_ruby_version
     86:       set_load_path
     87:       
     88:       require_frameworks
     89:       set_autoload_paths
     90:       add_plugin_load_paths
     91:       load_environment
     92: 
     93:       initialize_encoding
     94:       initialize_database
     95:       initialize_logger
     96:       initialize_framework_logging
     97:       initialize_framework_views
     98:       initialize_dependency_mechanism
     99:       initialize_whiny_nils
    100:       initialize_temporary_directories
    101:       initialize_framework_settings
    102: 
    103:       add_support_load_paths
    104: 
    105:       load_plugins
    106: 
    107:       # Observers are loaded after plugins in case Observers or observed models are modified by plugins.
    108:       load_observers
    109: 
    110:       # Routing must be initialized after plugins to allow the former to extend the routes
    111:       initialize_routing
    112: 
    113:       # the framework is now fully initialized
    114:       after_initialize
    115: 
    116:       load_application_initializers
    117:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Initializer.html#M001573
- :tinyuri: http://tinyurl.com/46tyzm
  :path: 
  - ActionController
  - TestProcess
  :method: process
  :description: |+
    
        process(action, parameters = nil, session = nil, flash = nil)
    execute the request and set/volley the response
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/test_process.rb, line 373
    373:     def process(action, parameters = nil, session = nil, flash = nil)
    374:       # Sanity check for required instance variables so we can give an
    375:       # understandable error message.
    376:       %w(@controller @request @response).each do |iv_name|
    377:         if !(instance_variables.include?(iv_name) || instance_variables.include?(iv_name.to_sym)) || instance_variable_get(iv_name).nil?
    378:           raise "#{iv_name} is nil: make sure you set it in your test's setup method."
    379:         end
    380:       end
    381: 
    382:       @request.recycle!
    383: 
    384:       @html_document = nil
    385:       @request.env['REQUEST_METHOD'] ||= "GET"
    386:       @request.action = action.to_s
    387: 
    388:       parameters ||= {}
    389:       @request.assign_parameters(@controller.class.controller_path, action.to_s, parameters)
    390: 
    391:       @request.session = ActionController::TestSession.new(session) unless session.nil?
    392:       @request.session["flash"] = ActionController::Flash::FlashHash.new.update(flash) if flash
    393:       build_request_uri(action, parameters)
    394:       @controller.process(@request, @response)
    395:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/TestProcess.html#M000190
- :tinyuri: http://tinyurl.com/525onl
  :path: 
  - RailsFCGIHandler
  :method: process!
  :description: |+
    
        process!(provider = FCGI)
    
    
        # File vendor/rails/railties/lib/fcgi_handler.rb, line 46
    46:   def process!(provider = FCGI)
    47:     mark_features!
    48: 
    49:     dispatcher_log :info, 'starting'
    50:     process_each_request provider
    51:     dispatcher_log :info, 'stopping gracefully'
    52: 
    53:   rescue Exception => error
    54:     case error
    55:     when SystemExit
    56:       dispatcher_log :info, 'stopping after explicit exit'
    57:     when SignalException
    58:       dispatcher_error error, 'stopping after unhandled signal'
    59:     else
    60:       # Retry if exceptions occur more than 10 seconds apart.
    61:       if Time.now - @last_error_on > 10
    62:         @last_error_on = Time.now
    63:         dispatcher_error error, 'retrying after unhandled exception'
    64:         retry
    65:       else
    66:         dispatcher_error error, 'stopping after unhandled exception within 10 seconds of the last'
    67:       end
    68:     end
    69:   end
    
    
  :uri: http://api.rubyonrails.org/classes/RailsFCGIHandler.html#M000031
- :tinyuri: http://tinyurl.com/3vy8pc
  :path: 
  - RailsFCGIHandler
  :method: process!
  :description: |+
    
        process!(*args, &block)
    Initialize and run the FastCGI instance, passing arguments through to new.
    
    
    
        # File vendor/rails/railties/lib/fcgi_handler.rb, line 23
    23:   def self.process!(*args, &block)
    24:     new(*args, &block).process!
    25:   end
    
    
  :uri: http://api.rubyonrails.org/classes/RailsFCGIHandler.html#M000029
- :tinyuri: http://tinyurl.com/4j8ht3
  :path: 
  - HTML
  - WhiteListSanitizer
  :method: process_attributes_for
  :description: 
  :uri: http://api.rubyonrails.org/classes/HTML/WhiteListSanitizer.html#M000179
- :tinyuri: http://tinyurl.com/5xdcvj
  :path: 
  - ActionController
  - Base
  :method: process_cgi
  :description: "\n  \n    process_cgi(cgi = CGI.new, session_options = {})\n  \n  \n  \n\
    Process a request extracted from an CGI object and return a response. Pass\n\
    false as session_options to disable sessions (large performance\n\
    increase if sessions are not needed). The session_options are the\n\
    same as for CGI::Session:\n\n\n\
    :database_manager - standard options are CGI::Session::FileStore,\n\
    CGI::Session::MemoryStore, and CGI::Session::PStore (default).\n\
    Additionally, there is CGI::Session::DRbStore and\n\
    CGI::Session::ActiveRecordStore. Read more about these in\n\
    lib/action_controller/session.\n\n\n\
    :session_key - the parameter name used for the session id.\n\
    Defaults to \xE2\x80\x98_session_id\xE2\x80\x99.\n\n\n\
    :session_id - the session id to use. If not provided, then it is\n\
    retrieved from the session_key cookie, or automatically generated\n\
    for a new session.\n\n\n\
    :new_session - if true, force creation of a new session. If not\n\
    set, a new session is only created if none currently exists. If false, a\n\
    new session is never created, and if none currently exists and the\n\
    session_id option is not set, an ArgumentError is raised.\n\n\n\
    :session_expires - the time the current session expires, as a\n\
    Time object. If not set, the session will continue indefinitely.\n\n\n\
    :session_domain - the hostname domain for which this session is\n\
    valid. If not set, defaults to the hostname of the server.\n\n\n\
    :session_secure - if true, this session will only work\n\
    over HTTPS.\n\n\n\
    :session_path - the path for which this session applies. Defaults\n\
    to the directory of the CGI script.\n\n\n\
    :cookie_only - if true (the default), session IDs will\n\
    only be accepted from cookies and not from the query string or POST\n\
    26:     def self.process_cgi(cgi = CGI.new, session_options = {})\n\
    27:       new.process_cgi(cgi, session_options)\n\
    28:     end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionController/Base.html#M000460
- :tinyuri: http://tinyurl.com/3ke47x
  :path: 
  - RailsFCGIHandler
  :method: process_each_request
  :description: 
  :uri: http://api.rubyonrails.org/classes/RailsFCGIHandler.html#M000032
- :tinyuri: http://tinyurl.com/4yzw9g
  :path: 
  - HTML
  - Sanitizer
  :method: process_node
  :description: |+
    
        process_node(node, result, options)
    
    
        # File vendor/rails/actionpack/lib/action_controller/vendor/html-scanner/html/sanitizer.rb, line 23
    23:     def process_node(node, result, options)
    24:       result << node.to_s
    25:     end
    
    
  :uri: http://api.rubyonrails.org/classes/HTML/Sanitizer.html#M000188
- :tinyuri: http://tinyurl.com/3rgz88
  :path: 
  - HTML
  - WhiteListSanitizer
  :method: process_node
  :description: 
  :uri: http://api.rubyonrails.org/classes/HTML/WhiteListSanitizer.html#M000178
- :tinyuri: http://tinyurl.com/4mq8d7
  :path: 
  - HTML
  - LinkSanitizer
  :method: process_node
  :description: |+
    
        process_node(node, result, options)
    
    
        # File vendor/rails/actionpack/lib/action_controller/vendor/html-scanner/html/sanitizer.rb, line 52
    52:     def process_node(node, result, options)
    53:       result << node.to_s unless node.is_a?(HTML::Tag) && included_tags.include?(node.name) 
    54:     end
    
    
  :uri: http://api.rubyonrails.org/classes/HTML/LinkSanitizer.html#M000184
- :tinyuri: http://tinyurl.com/48ldao
  :path: 
  - HTML
  - FullSanitizer
  :method: process_node
  :description: 
  :uri: http://api.rubyonrails.org/classes/HTML/FullSanitizer.html#M000182
- :tinyuri: http://tinyurl.com/3emfga
  :path: 
  - RailsFCGIHandler
  :method: process_request
  :description: |+
    
        process_request(cgi)
    
    
         # File vendor/rails/railties/lib/fcgi_handler.rb, line 95
     95:     def process_request(cgi)
     96:       @when_ready = nil
     97:       gc_countdown
     98: 
     99:       with_signal_handler 'USR1' do
    100:         begin
    101:           Dispatcher.dispatch(cgi)
    102:         rescue SignalException, SystemExit
    103:           raise
    104:         rescue Exception => error
    105:           dispatcher_error error, 'unhandled dispatch error'
    106:         end
    107:       end
    108:     end
    
    
  :uri: http://api.rubyonrails.org/classes/RailsFCGIHandler.html#M000033
- :tinyuri: http://tinyurl.com/4o4xnp
  :path: 
  - ActionController
  - Base
  :method: process_test
  :description: |+
    
        process_test(request)
    Process a test request called with a TestRequest object.
    
    
    
       # File vendor/rails/actionpack/lib/action_controller/test_process.rb, line 6
    6:     def self.process_test(request)
    7:       new.process_test(request)
    8:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Base.html#M000461
- :tinyuri: http://tinyurl.com/4hyjmh
  :path: 
  - ActionController
  - Base
  :method: process_with_test
  :description: |+
    
        process_with_test(*args)
    
    
        # File vendor/rails/actionpack/lib/action_controller/test_process.rb, line 14
    14:     def process_with_test(*args)
    15:       returning process_without_test(*args) do
    16:         add_variables_to_assigns
    17:       end
    18:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Base.html#M000462
- :tinyuri: http://tinyurl.com/4v6epx
  :path: 
  - ActionController
  - RequestProfiler
  :method: profile
  :description: |+
    
        profile(sandbox)
    
    
        # File vendor/rails/actionpack/lib/action_controller/request_profiler.rb, line 72
    72:     def profile(sandbox)
    73:       load_ruby_prof
    74: 
    75:       results = RubyProf.profile { benchmark(sandbox) }
    76: 
    77:       show_profile_results results
    78:       results
    79:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/RequestProfiler.html#M000382
- :tinyuri: http://tinyurl.com/4dgt5d
  :path: 
  - ActionController
  - RequestForgeryProtection
  :method: protect_against_forgery?
  :description: |+
    
        protect_against_forgery?()
    
    
         # File vendor/rails/actionpack/lib/action_controller/request_forgery_protection.rb, line 128
    128:       def protect_against_forgery?
    129:         allow_forgery_protection && request_forgery_protection_token
    130:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/RequestForgeryProtection.html#M000299
- :tinyuri: http://tinyurl.com/4rlo7t
  :path: 
  - ActionController
  - RequestForgeryProtection
  - ClassMethods
  :method: protect_from_forgery
  :description: "\n  \n    protect_from_forgery(options = {})\n  \n  \n  \n\
    Protect a controller\xE2\x80\x98s actions from CSRF attacks by ensuring that all\n\
    forms are coming from the current web application, not a forged link from\n\
    another site. This is done by embedding a token based on the session (which\n\
    an attacker wouldn\xE2\x80\x98t know) in all forms and Ajax requests generated\n\
    by Rails and then verifying the authenticity\n\
    of that token in the controller. Only HTML/JavaScript requests are checked,\n\
    so this will not protect your XML API (presumably you\xE2\x80\x98ll have a\n\
    different authentication scheme there anyway). Also, GET requests are not\n\
    protected as these should be indempotent anyway.\n\n\n\
    You turn this on with the protect_from_forgery method, which\n\
    will perform the check and raise an\n\
    ActionController::InvalidAuthenticityToken if the token doesn\xE2\x80\x98t match\n\
    what was expected. And it will add a _authenticity_token parameter to all\n\
    forms that are automatically generated by Rails. You can customize the error message\n\
    given through public/422.html.\n\n\n\
    Learn more about CSRF (Cross-Site Request Forgery) attacks:\n\n\n\
    isc.sans.org/diary.html?storyid=1750\n\n\n\
    en.wikipedia.org/wiki/Cross-site_request_forgery\n\n\n\n\n\
    Keep in mind, this is NOT a silver-bullet, plug \xE2\x80\x98n\xE2\x80\x99 play, warm\n\
    security blanket for your rails application. There are a few guidelines you\n\
    should follow:\n\n\n\
    Keep your GET requests safe and idempotent. More reading material:\n\n\n\
    www.xml.com/pub/a/2002/04/24/deviant.html\n\n\n\
    www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.1.1\n\n\n\n\n\
    Make sure the session cookies that Rails\n\
    creates are non-persistent. Check in Firefox and look for \"Expires: at\n\
    end of session\"\n\n\n\n\n\
    If you need to construct a request yourself, but still want to take\n\
    advantage of forgery protection, you can grab the authenticity_token using\n\
    the form_authenticity_token helper method and make it part of the\n\
    parameters yourself.\n\n\n\
    Example:\n\n\n  class FooController < ApplicationController\n    # uses the cookie session store (then you don't need a separate :secret)\n    protect_from_forgery :except => :index\n\n    # uses one of the other session stores that uses a session_id value.\n    protect_from_forgery :secret => 'my-little-pony', :except => :index\n\n    # you can disable csrf protection on controller-by-controller basis:\n    skip_before_filter :verify_authenticity_token\n  end\n\n\n\
    If you are upgrading from Rails 1.x, disable\n\
    forgery protection to simplify your tests. Add this to\n\
    config/environments/test.rb:\n\n\n  # Disable request forgery protection in test environment\n  config.action_controller.allow_forgery_protection = false\n\n\n\
    Valid Options:\n\n\n\
    :only/:except - passed to the before_filter call. Set which\n\
    actions are verified.\n\n\n\
    :secret - Custom salt used to generate the\n\
    form_authenticity_token. Leave this off if you are using the cookie session\n\
    store.\n\n\n\
    :digest - Message digest used for hashing. Defaults to\n\
    69:       def protect_from_forgery(options = {})\n\
    70:         self.request_forgery_protection_token ||= :authenticity_token\n\
    71:         before_filter :verify_authenticity_token, :only => options.delete(:only), :except => options.delete(:except)\n\
    72:         request_forgery_protection_options.update(options)\n\
    73:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionController/RequestForgeryProtection/ClassMethods.html#M000300
- :tinyuri: http://tinyurl.com/5yo594
  :path: 
  - ActionController
  - Caching
  - Actions
  :method: protected_instance_variables_with_action_caching
  :description: |+
    
        protected_instance_variables_with_action_caching()
    
    
         # File vendor/rails/actionpack/lib/action_controller/caching.rb, line 213
    213:       def protected_instance_variables_with_action_caching
    214:         protected_instance_variables_without_action_caching + %w(@action_cache_path)
    215:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Caching/Actions.html#M000264
- :tinyuri: http://tinyurl.com/3ger8c
  :path: 
  - ActionController
  - AbstractRequest
  :method: protocol
  :description: "\n  \n    protocol()\n  \n  \n  \n\
    Return \xE2\x80\x98https://\xE2\x80\x99 if this is an SSL request and\n\
    162:     def protocol\n\
    163:       ssl? ? 'https://' : 'http://'\n\
    164:     end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionController/AbstractRequest.html#M000411
- :tinyuri: http://tinyurl.com/4bohdb
  :path: 
  - RecursiveHTTPFetcher
  :method: push_d
  :description: |+
    
        push_d(dir)
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 877
    877:   def push_d(dir)
    878:     @cwd = File.join(@cwd, dir)
    879:     FileUtils.mkdir_p(@cwd)
    880:   end
    
    
  :uri: http://api.rubyonrails.org/classes/RecursiveHTTPFetcher.html#M000010
- :tinyuri: http://tinyurl.com/3nh89k
  :path: 
  - ActiveResource
  - CustomMethods
  :method: put
  :description: |+
    
        put(method_name, options = {}, body = '')
    
    
        # File vendor/rails/activeresource/lib/active_resource/custom_methods.rb, line 50
    50:           def put(method_name, options = {}, body = '')
    51:             connection.put(custom_method_collection_url(method_name, options), body, headers)
    52:           end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/CustomMethods.html#M000781
- :tinyuri: http://tinyurl.com/44m3c3
  :path: 
  - ActiveResource
  - CustomMethods
  - InstanceMethods
  :method: put
  :description: |+
    
        put(method_name, options = {}, body = '')
    
    
        # File vendor/rails/activeresource/lib/active_resource/custom_methods.rb, line 86
    86:       def put(method_name, options = {}, body = '')
    87:         connection.put(custom_method_element_url(method_name, options), body, self.class.headers)
    88:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/CustomMethods/InstanceMethods.html#M000786
- :tinyuri: http://tinyurl.com/4f97uf
  :path: 
  - ActionController
  - Integration
  - Session
  :method: put
  :description: |+
    
        put(path, parameters = nil, headers = nil)
    Performs a PUT request with the given parameters. See get() for more details.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/integration.rb, line 181
    181:       def put(path, parameters = nil, headers = nil)
    182:         process :put, path, parameters, headers
    183:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Integration/Session.html#M000247
- :tinyuri: http://tinyurl.com/4mblvn
  :path: 
  - ActiveResource
  - Connection
  :method: put
  :description: |+
    
        put(path, body = '', headers = {})
    Execute a PUT request (see HTTP protocol documentation if unfamiliar). Used
    to update resources.
    
    
    
        # File vendor/rails/activeresource/lib/active_resource/connection.rb, line 94
    94:     def put(path, body = '', headers = {})
    95:       request(:put, path, body.to_s, build_request_headers(headers))
    96:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Connection.html#M000872
- :tinyuri: http://tinyurl.com/486qt7
  :path: 
  - ActionController
  - AbstractRequest
  :method: put?
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionController/AbstractRequest.html#M000397
- :tinyuri: http://tinyurl.com/53ghy6
  :path: 
  - ActionController
  - Integration
  - Session
  :method: put_via_redirect
  :description: |+
    
        put_via_redirect(path, parameters = nil, headers = nil)
    Performs a PUT request, following any subsequent redirect. See request_via_redirect() for more
    information.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/integration.rb, line 148
    148:       def put_via_redirect(path, parameters = nil, headers = nil)
    149:         request_via_redirect(:put, path, parameters, headers)
    150:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Integration/Session.html#M000242
- :tinyuri: http://tinyurl.com/3fzlcb
  :path: 
  - ActionController
  - AbstractRequest
  :method: query_string
  :description: |+
    
        query_string()
    Return the query string, accounting for server idiosyncracies.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/request.rb, line 218
    218:     def query_string
    219:       if uri = @env['REQUEST_URI']
    220:         uri.split('?', 2)[1] || ''
    221:       else
    222:         @env['QUERY_STRING'] || ''
    223:       end
    224:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/AbstractRequest.html#M000420
- :tinyuri: http://tinyurl.com/4asbha
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - MysqlAdapter
  :method: quote
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#M001228
- :tinyuri: http://tinyurl.com/4px6jq
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - Quoting
  :method: quote
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/Quoting.html#M001165
- :tinyuri: http://tinyurl.com/4w2kly
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - Quoting
  :method: quote_column_name
  :description: |+
    
        quote_column_name(column_name)
    Quotes the column name. Defaults to no quoting.
    
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/quoting.rb, line 43
    43:       def quote_column_name(column_name)
    44:         column_name
    45:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/Quoting.html#M001167
- :tinyuri: http://tinyurl.com/4x86vv
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - Quoting
  :method: quote_string
  :description: "\n  \n    quote_string(s)\n  \n  \n  \n\
    38:       def quote_string(s)\n\
    39:         s.gsub(/\\\\/, '\\&\\&').gsub(/'/, \"''\") # ' (for ruby-mode)\n\
    40:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/Quoting.html#M001166
- :tinyuri: http://tinyurl.com/4lfg2m
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - Quoting
  :method: quote_table_name
  :description: |+
    
        quote_table_name(table_name)
    Quotes the table name. Defaults to column name quoting.
    
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/quoting.rb, line 48
    48:       def quote_table_name(table_name)
    49:         quote_column_name(table_name)
    50:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/Quoting.html#M001168
- :tinyuri: http://tinyurl.com/3hbx4d
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - AbstractAdapter
  :method: quote_table_name
  :description: |+
    
        quote_table_name(name)
    Override to return the quoted table name if the database needs it
    
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 69
    69:       def quote_table_name(name)
    70:         name
    71:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#M001286
- :tinyuri: http://tinyurl.com/4qpzbs
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - Quoting
  :method: quoted_date
  :description: |+
    
        quoted_date(value)
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/quoting.rb, line 60
    60:       def quoted_date(value)
    61:         value.to_s(:db)
    62:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/Quoting.html#M001171
- :tinyuri: http://tinyurl.com/4jn4ak
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - MysqlAdapter
  :method: quoted_false
  :description: |+
    
        quoted_false()
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb, line 225
    225:       def quoted_false
    226:         "0"
    227:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#M001230
- :tinyuri: http://tinyurl.com/45z984
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - Quoting
  :method: quoted_false
  :description: |+
    
        quoted_false()
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/quoting.rb, line 56
    56:       def quoted_false
    57:         "'f'"
    58:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/Quoting.html#M001170
- :tinyuri: http://tinyurl.com/3ksnlh
  :path: 
  - ActiveRecord
  - Locking
  - Optimistic
  - ClassMethods
  :method: quoted_locking_column
  :description: |+
    
        quoted_locking_column()
    Quote the column name used for optimistic locking.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/locking/optimistic.rb, line 127
    127:         def quoted_locking_column
    128:           connection.quote_column_name(locking_column)
    129:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#M001112
- :tinyuri: http://tinyurl.com/42xzox
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - Quoting
  :method: quoted_string_prefix
  :description: |+
    
        quoted_string_prefix()
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/quoting.rb, line 64
    64:       def quoted_string_prefix
    65:         ''
    66:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/Quoting.html#M001172
- :tinyuri: http://tinyurl.com/3rv4mp
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - Quoting
  :method: quoted_true
  :description: |+
    
        quoted_true()
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/quoting.rb, line 52
    52:       def quoted_true
    53:         "'t'"
    54:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/Quoting.html#M001169
- :tinyuri: http://tinyurl.com/4n7rro
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - MysqlAdapter
  :method: quoted_true
  :description: |+
    
        quoted_true()
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb, line 221
    221:       def quoted_true
    222:         "1"
    223:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#M001229
- :tinyuri: http://tinyurl.com/2utf8r
  :path: 
  - ActionView
  - Helpers
  - FormHelper
  :method: radio_button
  :description: |+
    
        radio_button(object_name, method, tag_value, options = {})
    Returns a radio button tag for accessing a specified attribute (identified
    by method) on an object assigned to the template (identified by
    object). If the current value of method is
    tag_value the radio button will be checked. Additional options on
    the input tag can be passed as a hash with options.
    
    Examples
    
      # Let's say that @post.category returns "rails":
      radio_button("post", "category", "rails")
      radio_button("post", "category", "java")
      # => <input type="radio" id="post_category" name="post[category]" value="rails" checked="checked" />
      #    <input type="radio" id="post_category" name="post[category]" value="java" />
    
      radio_button("user", "receive_newsletter", "yes")
      radio_button("user", "receive_newsletter", "no")
      # => <input type="radio" id="user_receive_newsletter" name="user[receive_newsletter]" value="yes" />
      #    <input type="radio" id="user_receive_newsletter" name="user[receive_newsletter]" value="no" checked="checked" />
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/form_helper.rb, line 421
    421:       def radio_button(object_name, method, tag_value, options = {})
    422:         InstanceTag.new(object_name, method, self, nil, options.delete(:object)).to_radio_button_tag(tag_value, options)
    423:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/FormHelper.html#M000929
- :tinyuri: http://tinyurl.com/54cmu7
  :path: 
  - ActionView
  - Helpers
  - FormTagHelper
  :method: radio_button_tag
  :description: |+
    
        radio_button_tag(name, value, checked = false, options = {})
    Creates a radio button; use groups of radio buttons named the same to allow
    users to select from a group of options.
    
    Options
    
    :disabled - If set to true, the user will not be able to use this
    input.
    
    
    Any other key creates standard HTML options for the tag.
    
    
    
    Examples
    
      radio_button_tag 'gender', 'male'
      # => <input id="gender_male" name="gender" type="radio" value="male" />
    
      radio_button_tag 'receive_updates', 'no', true
      # => <input checked="checked" id="receive_updates_no" name="receive_updates" type="radio" value="no" />
    
      radio_button_tag 'time_slot', "3:00 p.m.", false, :disabled => true
      # => <input disabled="disabled" id="time_slot_300_pm" name="time_slot" type="radio" value="3:00 p.m." />
    
      radio_button_tag 'color', "green", true, :class => "color_input"
      # => <input checked="checked" class="color_input" id="color_green" name="color" type="radio" value="green" />
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/form_tag_helper.rb, line 290
    290:       def radio_button_tag(name, value, checked = false, options = {})
    291:         pretty_tag_value = value.to_s.gsub(/\s/, "_").gsub(/(?!-)\W/, "").downcase
    292:         pretty_name = name.to_s.gsub(/\[/, "_").gsub(/\]/, "")
    293:         html_options = { "type" => "radio", "name" => name, "id" => "#{pretty_name}_#{pretty_tag_value}", "value" => value }.update(options.stringify_keys)
    294:         html_options["checked"] = "checked" if checked
    295:         tag :input, html_options
    296:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/FormTagHelper.html#M001044
- :tinyuri: http://tinyurl.com/3skxsy
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Array
  - RandomAccess
  :method: rand
  :description: |+
    
        rand()
    Return a random element from the array.
    
    
    
       # File vendor/rails/activesupport/lib/active_support/core_ext/array/random_access.rb, line 6
    6:         def rand
    7:           self[Kernel.rand(length)]
    8:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Array/RandomAccess.html#M000627
- :tinyuri: http://tinyurl.com/3lhjqq
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - AbstractAdapter
  :method: raw_connection
  :description: "\n  \n    raw_connection()\n  \n  \n  \n\
    Provides access to the underlying database connection. Useful for when you\n\
    116:       def raw_connection\n\
    117:         @connection\n\
    118:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#M001293
- :tinyuri: http://tinyurl.com/42met9
  :path: 
  - ActionController
  - AbstractRequest
  :method: raw_post
  :description: |+
    
        raw_post()
    Read the request body. This is
    useful for web services that need to work with raw requests directly.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/request.rb, line 277
    277:     def raw_post
    278:       unless env.include? 'RAW_POST_DATA'
    279:         env['RAW_POST_DATA'] = body.read(content_length)
    280:         body.rewind if body.respond_to?(:rewind)
    281:       end
    282:       env['RAW_POST_DATA']
    283:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/AbstractRequest.html#M000424
- :tinyuri: http://tinyurl.com/4d9jel
  :path: 
  - ActionController
  - Caching
  - Fragments
  :method: read_fragment
  :description: |+
    
        read_fragment(name, options = nil)
    Reads a cached fragment from the location signified by name (see
    expire_fragment for
    acceptable formats)
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/caching.rb, line 401
    401:       def read_fragment(name, options = nil)
    402:         return unless perform_caching
    403: 
    404:         key = fragment_cache_key(name)
    405:         self.class.benchmark "Fragment read: #{key}" do
    406:           fragment_cache_store.read(key, options)
    407:         end
    408:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Caching/Fragments.html#M000262
- :tinyuri: http://tinyurl.com/3w4oc5
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Date
  - Conversions
  :method: readable_inspect
  :description: |+
    
        readable_inspect()
    Overrides the default inspect method with a human readable one, e.g.,
    "Mon, 21 Feb 2005"
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/date/conversions.rb, line 57
    57:         def readable_inspect
    58:           strftime("%a, %d %b %Y")
    59:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Date/Conversions.html#M000674
- :tinyuri: http://tinyurl.com/3g7hhk
  :path: 
  - ActiveSupport
  - CoreExtensions
  - DateTime
  - Conversions
  :method: readable_inspect
  :description: |+
    
        readable_inspect()
    Overrides the default inspect method with a human readable one, e.g.,
    "Mon, 21 Feb 2005 14:30:00 +0000"
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/date_time/conversions.rb, line 47
    47:         def readable_inspect
    48:           to_s(:rfc822)
    49:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/DateTime/Conversions.html#M000717
- :tinyuri: http://tinyurl.com/3ucck3
  :path: 
  - Rails
  - Generator
  - Commands
  - Base
  :method: readme
  :description: |+
    
        readme(*args)
    Does nothing for all commands except Create.
    
    
    
        # File vendor/rails/railties/lib/rails_generator/commands.rb, line 56
    56:         def readme(*args)
    57:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Commands/Base.html#M001501
- :tinyuri: http://tinyurl.com/3n9vzs
  :path: 
  - Rails
  - Generator
  - Commands
  - List
  :method: readme
  :description: |+
    
        readme(*args)
    
    
         # File vendor/rails/railties/lib/rails_generator/commands.rb, line 539
    539:         def readme(*args)
    540:           logger.readme args.join(', ')
    541:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Commands/List.html#M001515
- :tinyuri: http://tinyurl.com/4fyv6n
  :path: 
  - Rails
  - Generator
  - Commands
  - Create
  :method: readme
  :description: |+
    
        readme(*relative_sources)
    Display a README.
    
    
    
         # File vendor/rails/railties/lib/rails_generator/commands.rb, line 336
    336:         def readme(*relative_sources)
    337:           relative_sources.flatten.each do |relative_source|
    338:             logger.readme relative_source
    339:             puts File.read(source_path(relative_source)) unless options[:pretend]
    340:           end
    341:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Commands/Create.html#M001528
- :tinyuri: http://tinyurl.com/4xu347
  :path: 
  - ActiveRecord
  - Base
  :method: readonly!
  :description: |+
    
        readonly!()
    Marks this record as read only.
    
    
    
          # File vendor/rails/activerecord/lib/active_record/base.rb, line 2222
    2222:       def readonly!
    2223:         @readonly = true
    2224:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001461
- :tinyuri: http://tinyurl.com/3qrm2w
  :path: 
  - ActiveRecord
  - Base
  :method: readonly?
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001460
- :tinyuri: http://tinyurl.com/47wh5f
  :path: 
  - ActiveRecord
  - Base
  :method: readonly_attributes
  :description: |+
    
        readonly_attributes()
    Returns an array of all the attributes that
    have been specified as readonly.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/base.rb, line 868
    868:        def readonly_attributes
    869:          read_inheritable_attribute("attr_readonly")
    870:        end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001393
- :tinyuri: http://tinyurl.com/3fbblj
  :path: 
  - ActionMailer
  - Base
  :method: receive
  :description: "\n  \n    receive(raw_email)\n  \n  \n  \n\
    Receives a raw email, parses it into an email object, decodes it,\n\
    instantiates a new mailer, and passes the email object to the mailer\n\
    object\xE2\x80\x98s receive method. If you want\n\
    your mailer to be able to process incoming messages, you\xE2\x80\x98ll need to\n\
    implement a receive method that accepts the\n\
    369:       def receive(raw_email)\n\
    370:         logger.info \"Received mail:\\n #{raw_email}\" unless logger.nil?\n\
    371:         mail = TMail::Mail.parse(raw_email)\n\
    372:         mail.base64_decode\n\
    373:         new.receive(mail)\n\
    374:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionMailer/Base.html#M000879
- :tinyuri: http://tinyurl.com/3tg6o2
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - MysqlAdapter
  :method: reconnect!
  :description: |+
    
        reconnect!()
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb, line 261
    261:       def reconnect!
    262:         disconnect!
    263:         connect
    264:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#M001232
- :tinyuri: http://tinyurl.com/3mdpmr
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - AbstractAdapter
  :method: reconnect!
  :description: |+
    
        reconnect!()
    Close this connection and open a new one in its place.
    
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 88
    88:       def reconnect!
    89:         @active = true
    90:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#M001289
- :tinyuri: http://tinyurl.com/4vsau9
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - PostgreSQLAdapter
  :method: reconnect!
  :description: |+
    
        reconnect!()
    Close then reopen the connection.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 255
    255:       def reconnect!
    256:         if @connection.respond_to?(:reset)
    257:           @connection.reset
    258:           configure_connection
    259:         else
    260:           disconnect!
    261:           connect
    262:         end
    263:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#M001254
- :tinyuri: http://tinyurl.com/4xxu86
  :path: 
  - Rails
  - Generator
  - Base
  :method: record
  :description: |+
    
        record() {|m| ...}
    Convenience method for generator subclasses to record a manifest.
    
    
    
         # File vendor/rails/railties/lib/rails_generator/base.rb, line 159
    159:         def record
    160:           Rails::Generator::Manifest.new(self) { |m| yield m }
    161:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Base.html#M001567
- :tinyuri: http://tinyurl.com/473b9e
  :path: 
  - ActionController
  - Integration
  - Session
  :method: redirect?
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionController/Integration/Session.html#M000244
- :tinyuri: http://tinyurl.com/2k2elz
  :path: 
  - ActionView
  - Helpers
  - PrototypeHelper
  - JavaScriptGenerator
  - GeneratorMethods
  :method: redirect_to
  :description: |+
    
        redirect_to(location)
    Redirects the browser to the given location using JavaScript, in
    the same form as url_for.
    
    
    Examples:
    
    
     # Generates: window.location.href = "/mycontroller";
     page.redirect_to(:action => 'index')
    
     # Generates: window.location.href = "/account/signup";
     page.redirect_to(:controller => 'account', :action => 'signup')
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/prototype_helper.rb, line 845
    845:           def redirect_to(location)
    846:             assign 'window.location.href', @context.url_for(location)
    847:           end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#M000985
- :tinyuri: http://tinyurl.com/yqqfg9
  :path: 
  - ActionController
  - Base
  :method: redirect_to
  :description: |+
    
        redirect_to(options = {}, response_status = {})
    Redirects the browser to the target specified in options. This
    parameter can take one of three forms:
    
    
    Hash - The URL will be generated by calling url_for with the options.
    
    
    Record - The URL will be generated by calling url_for with the options, which will
    reference a named URL for that record.
    
    
    String starting with protocol:// (like http://) - Is passed
    straight through as the target for redirection.
    
    
    String not containing a protocol - The current protocol and host
    is prepended to the string.
    
    
    :back - Back to the page that issued the request. Useful for forms
    that are triggered from multiple places. Short-hand for redirect_to(request.env["HTTP_REFERER"])
    
    
    
    
    Examples:
    
    
      redirect_to :action => "show", :id => 5
      redirect_to post
      redirect_to "http://www.rubyonrails.org"
      redirect_to "/images/screenshot.jpg"
      redirect_to articles_url
      redirect_to :back
    
    
    The redirection happens as a "302 Moved" header unless otherwise
    specified.
    
    
    Examples:
    
    
      redirect_to post_url(@post), :status=>:found
      redirect_to :action=>'atom', :status=>:moved_permanently
      redirect_to post_url(@post), :status=>301
      redirect_to :action=>'atom', :status=>302
    
    
    When using redirect_to :back, if
    there is no referrer, RedirectBackError will be raised. You may specify
    some fallback behavior for this case by rescuing RedirectBackError.
    
    
    
          # File vendor/rails/actionpack/lib/action_controller/base.rb, line 1031
    1031:       def redirect_to(options = {}, response_status = {}) #:doc: 
    1032:         
    1033:         if options.is_a?(Hash) && options[:status] 
    1034:           status = options.delete(:status) 
    1035:         elsif response_status[:status] 
    1036:           status = response_status[:status] 
    1037:         else 
    1038:           status = 302 
    1039:         end
    1040:         
    1041:         case options
    1042:           when %r{^\w+://.*}
    1043:             raise DoubleRenderError if performed?
    1044:             logger.info("Redirected to #{options}") if logger && logger.info?
    1045:             response.redirect(options, interpret_status(status))
    1046:             response.redirected_to = options
    1047:             @performed_redirect = true
    1048: 
    1049:           when String
    1050:             redirect_to(request.protocol + request.host_with_port + options, :status=>status)
    1051: 
    1052:           when :back
    1053:             request.env["HTTP_REFERER"] ? redirect_to(request.env["HTTP_REFERER"], :status=>status) : raise(RedirectBackError)
    1054: 
    1055:           when Hash
    1056:             redirect_to(url_for(options), :status=>status)
    1057:             response.redirected_to = options
    1058: 
    1059:           else
    1060:             redirect_to(url_for(options), :status=>status)
    1061:         end
    1062:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Base.html#M000456
- :tinyuri: http://tinyurl.com/4jfrjs
  :path: 
  - ActionController
  - TestProcess
  :method: redirect_to_url
  :description: |+
    
        redirect_to_url()
    
    
         # File vendor/rails/actionpack/lib/action_controller/test_process.rb, line 436
    436:     def redirect_to_url
    437:       @response.redirect_url
    438:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/TestProcess.html#M000198
- :tinyuri: http://tinyurl.com/2u8ywa
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - TableDefinition
  :method: references
  :description: |+
    
        references(*args)
    
      This method is also aliased as
      belongs_to
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 448
    448:       def references(*args)
    449:         options = args.extract_options!
    450:         polymorphic = options.delete(:polymorphic)
    451:         args.each do |col|
    452:           column("#{col}_id", :integer, options)
    453:           unless polymorphic.nil?
    454:             column("#{col}_type", :string, polymorphic.is_a?(Hash) ? polymorphic : {})
    455:           end
    456:         end
    457:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#M001224
- :tinyuri: http://tinyurl.com/3rnrwx
  :path: 
  - ActiveRecord
  - Reflection
  - ClassMethods
  :method: reflect_on_aggregation
  :description: |+
    
        reflect_on_aggregation(aggregation)
    Returns the AggregateReflection object for the named aggregation
    (use the symbol). Example:
    
    
      Account.reflect_on_aggregation(:balance) # returns the balance AggregateReflection
    
    
    
        # File vendor/rails/activerecord/lib/active_record/reflection.rb, line 43
    43:       def reflect_on_aggregation(aggregation)
    44:         reflections[aggregation].is_a?(AggregateReflection) ? reflections[aggregation] : nil
    45:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Reflection/ClassMethods.html#M001123
- :tinyuri: http://tinyurl.com/48snyg
  :path: 
  - ActiveRecord
  - Reflection
  - ClassMethods
  :method: reflect_on_all_aggregations
  :description: |+
    
        reflect_on_all_aggregations()
    Returns an array of AggregateReflection objects for all the aggregations in
    the class.
    
    
    
        # File vendor/rails/activerecord/lib/active_record/reflection.rb, line 35
    35:       def reflect_on_all_aggregations
    36:         reflections.values.select { |reflection| reflection.is_a?(AggregateReflection) }
    37:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Reflection/ClassMethods.html#M001122
- :tinyuri: http://tinyurl.com/3tyk9z
  :path: 
  - ActiveRecord
  - Reflection
  - ClassMethods
  :method: reflect_on_all_associations
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Reflection/ClassMethods.html#M001124
- :tinyuri: http://tinyurl.com/4obaeh
  :path: 
  - ActiveRecord
  - Reflection
  - ClassMethods
  :method: reflect_on_association
  :description: |+
    
        reflect_on_association(association)
    Returns the AssociationReflection object for the named association
    (use the symbol). Example:
    
    
      Account.reflect_on_association(:owner) # returns the owner AssociationReflection
      Invoice.reflect_on_association(:line_items).macro  # returns :has_many
    
    
    
        # File vendor/rails/activerecord/lib/active_record/reflection.rb, line 64
    64:       def reflect_on_association(association)
    65:         reflections[association].is_a?(AssociationReflection) ? reflections[association] : nil
    66:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Reflection/ClassMethods.html#M001125
- :tinyuri: http://tinyurl.com/434yaq
  :path: 
  - ActiveRecord
  - Reflection
  - ClassMethods
  :method: reflections
  :description: |+
    
        reflections()
    Returns a hash containing all AssociationReflection objects for the current
    class Example:
    
    
      Invoice.reflections
      Account.reflections
    
    
    
        # File vendor/rails/activerecord/lib/active_record/reflection.rb, line 30
    30:       def reflections
    31:         read_inheritable_attribute(:reflections) || write_inheritable_attribute(:reflections, {})
    32:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Reflection/ClassMethods.html#M001121
- :tinyuri: http://tinyurl.com/4vdofp
  :path: 
  - Mime
  - Type
  :method: register
  :description: |+
    
        register(string, symbol, mime_type_synonyms = [], extension_synonyms = [], skip_lookup = false)
    
    
        # File vendor/rails/actionpack/lib/action_controller/mime_type.rb, line 61
    61:       def register(string, symbol, mime_type_synonyms = [], extension_synonyms = [], skip_lookup = false)
    62:         Mime.instance_eval { const_set symbol.to_s.upcase, Type.new(string, symbol, mime_type_synonyms) }
    63: 
    64:         SET << Mime.const_get(symbol.to_s.upcase)
    65: 
    66:         ([string] + mime_type_synonyms).each { |string| LOOKUP[string] = SET.last } unless skip_lookup
    67:         ([symbol.to_s] + extension_synonyms).each { |ext| EXTENSION_LOOKUP[ext] = SET.last }
    68:       end
    
    
  :uri: http://api.rubyonrails.org/classes/Mime/Type.html#M001651
- :tinyuri: http://tinyurl.com/4do5t5
  :path: 
  - Mime
  - Type
  :method: register_alias
  :description: "\n  \n    register_alias(string, symbol, extension_synonyms = [])\n  \n  \n  \n\
    Registers an alias that\xE2\x80\x98s not used on mime type lookup, but can be referenced directly.\n\
    Especially useful for rendering different HTML versions depending on the\n\
    57:       def register_alias(string, symbol, extension_synonyms = [])\n\
    58:         register(string, symbol, [], extension_synonyms, true)\n\
    59:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/Mime/Type.html#M001650
- :tinyuri: http://tinyurl.com/4kqjud
  :path: 
  - ActionView
  - Base
  :method: register_default_template_handler
  :description: |+
    
        register_default_template_handler(extension, klass)
    
    
         # File vendor/rails/actionpack/lib/action_view/base.rb, line 250
    250:     def self.register_default_template_handler(extension, klass)
    251:       register_template_handler(extension, klass)
    252:       @@default_template_handlers = klass
    253:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Base.html#M001088
- :tinyuri: http://tinyurl.com/5yvewt
  :path: 
  - ActionView
  - Helpers
  - AssetTagHelper
  :method: register_javascript_include_default
  :description: |+
    
        register_javascript_include_default(*sources)
    Register one or more additional JavaScript files to be included when javascript_include_tag
    :defaults is called. This method is typically intended to be called
    from plugin initialization to register additional .js files that the plugin
    installed in public/javascripts.
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/asset_tag_helper.rb, line 241
    241:       def self.register_javascript_include_default(*sources)
    242:         @@javascript_default_sources.concat(sources)
    243:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/AssetTagHelper.html#M001025
- :tinyuri: http://tinyurl.com/3uqwyk
  :path: 
  - ActionMailer
  - Base
  :method: register_template_extension
  :description: "\n  \n    register_template_extension(extension)\n  \n  \n  \n\
    Register a template extension so mailer templates written in a templating\n\
    language other than rhtml or rxml are supported. To use this, include in\n\
    your template-language plugin\xE2\x80\x98s init code or on a per-application\n\
    393:       def register_template_extension(extension)\n\
    394:         template_extensions << extension\n\
    395:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionMailer/Base.html#M000881
- :tinyuri: http://tinyurl.com/3nozxc
  :path: 
  - ActionView
  - Base
  :method: register_template_handler
  :description: |+
    
        register_template_handler(extension, klass)
    Register a class that knows how to handle template files with the given
    extension. This can be used to implement new template types. The
    constructor for the class must take the ActiveView::Base instance as a
    parameter, and the class must implement a render method that takes the
    contents of the template to render as well as the Hash of local assigns
    available to the template. The render method ought to return the rendered
    template as a string.
    
    
    
         # File vendor/rails/actionpack/lib/action_view/base.rb, line 242
    242:     def self.register_template_handler(extension, klass)
    243:       @@template_handlers[extension.to_sym] = klass
    244:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Base.html#M001086
- :tinyuri: http://tinyurl.com/5x637r
  :path: 
  - ActionController
  - AbstractRequest
  :method: relative_url_root
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionController/AbstractRequest.html#M000423
- :tinyuri: http://tinyurl.com/4tlcnn
  :path: 
  - ActiveRecord
  - Base
  :method: reload
  :description: |+
    
        reload(options = nil)
    Reloads the attributes of this object from
    the database. The optional options argument is passed to find when reloading so you may do e.g.
    record.reload(:lock => true) to reload
    the same record with an exclusive row lock.
    
    
    
          # File vendor/rails/activerecord/lib/active_record/base.rb, line 2083
    2083:       def reload(options = nil)
    2084:         clear_aggregation_cache
    2085:         clear_association_cache
    2086:         @attributes.update(self.class.find(self.id, options).instance_variable_get('@attributes'))
    2087:         @attributes_cache = {}
    2088:         self
    2089:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001444
- :tinyuri: http://tinyurl.com/4mzvmf
  :path: 
  - ActiveResource
  - Base
  :method: reload
  :description: |+
    
        reload()
    A method to reload the attributes of this
    object from the remote web service.
    
    Examples
    
      my_branch = Branch.find(:first)
      my_branch.name
      # => Wislon Raod
    
      # Another client fixes the typo...
    
      my_branch.name
      # => Wislon Raod
      my_branch.reload
      my_branch.name
      # => Wilson Road
    
    
    
         # File vendor/rails/activeresource/lib/active_resource/base.rb, line 725
    725:     def reload
    726:       self.load(self.class.find(id, :params => @prefix_options).attributes)
    727:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Base.html#M000852
- :tinyuri: http://tinyurl.com/3fpv33
  :path: 
  - RailsFCGIHandler
  :method: reload!
  :description: |+
    
        reload!()
    
    
         # File vendor/rails/railties/lib/fcgi_handler.rb, line 189
    189:     def reload!
    190:       run_gc! if gc_request_period
    191:       restore!
    192:       @when_ready = nil
    193:       dispatcher_log :info, "reloaded"
    194:     end
    
    
  :uri: http://api.rubyonrails.org/classes/RailsFCGIHandler.html#M000045
- :tinyuri: http://tinyurl.com/4b2l82
  :path: 
  - vendor/rails/railties/lib/console_app.rb
  :method: reload!
  :description: |+
    
        reload!()
    reloads the environment
    
    
    
        # File vendor/rails/railties/lib/console_app.rb, line 24
    24: def reload!
    25:   puts "Reloading..."
    26:   dispatcher = ActionController::Dispatcher.new($stdout)
    27:   dispatcher.cleanup_application(true)
    28:   dispatcher.prepare_application(true)
    29:   true
    30: end
    
    
  :uri: http://api.rubyonrails.org/files/vendor/rails/railties/lib/console_app_rb.html#M000003
- :tinyuri: http://tinyurl.com/3tuq5j
  :path: 
  - ActionController
  - Dispatcher
  :method: reload_application
  :description: |+
    
        reload_application()
    
    
         # File vendor/rails/actionpack/lib/action_controller/dispatcher.rb, line 132
    132:     def reload_application
    133:       if Dependencies.load?
    134:         Routing::Routes.reload
    135:         self.unprepared = true
    136:       end
    137:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Dispatcher.html#M000472
- :tinyuri: http://tinyurl.com/44x76r
  :path: 
  - RailsFCGIHandler
  :method: reload_handler
  :description: |+
    
        reload_handler(signal)
    
    
         # File vendor/rails/railties/lib/fcgi_handler.rb, line 164
    164:     def reload_handler(signal)
    165:       dispatcher_log :info, "asked to reload ASAP"
    166:       @when_ready = :reload
    167:     end
    
    
  :uri: http://api.rubyonrails.org/classes/RailsFCGIHandler.html#M000042
- :tinyuri: http://tinyurl.com/4w9ubq
  :path: 
  - ActionView
  - Helpers
  - PrototypeHelper
  :method: remote_form_for
  :description: "\n  \n    remote_form_for(record_or_name_or_array, *args, &proc)\n  \n  \n  \n\
    Creates a form that will submit using XMLHttpRequest in the background\n\
    instead of the regular reloading POST arrangement and a scope around a\n\
    specific resource that is used as a base for questioning about values for\n\
    the fields.\n\n\
    Resource\n\n\
    Example:\n\n\n  <% remote_form_for(@post) do |f| %>\n    ...\n  <% end %>\n\n\n\
    This will expand to be the same as:\n\n\n  <% remote_form_for :post, @post, :url => post_path(@post), :html => { :method => :put, :class => \"edit_post\", :id => \"edit_post_45\" } do |f| %>\n    ...\n  <% end %>\n\n\
    Nested Resource\n\n\
    Example:\n\n\n  <% remote_form_for([@post, @comment]) do |f| %>\n    ...\n  <% end %>\n\n\n\
    This will expand to be the same as:\n\n\n  <% remote_form_for :comment, @comment, :url => post_comment_path(@post, @comment), :html => { :method => :put, :class => \"edit_comment\", :id => \"edit_comment_45\" } do |f| %>\n    ...\n  <% end %>\n\n\n\
    If you don\xE2\x80\x98t need to attach a form to a resource, then check out form_remote_tag.\n\n\n\
    See FormHelper#form_for for\n\
    367:       def remote_form_for(record_or_name_or_array, *args, &proc)\n\
    368:         options = args.extract_options!\n\
    369: \n\
    370:         case record_or_name_or_array\n\
    371:         when String, Symbol\n\
    372:           object_name = record_or_name_or_array\n\
    373:         when Array\n\
    374:           object = record_or_name_or_array.last\n\
    375:           object_name = ActionController::RecordIdentifier.singular_class_name(object)\n\
    376:           apply_form_for_options!(record_or_name_or_array, options)\n\
    377:           args.unshift object\n\
    378:         else\n\
    379:           object      = record_or_name_or_array\n\
    380:           object_name = ActionController::RecordIdentifier.singular_class_name(record_or_name_or_array)\n\
    381:           apply_form_for_options!(object, options)\n\
    382:           args.unshift object\n\
    383:         end\n\
    384: \n\
    385:         concat(form_remote_tag(options), proc.binding)\n\
    386:         fields_for(object_name, *(args << options), &proc)\n\
    387:         concat('</form>', proc.binding)\n\
    388:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/PrototypeHelper.html#M000961
- :tinyuri: http://tinyurl.com/4sp6rm
  :path: 
  - ActionView
  - Helpers
  - PrototypeHelper
  :method: remote_function
  :description: |+
    
        remote_function(options)
    Returns the JavaScript needed for a remote function. Takes the same
    arguments as link_to_remote.
    
    
    Example:
    
    
      # Generates: <select id="options" onchange="new Ajax.Updater('options',
      # '/testing/update_options', {asynchronous:true, evalScripts:true})">
      <select id="options" onchange="<%= remote_function(:update => "options",
          :url => { :action => :update_options }) %>">
        <option value="0">Hello</option>
        <option value="1">World</option>
      </select>
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/prototype_helper.rb, line 442
    442:       def remote_function(options)
    443:         javascript_options = options_for_ajax(options)
    444: 
    445:         update = ''
    446:         if options[:update] && options[:update].is_a?(Hash)
    447:           update  = []
    448:           update << "success:'#{options[:update][:success]}'" if options[:update][:success]
    449:           update << "failure:'#{options[:update][:failure]}'" if options[:update][:failure]
    450:           update  = '{' + update.join(',') + '}'
    451:         elsif options[:update]
    452:           update << "'#{options[:update]}'"
    453:         end
    454: 
    455:         function = update.empty? ? 
    456:           "new Ajax.Request(" :
    457:           "new Ajax.Updater(#{update}, "
    458: 
    459:         url_options = options[:url]
    460:         url_options = url_options.merge(:escape => false) if url_options.is_a?(Hash)
    461:         function << "'#{url_for(url_options)}'"
    462:         function << ", #{javascript_options})"
    463: 
    464:         function = "#{options[:before]}; #{function}" if options[:before]
    465:         function = "#{function}; #{options[:after]}"  if options[:after]
    466:         function = "if (#{options[:condition]}) { #{function}; }" if options[:condition]
    467:         function = "if (confirm('#{escape_javascript(options[:confirm])}')) { #{function}; }" if options[:confirm]
    468: 
    469:         return function
    470:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/PrototypeHelper.html#M000965
- :tinyuri: http://tinyurl.com/2dnfae
  :path: 
  - ActionController
  - AbstractRequest
  :method: remote_ip
  :description: "\n  \n    remote_ip()\n  \n  \n  \n\
    Determine originating IP address. REMOTE_ADDR is the standard but will fail\n\
    if the user is behind a proxy. HTTP_CLIENT_IP and/or HTTP_X_FORWARDED_FOR\n\
    are set by proxies so check for these before falling back to REMOTE_ADDR.\n\
    HTTP_X_FORWARDED_FOR may be a comma- delimited list in the case of multiple\n\
    chained proxies; the first is the originating IP.\n\n\n\
    Security note: do not use if IP spoofing is a concern for your application.\n\
    Since remote_ip checks HTTP headers for addresses forwarded by\n\
    proxies, the client may send any IP. remote_addr can\xE2\x80\x98t be spoofed but\n\
    also doesn\xE2\x80\x98t work behind a proxy, since it\xE2\x80\x98s always the\n\
    136:     def remote_ip\n\
    137:       return @env['HTTP_CLIENT_IP'] if @env.include? 'HTTP_CLIENT_IP'\n\
    138: \n\
    139:       if @env.include? 'HTTP_X_FORWARDED_FOR' then\n\
    140:         remote_ips = @env['HTTP_X_FORWARDED_FOR'].split(',').reject do |ip|\n\
    141:           ip.strip =~ /^unknown$|^(10|172\\.(1[6-9]|2[0-9]|30|31)|192\\.168)\\./i\n\
    142:         end\n\
    143: \n\
    144:         return remote_ips.first.strip unless remote_ips.empty?\n\
    145:       end\n\
    146: \n\
    147:       @env['REMOTE_ADDR']\n\
    148:     end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionController/AbstractRequest.html#M000408
- :tinyuri: http://tinyurl.com/4csxx4
  :path: 
  - Repositories
  :method: remove
  :description: 
  :uri: http://api.rubyonrails.org/classes/Repositories.html#M000081
- :tinyuri: http://tinyurl.com/3okntd
  :path: 
  - ActionView
  - Helpers
  - PrototypeHelper
  - JavaScriptGenerator
  - GeneratorMethods
  :method: remove
  :description: |+
    
        remove(*ids)
    Removes the DOM elements with the given ids from the page.
    
    
    Example:
    
    
     # Remove a few people
     # Generates: ["person_23", "person_9", "person_2"].each(Element.remove);
     page.remove 'person_23', 'person_9', 'person_2'
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/prototype_helper.rb, line 786
    786:           def remove(*ids)
    787:             loop_on_multiple_args 'Element.remove', ids
    788:           end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#M000980
- :tinyuri: http://tinyurl.com/5y293s
  :path: 
  - ActionController
  - Filters
  - ClassMethods
  :method: remove_actions_from_included_actions!
  :description: |+
    
        remove_actions_from_included_actions!(filters,*actions)
    
    
         # File vendor/rails/actionpack/lib/action_controller/filters.rb, line 637
    637:         def remove_actions_from_included_actions!(filters,*actions)
    638:           actions = actions.flatten.map(&:to_s)
    639:           updated_hash = filters.inject(read_inheritable_attribute('included_actions')||{}) do |hash,filter|
    640:             ia = (hash[filter] || []) - actions
    641:             ia.empty? ? hash.delete(filter) : hash[filter] = ia
    642:             hash
    643:           end
    644:           write_inheritable_attribute('included_actions', updated_hash)
    645:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Filters/ClassMethods.html#M000331
- :tinyuri: http://tinyurl.com/4gcnh8
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - SchemaStatements
  :method: remove_column
  :description: |+
    
        remove_column(table_name, column_name)
    Removes the column from the table definition.
    
    Examples
    
     remove_column(:suppliers, :qualification)
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 130
    130:       def remove_column(table_name, column_name)
    131:         execute "ALTER TABLE #{quote_table_name(table_name)} DROP #{quote_column_name(column_name)}"
    132:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#M001154
- :tinyuri: http://tinyurl.com/4nq2l4
  :path: 
  - ActiveRecord
  - Base
  :method: remove_connection
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001469
- :tinyuri: http://tinyurl.com/42zqhd
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - PostgreSQLAdapter
  :method: remove_index
  :description: |+
    
        remove_index(table_name, options = {})
    Drops an index from a table.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 642
    642:       def remove_index(table_name, options = {})
    643:         execute "DROP INDEX #{index_name(table_name, options)}"
    644:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#M001279
- :tinyuri: http://tinyurl.com/4d5v2p
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - SchemaStatements
  :method: remove_index
  :description: |+
    
        remove_index(table_name, options = {})
    Remove the given index from the table.
    
    
    Remove the suppliers_name_index in the suppliers table.
    
    
      remove_index :suppliers, :name
    
    
    Remove the index named accounts_branch_id_index in the accounts table.
    
    
      remove_index :accounts, :column => :branch_id
    
    
    Remove the index named accounts_branch_id_party_id_index in the accounts
    table.
    
    
      remove_index :accounts, :column => [:branch_id, :party_id]
    
    
    Remove the index named by_branch_party in the accounts table.
    
    
      remove_index :accounts, :name => :by_branch_party
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 210
    210:       def remove_index(table_name, options = {})
    211:         execute "DROP INDEX #{quote_column_name(index_name(table_name, options))} ON #{table_name}"
    212:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#M001159
- :tinyuri: http://tinyurl.com/463hyh
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - SchemaStatements
  :method: rename_column
  :description: |+
    
        rename_column(table_name, column_name, new_column_name)
    Renames a column.
    
    Example
    
     rename_column(:suppliers, :description, :name)
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 156
    156:       def rename_column(table_name, column_name, new_column_name)
    157:         raise NotImplementedError, "rename_column is not implemented"
    158:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#M001157
- :tinyuri: http://tinyurl.com/3g3t5o
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - PostgreSQLAdapter
  :method: rename_column
  :description: |+
    
        rename_column(table_name, column_name, new_column_name)
    Renames a column in a table.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 637
    637:       def rename_column(table_name, column_name, new_column_name)
    638:         execute "ALTER TABLE #{table_name} RENAME COLUMN #{quote_column_name(column_name)} TO #{quote_column_name(new_column_name)}"
    639:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#M001278
- :tinyuri: http://tinyurl.com/4pzed6
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - SchemaStatements
  :method: rename_table
  :description: |+
    
        rename_table(table_name, new_name)
    Renames a table.
    
    Example
    
     rename_table('octopuses', 'octopi')
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 110
    110:       def rename_table(table_name, new_name)
    111:         raise NotImplementedError, "rename_table is not implemented"
    112:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#M001151
- :tinyuri: http://tinyurl.com/4zgxbv
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - MysqlAdapter
  :method: rename_table
  :description: |+
    
        rename_table(table_name, new_name)
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb, line 421
    421:       def rename_table(table_name, new_name)
    422:         execute "RENAME TABLE #{quote_table_name(table_name)} TO #{quote_table_name(new_name)}"
    423:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#M001240
- :tinyuri: http://tinyurl.com/4wksee
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - PostgreSQLAdapter
  :method: rename_table
  :description: |+
    
        rename_table(name, new_name)
    Renames a table.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 589
    589:       def rename_table(name, new_name)
    590:         execute "ALTER TABLE #{name} RENAME TO #{new_name}"
    591:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#M001273
- :tinyuri: http://tinyurl.com/4xqepb
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - SQLiteAdapter
  :method: rename_table
  :description: |+
    
        rename_table(name, new_name)
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/sqlite_adapter.rb, line 213
    213:       def rename_table(name, new_name)
    214:         execute "ALTER TABLE #{name} RENAME TO #{new_name}"
    215:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#M001245
- :tinyuri: http://tinyurl.com/4t34ua
  :path: 
  - ActionView
  - TemplateHandler
  :method: render
  :description: |+
    
        render(template, local_assigns)
    
    
        # File vendor/rails/actionpack/lib/action_view/template_handler.rb, line 11
    11:     def render(template, local_assigns)
    12:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/TemplateHandler.html#M001084
- :tinyuri: http://tinyurl.com/37epsx
  :path: 
  - ActionController
  - Base
  :method: render
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionController/Base.html#M000452
- :tinyuri: http://tinyurl.com/47ssqj
  :path: 
  - ActionController
  - Components
  :method: render_component
  :description: |+
    
        render_component(options)
    
    
        # File vendor/rails/actionpack/lib/action_controller/components.rb, line 44
    44:           def render_component(options)
    45:             @controller.send!(:render_component_as_string, options)
    46:           end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Components.html#M000216
- :tinyuri: http://tinyurl.com/3tczc6
  :path: 
  - ActionController
  - Components
  - InstanceMethods
  :method: render_component
  :description: |+
    
        render_component(options)
    Renders the component specified as the response for the current method
    
    
    
        # File vendor/rails/actionpack/lib/action_controller/components.rb, line 79
    79:         def render_component(options) #:doc:
    80:           component_logging(options) do
    81:             render_for_text(component_response(options, true).body, response.headers["Status"])
    82:           end
    83:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Components/InstanceMethods.html#M000217
- :tinyuri: http://tinyurl.com/43ewde
  :path: 
  - ActionController
  - Components
  - InstanceMethods
  :method: render_component_as_string
  :description: |+
    
        render_component_as_string(options)
    Returns the component response as a string
    
    
    
        # File vendor/rails/actionpack/lib/action_controller/components.rb, line 86
    86:         def render_component_as_string(options) #:doc:
    87:           component_logging(options) do
    88:             response = component_response(options, false)
    89: 
    90:             if redirected = response.redirected_to
    91:               render_component_as_string(redirected)
    92:             else
    93:               response.body
    94:             end
    95:           end
    96:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Components/InstanceMethods.html#M000218
- :tinyuri: http://tinyurl.com/4vomzd
  :path: 
  - ActionController
  - Rescue
  :method: render_optional_error_file
  :description: "\n  \n    render_optional_error_file(status_code)\n  \n  \n  \n\
    Attempts to render a static error page based on the status_code\n\
    thrown, or just return headers if no such file exists. For example, if a\n\
    500 error is being handled Rails will first\n\
    attempt to render the file at public/500.html. If the file\n\
    154:       def render_optional_error_file(status_code)\n\
    155:         status = interpret_status(status_code)\n\
    156:         path = \"#{RAILS_ROOT}/public/#{status[0,3]}.html\"\n\
    157:         if File.exist?(path)\n\
    158:           render :file => path, :status => status\n\
    159:         else\n\
    160:           head status\n\
    161:         end\n\
    162:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionController/Rescue.html#M000222
- :tinyuri: http://tinyurl.com/35mbag
  :path: 
  - ActionController
  - Base
  :method: render_to_string
  :description: |+
    
        render_to_string(options = nil, &block)
    Renders according to the same rules as render, but returns the result in a
    string instead of sending it as the response body to the browser.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/base.rb, line 921
    921:       def render_to_string(options = nil, &block) #:doc:
    922:         render(options, &block)
    923:       ensure
    924:         erase_render_results
    925:         forget_variables_added_to_assigns
    926:         reset_variables_added_to_assigns
    927:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Base.html#M000453
- :tinyuri: http://tinyurl.com/4s6wy9
  :path: 
  - ActiveSupport
  - Multibyte
  - Handlers
  - UTF8Handler
  :method: reorder_characters
  :description: |+
    
        reorder_characters(codepoints)
    Re-order codepoints so the string becomes canonical
    
    
    
         # File vendor/rails/activesupport/lib/active_support/multibyte/handlers/utf8_handler.rb, line 466
    466:       def reorder_characters(codepoints)
    467:         length = codepoints.length- 1
    468:         pos = 0
    469:         while pos < length do
    470:           cp1, cp2 = UCD[codepoints[pos]], UCD[codepoints[pos+1]]
    471:           if (cp1.combining_class > cp2.combining_class) && (cp2.combining_class > 0)
    472:             codepoints[pos..pos+1] = cp2.code, cp1.code
    473:             pos += (pos > 0 ? -1 : 1)
    474:           else
    475:             pos += 1
    476:           end
    477:         end
    478:         codepoints
    479:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Handlers/UTF8Handler.html#M000544
- :tinyuri: http://tinyurl.com/46wmuz
  :path: 
  - ActionView
  - Helpers
  - PrototypeHelper
  - JavaScriptGenerator
  - GeneratorMethods
  :method: replace
  :description: |+
    
        replace(id, *options_for_render)
    Replaces the "outer HTML" (i.e., the entire element, not just its
    contents) of the DOM element with the given id.
    
    
    options_for_render may be either a string of HTML to insert, or a
    hash of options to be passed to ActionView::Base#render. For example:
    
    
      # Replace the DOM element having ID 'person-45' with the
      # 'person' partial for the appropriate object.
      replace 'person-45', :partial => 'person', :object => @person
    
    
    This allows the same partial that is used for the insert_html to be also used
    for the input to replace without resorting to
    the use of wrapper elements.
    
    
    Examples:
    
    
      <div id="people">
        <%= render :partial => 'person', :collection => @people %>
      </div>
    
      # Insert a new person
      #
      # Generates: new Insertion.Bottom({object: "Matz", partial: "person"}, "");
      page.insert_html :bottom, :partial => 'person', :object => @person
    
      # Replace an existing person
    
      # Generates: Element.replace("person_45", "-- Contents of partial --");
      page.replace 'person_45', :partial => 'person', :object => @person
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/prototype_helper.rb, line 774
    774:           def replace(id, *options_for_render)
    775:             call 'Element.replace', id, render(*options_for_render)
    776:           end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#M000979
- :tinyuri: http://tinyurl.com/3e2rpx
  :path: 
  - ActionView
  - Helpers
  - PrototypeHelper
  - JavaScriptGenerator
  - GeneratorMethods
  :method: replace_html
  :description: |+
    
        replace_html(id, *options_for_render)
    Replaces the inner HTML of the DOM element with the given id.
    
    
    options_for_render may be either a string of HTML to insert, or a
    hash of options to be passed to ActionView::Base#render. For example:
    
    
      # Replace the HTML of the DOM element having ID 'person-45' with the
      # 'person' partial for the appropriate object.
      # Generates:  Element.update("person-45", "-- Contents of 'person' partial --");
      replace_html 'person-45', :partial => 'person', :object => @person
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/prototype_helper.rb, line 740
    740:           def replace_html(id, *options_for_render)
    741:             call 'Element.update', id, render(*options_for_render)
    742:           end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#M000978
- :tinyuri: http://tinyurl.com/3v4u48
  :path: 
  - Rails
  - Generator
  - Manifest
  :method: replay
  :description: |+
    
        replay(target = nil)
    Replay recorded actions.
    
    
    
        # File vendor/rails/railties/lib/rails_generator/manifest.rb, line 30
    30:       def replay(target = nil)
    31:         send_actions(target || @target, @actions)
    32:       end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Manifest.html#M001549
- :tinyuri: http://tinyurl.com/5xhyaf
  :path: 
  - ActionController
  - HttpAuthentication
  - Basic
  - ControllerMethods
  :method: request_http_basic_authentication
  :description: |+
    
        request_http_basic_authentication(realm = "Application")
    
    
        # File vendor/rails/actionpack/lib/action_controller/http_authentication.rb, line 90
    90:         def request_http_basic_authentication(realm = "Application")
    91:           HttpAuthentication::Basic.authentication_request(self, realm)
    92:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/HttpAuthentication/Basic/ControllerMethods.html#M000215
- :tinyuri: http://tinyurl.com/4frfns
  :path: 
  - ActionController
  - AbstractRequest
  :method: request_method
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionController/AbstractRequest.html#M000393
- :tinyuri: http://tinyurl.com/2s8upz
  :path: 
  - ActionController
  - AbstractRequest
  :method: request_uri
  :description: |+
    
        request_uri()
    Return the request URI, accounting for server idiosyncracies. WEBrick
    includes the full URL. IIS leaves REQUEST_URI blank.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/request.rb, line 228
    228:     def request_uri
    229:       if uri = @env['REQUEST_URI']
    230:         # Remove domain, which webrick puts into the request_uri.
    231:         (%r{^\w+\://[^/]+(/.*|$)$} =~ uri) ? $1 : uri
    232:       else
    233:         # Construct IIS missing REQUEST_URI from SCRIPT_NAME and PATH_INFO.
    234:         script_filename = @env['SCRIPT_NAME'].to_s.match(%r{[^/]+$})
    235:         uri = @env['PATH_INFO']
    236:         uri = uri.sub(/#{script_filename}\//, '') unless script_filename.nil?
    237:         unless (env_qs = @env['QUERY_STRING']).nil? || env_qs.empty?
    238:           uri << '?' << env_qs
    239:         end
    240: 
    241:         if uri.nil?
    242:           @env.delete('REQUEST_URI')
    243:           uri
    244:         else
    245:           @env['REQUEST_URI'] = uri
    246:         end
    247:       end
    248:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/AbstractRequest.html#M000421
- :tinyuri: http://tinyurl.com/48pymk
  :path: 
  - ActionController
  - Integration
  - Session
  :method: request_via_redirect
  :description: "\n  \n    request_via_redirect(http_method, path, parameters = nil, headers = nil)\n  \n  \n  \n\
    Performs a request using the specified method, following any subsequent\n\
    redirect. Note that the redirects are followed until the response is not a\n\
    redirect\xE2\x80\x94this means you may run into an infinite loop if your\n\
    128:       def request_via_redirect(http_method, path, parameters = nil, headers = nil)\n\
    129:         send(http_method, path, parameters, headers)\n\
    130:         follow_redirect! while redirect?\n\
    131:         status\n\
    132:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionController/Integration/Session.html#M000239
- :tinyuri: http://tinyurl.com/3eq3s6
  :path: 
  - ActiveResource
  - Connection
  :method: requests
  :description: |+
    
        requests()
    
    
        # File vendor/rails/activeresource/lib/active_resource/connection.rb, line 62
    62:       def requests
    63:         @@requests ||= []
    64:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Connection.html#M000867
- :tinyuri: http://tinyurl.com/3suvum
  :path: 
  - ActiveResource
  - HttpMock
  :method: requests
  :description: |+
    
        requests()
    
    
        # File vendor/rails/activeresource/lib/active_resource/http_mock.rb, line 23
    23:       def requests
    24:         @@requests ||= []
    25:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/HttpMock.html#M000814
- :tinyuri: http://tinyurl.com/3lshte
  :path: 
  - Rails
  - Initializer
  :method: require_frameworks
  :description: |+
    
        require_frameworks()
    Requires all frameworks specified by the Configuration#frameworks list. By
    default, all frameworks (ActiveRecord, ActiveSupport, ActionPack,
    ActionMailer, and ActiveResource) are
    loaded.
    
    
    
         # File vendor/rails/railties/lib/initializer.rb, line 156
    156:     def require_frameworks
    157:       configuration.frameworks.each { |framework| require(framework.to_s) }
    158:     rescue LoadError => e
    159:       # re-raise because Mongrel would swallow it
    160:       raise e.to_s
    161:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Initializer.html#M001577
- :tinyuri: http://tinyurl.com/4va33t
  :path: 
  - Kernel
  :method: require_library_or_gem
  :description: |+
    
        require_library_or_gem(library_name)
    Require a library with fallback to RubyGems. Warnings during library
    loading are silenced to increase signal/noise for application warnings.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/kernel/requires.rb, line 4
     4:   def require_library_or_gem(library_name)
     5:     silence_warnings do
     6:       begin
     7:         require library_name
     8:       rescue LoadError => cannot_require
     9:         # 1. Requiring the module is unsuccessful, maybe it's a gem and nobody required rubygems yet. Try.
    10:         begin
    11:           require 'rubygems'
    12:         rescue LoadError => rubygems_not_installed
    13:           raise cannot_require
    14:         end
    15:         # 2. Rubygems is installed and loaded. Try to load the library again
    16:         begin
    17:           require library_name
    18:         rescue LoadError => gem_not_installed
    19:           raise cannot_require
    20:         end
    21:       end
    22:     end
    23:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Kernel.html#M001643
- :tinyuri: http://tinyurl.com/4dkhh9
  :path: 
  - ActiveRecord
  - Base
  :method: require_mysql
  :description: |+
    
        require_mysql()
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb, line 47
    47:     def self.require_mysql
    48:       # Include the MySQL driver if one hasn't already been loaded
    49:       unless defined? Mysql
    50:         begin
    51:           require_library_or_gem 'mysql'
    52:         rescue LoadError => cannot_require_mysql
    53:           # Use the bundled Ruby/MySQL driver if no driver is already in place
    54:           begin
    55:             ActiveRecord::Base.logger.info(
    56:               "WARNING: You're using the Ruby-based MySQL library that ships with Rails. This library is not suited for production. " +
    57:               "Please install the C-based MySQL library instead (gem install mysql)."
    58:             ) if ActiveRecord::Base.logger
    59: 
    60:             require 'active_record/vendor/mysql'
    61:           rescue LoadError
    62:             raise cannot_require_mysql
    63:           end
    64:         end
    65:       end
    66: 
    67:       # Define Mysql::Result.all_hashes
    68:       MysqlCompat.define_all_hashes_method!
    69:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001470
- :tinyuri: http://tinyurl.com/4rpcjp
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - AbstractAdapter
  :method: requires_reloading?
  :description: "\n  \n    requires_reloading?()\n  \n  \n  \n\
    Returns true if its safe to reload the connection between requests for\n\
    development mode. This is not the case for Ruby/MySQL and it\xE2\x80\x98s not\n\
    100:         false\n\
    101:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#M001291
- :tinyuri: http://tinyurl.com/3gzfk8
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - SQLiteAdapter
  :method: requires_reloading?
  :description: |+
    
        requires_reloading?()
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/sqlite_adapter.rb, line 83
    83:       def requires_reloading?
    84:         true
    85:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#M001242
- :tinyuri: http://tinyurl.com/4qxxrn
  :path: 
  - ActionController
  - TestCase
  :method: rescue_action
  :description: |+
    
        rescue_action(e)
    
    
        # File vendor/rails/actionpack/lib/action_controller/test_case.rb, line 40
    40:           def rescue_action(e)
    41:             raise e
    42:           end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/TestCase.html#M000377
- :tinyuri: http://tinyurl.com/44ponw
  :path: 
  - ActionController
  - Rescue
  :method: rescue_action
  :description: |+
    
        rescue_action(exception)
    Exception handler called when the performance of an action raises an
    exception.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/rescue.rb, line 112
    112:       def rescue_action(exception)
    113:         log_error(exception) if logger
    114:         erase_results if performed?
    115: 
    116:         # Let the exception alter the response if it wants.
    117:         # For example, MethodNotAllowed sets the Allow header.
    118:         if exception.respond_to?(:handle_response!)
    119:           exception.handle_response!(response)
    120:         end
    121: 
    122:         if consider_all_requests_local || local_request?
    123:           rescue_action_locally(exception)
    124:         else
    125:           rescue_action_in_public(exception)
    126:         end
    127:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Rescue.html#M000219
- :tinyuri: http://tinyurl.com/4fct9b
  :path: 
  - ActionController
  - Rescue
  :method: rescue_action_in_public
  :description: |+
    
        rescue_action_in_public(exception)
    Overwrite to implement public exception handling (for requests answering
    false to local_request?). By
    default will call render_optional_error_file. Override this
    method to provide more user friendly error messages.s
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/rescue.rb, line 146
    146:       def rescue_action_in_public(exception) #:doc:
    147:         render_optional_error_file response_code_for_rescue(exception)
    148:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Rescue.html#M000221
- :tinyuri: http://tinyurl.com/4mfaaj
  :path: 
  - ActionController
  - Rescue
  :method: rescue_action_locally
  :description: |+
    
        rescue_action_locally(exception)
    Render detailed diagnostics for unhandled exceptions rescued from a
    controller action.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/rescue.rb, line 173
    173:       def rescue_action_locally(exception)
    174:         add_variables_to_assigns
    175:         @template.instance_variable_set("@exception", exception)
    176:         @template.instance_variable_set("@rescues_path", File.dirname(rescues_path("stub")))
    177:         @template.send!(:assign_variables_from_controller)
    178: 
    179:         @template.instance_variable_set("@contents", @template.render_file(template_path_for_local_rescue(exception), false))
    180: 
    181:         response.content_type = Mime::HTML
    182:         render_for_file(rescues_path("layout"), response_code_for_rescue(exception))
    183:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Rescue.html#M000224
- :tinyuri: http://tinyurl.com/3fm9o7
  :path: 
  - ActionController
  - Rescue
  :method: rescue_action_with_handler
  :description: |+
    
        rescue_action_with_handler(exception)
    Tries to rescue the exception by looking up and calling a registered
    handler.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/rescue.rb, line 186
    186:       def rescue_action_with_handler(exception)
    187:         if handler = handler_for_rescue(exception)
    188:           if handler.arity != 0
    189:             handler.call(exception)
    190:           else
    191:             handler.call
    192:           end
    193:           true # don't rely on the return value of the handler
    194:         end
    195:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Rescue.html#M000225
- :tinyuri: http://tinyurl.com/3monpf
  :path: 
  - ActionController
  - Rescue
  - ClassMethods
  :method: rescue_from
  :description: |+
    
        rescue_from(*klasses, &block)
    Rescue exceptions raised in controller
    actions.
    
    
    rescue_from receives a
    series of exception classes or class names, and a trailing :with option
    with the name of a method or a Proc object to be called to handle them.
    Alternatively a block can be given.
    
    
    Handlers that take one argument will be called with the exception, so that
    the exception can be inspected when dealing with it.
    
    
    Handlers are inherited. They are searched from right to left, from bottom
    to top, and up the hierarchy. The handler of the first class for which
    exception.is_a?(klass) holds true is the one invoked, if any.
    
    
    class ApplicationController < ActionController::Base
    
    
      rescue_from User::NotAuthorized, :with => :deny_access # self defined exception
      rescue_from ActiveRecord::RecordInvalid, :with => :show_errors
    
      rescue_from 'MyAppError::Base' do |exception|
        render :xml => exception, :status => 500
      end
    
      protected
        def deny_access
          ...
        end
    
        def show_errors(exception)
          exception.record.new_record? ? ...
        end
    
    
    end
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/rescue.rb, line 88
     88:       def rescue_from(*klasses, &block)
     89:         options = klasses.extract_options!
     90:         unless options.has_key?(:with)
     91:           block_given? ? options[:with] = block : raise(ArgumentError, "Need a handler. Supply an options hash that has a :with key as the last argument.")
     92:         end
     93: 
     94:         klasses.each do |klass|
     95:           key = if klass.is_a?(Class) && klass <= Exception
     96:             klass.name
     97:           elsif klass.is_a?(String)
     98:             klass
     99:           else
    100:             raise(ArgumentError, "#{klass} is neither an Exception nor a String")
    101:           end
    102: 
    103:           # Order is important, we put the pair at the end. When dealing with an
    104:           # exception we will follow the documented order going from right to left.
    105:           rescue_handlers << [key, options[:with]]
    106:         end
    107:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Rescue/ClassMethods.html#M000226
- :tinyuri: http://tinyurl.com/3q9e9j
  :path: 
  - ActiveResource
  - HttpMock
  :method: reset!
  :description: |+
    
        reset!()
    
    
        # File vendor/rails/activeresource/lib/active_resource/http_mock.rb, line 44
    44:       def reset!
    45:         requests.clear
    46:         responses.clear
    47:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/HttpMock.html#M000817
- :tinyuri: http://tinyurl.com/52nwhy
  :path: 
  - ActionController
  - Integration
  - Session
  :method: reset!
  :description: |+
    
        reset!()
    Resets the instance. This can be used to reset the state information in an
    existing session instance, so it can be used from a clean-slate condition.
    
    
      session.reset!
    
    
    
        # File vendor/rails/actionpack/lib/action_controller/integration.rb, line 67
    67:       def reset!
    68:         @status = @path = @headers = nil
    69:         @result = @status_message = nil
    70:         @https = false
    71:         @cookies = {}
    72:         @controller = @request = @response = nil
    73:         @request_count = 0
    74: 
    75:         self.host        = "www.example.com"
    76:         self.remote_addr = "127.0.0.1"
    77:         self.accept      = "text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5"
    78: 
    79:         unless defined? @named_routes_configured
    80:           # install the named routes in this session instance.
    81:           klass = class<<self; self; end
    82:           Routing::Routes.install_helpers(klass)
    83: 
    84:           # the helpers are made protected by default--we make them public for
    85:           # easier access during testing and troubleshooting.
    86:           klass.module_eval { public *Routing::Routes.named_routes.helpers }
    87:           @named_routes_configured = true
    88:         end
    89:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Integration/Session.html#M000234
- :tinyuri: http://tinyurl.com/3vjgzp
  :path: 
  - ActionController
  - Integration
  - Runner
  :method: reset!
  :description: |+
    
        reset!()
    Reset the current session. This is useful for testing multiple sessions in
    a single test case.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/integration.rb, line 387
    387:       def reset!
    388:         @integration_session = open_session
    389:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Integration/Runner.html#M000230
- :tinyuri: http://tinyurl.com/3kwcxd
  :path: 
  - Fixtures
  :method: reset_cache
  :description: |+
    
        reset_cache(connection = nil)
    
    
         # File vendor/rails/activerecord/lib/active_record/fixtures.rb, line 446
    446:   def self.reset_cache(connection = nil)
    447:     connection ||= ActiveRecord::Base.connection
    448:     @@all_cached_fixtures[connection.object_id] = {}
    449:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Fixtures.html#M000149
- :tinyuri: http://tinyurl.com/3syqyl
  :path: 
  - ActiveRecord
  - Base
  :method: reset_column_information
  :description: |+
    
        reset_column_information()
    Resets all the cached information about columns, which will cause them to be reloaded
    on the next request.
    
    
    
          # File vendor/rails/activerecord/lib/active_record/base.rb, line 1117
    1117:       def reset_column_information
    1118:         generated_methods.each { |name| undef_method(name) }
    1119:         @column_names = @columns = @columns_hash = @content_columns = @dynamic_methods_hash = @generated_methods = @inheritance_column = nil
    1120:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001408
- :tinyuri: http://tinyurl.com/496l44
  :path: 
  - ActionView
  - Helpers
  - TextHelper
  :method: reset_cycle
  :description: |+
    
        reset_cycle(name = "default")
    Resets a cycle so that it starts from
    the first element the next time it is called. Pass in name to
    reset a named cycle.
    
    Example
    
      # Alternate CSS classes for even and odd numbers...
      @items = [[1,2,3,4], [5,6,3], [3,4,5,6,7,4]]
      <table>
      <% @items.each do |item| %>
        <tr class="<%= cycle("even", "odd") -%>">
            <% item.each do |value| %>
              <span style="color:<%= cycle("#333", "#666", "#999", :name => "colors") -%>">
                <%= value %>
              </span>
            <% end %>
    
            <% reset_cycle("colors") %>
        </tr>
      <% end %>
      </table>
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/text_helper.rb, line 387
    387:       def reset_cycle(name = "default")
    388:         cycle = get_cycle(name)
    389:         cycle.reset unless cycle.nil?
    390:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/TextHelper.html#M001060
- :tinyuri: http://tinyurl.com/3snm6u
  :path: 
  - ActiveRecord
  - Locking
  - Optimistic
  - ClassMethods
  :method: reset_locking_column
  :description: |+
    
        reset_locking_column()
    Reset the column used for optimistic locking back to the lock_version
    default.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/locking/optimistic.rb, line 132
    132:         def reset_locking_column
    133:           set_locking_column DEFAULT_LOCKING_COLUMN
    134:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#M001113
- :tinyuri: http://tinyurl.com/3ll85m
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - DatabaseStatements
  :method: reset_sequence!
  :description: "\n  \n    reset_sequence!(table, column, sequence = nil)\n  \n  \n  \n\
    133:       def reset_sequence!(table, column, sequence = nil)\n\
    134:         # Do nothing by default.  Implement for PostgreSQL, Oracle, ...\n\
    135:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#M001190
- :tinyuri: http://tinyurl.com/4dd7qh
  :path: 
  - ActionController
  - Base
  :method: reset_session
  :description: |+
    
        reset_session(
    Resets the session by clearing out all the objects stored within and
    initializing a new session object.
    
    
    
          # File vendor/rails/actionpack/lib/action_controller/base.rb, line 1088
    1088:       def reset_session #:doc:
    1089:         request.reset_session
    1090:         @_session = request.session
    1091:         response.session = @_session
    1092:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Base.html#M000459
- :tinyuri: http://tinyurl.com/5ykgu8
  :path: 
  - Rails
  - Generator
  - Lookup
  - ClassMethods
  :method: reset_sources
  :description: |+
    
        reset_sources()
    Reset the source list.
    
    
    
        # File vendor/rails/railties/lib/rails_generator/lookup.rb, line 80
    80:         def reset_sources
    81:           write_inheritable_attribute(:sources, [])
    82:           invalidate_cache!
    83:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Lookup/ClassMethods.html#M001536
- :tinyuri: http://tinyurl.com/yr236c
  :path: 
  - ActionController
  - Resources
  :method: resource
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionController/Resources.html#M000309
- :tinyuri: http://tinyurl.com/yoy2xy
  :path: 
  - ActionController
  - Resources
  :method: resources
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionController/Resources.html#M000308
- :tinyuri: http://tinyurl.com/4ws556
  :path: 
  - ActionController
  - MimeResponds
  - InstanceMethods
  :method: respond_to
  :description: "\n  \n    respond_to(*types, &block)\n  \n  \n  \n\
    Without web-service support, an action which collects the data for\n\
    displaying a list of people might look something like this:\n\n\n  def index\n    @people = Person.find(:all)\n  end\n\n\n\
    Here\xE2\x80\x98s the same action, with web-service support baked in:\n\n\n  def index\n    @people = Person.find(:all)\n\n    respond_to do |format|\n      format.html\n      format.xml { render :xml => @people.to_xml }\n    end\n  end\n\n\n\
    What that says is, \"if the client wants HTML in response to this\n\
    action, just respond as we would have before, but if the client wants XML,\n\
    return them the list of people in XML format.\" (Rails determines the desired response format\n\
    from the HTTP Accept header submitted by the client.)\n\n\n\
    Supposing you have an action that adds a new person, optionally creating\n\
    their company (by name) if it does not already exist, without web-services,\n\
    it might look like this:\n\n\n  def create\n    @company = Company.find_or_create_by_name(params[:company][:name])\n    @person  = @company.people.create(params[:person])\n\n    redirect_to(person_list_url)\n  end\n\n\n\
    Here\xE2\x80\x98s the same action, with web-service support baked in:\n\n\n  def create\n    company  = params[:person].delete(:company)\n    @company = Company.find_or_create_by_name(company[:name])\n    @person  = @company.people.create(params[:person])\n\n    respond_to do |format|\n      format.html { redirect_to(person_list_url) }\n      format.js\n      format.xml  { render :xml => @person.to_xml(:include => @company) }\n    end\n  end\n\n\n\
    If the client wants HTML, we just redirect them back to the person list. If\n\
    they want Javascript (format.js), then it is an RJS request and we render\n\
    the RJS template associated with this action. Lastly, if the client wants\n\
    XML, we render the created person as XML, but with a twist: we also include\n\
    the person\xE2\x80\x98s company in the rendered XML, so you get something like\n\
    this:\n\n\n  <person>\n    <id>...</id>\n    ...\n    <company>\n      <id>...</id>\n      <name>...</name>\n      ...\n    </company>\n  </person>\n\n\n\
    Note, however, the extra bit at the top of that action:\n\n\n  company  = params[:person].delete(:company)\n  @company = Company.find_or_create_by_name(company[:name])\n\n\n\
    This is because the incoming XML document (if a web-service request is in\n\
    process) can only contain a single root-node. So, we have to rearrange\n\
    things so that the request looks like this (url-encoded):\n\n\n  person[name]=...&person[company][name]=...&...\n\n\n\
    And, like this (xml-encoded):\n\n\n  <person>\n    <name>...</name>\n    <company>\n      <name>...</name>\n    </company>\n  </person>\n\n\n\
    In other words, we make the request so that it operates on a single\n\
    entity\xE2\x80\x98s person. Then, in the action, we extract the company data\n\
    from the request, find or create the company, and then create the new\n\
    person with the remaining data.\n\n\n\
    Note that you can define your own XML parameter parser which would allow\n\
    you to describe multiple entities in a single request (i.e., by wrapping\n\
    them all in a single root note), but if you just go with the flow and\n\
    accept Rails\xE2\x80\x99 defaults, life will be\n\
    much easier.\n\n\n\
    If you need to use a MIME type which isn\xE2\x80\x98t supported by default, you\n\
    102:       def respond_to(*types, &block)\n\
    103:         raise ArgumentError, \"respond_to takes either types or a block, never both\" unless types.any? ^ block\n\
    104:         block ||= lambda { |responder| types.each { |type| responder.send(type) } }\n\
    105:         responder = Responder.new(self)\n\
    106:         block.call(responder)\n\
    107:         responder.respond\n\
    108:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionController/MimeResponds/InstanceMethods.html#M000206
- :tinyuri: http://tinyurl.com/3qvaes
  :path: 
  - ActiveResource
  - HttpMock
  :method: respond_to
  :description: |+
    
        respond_to(pairs = {}) {|Responder.new(responses)| ...}
    
    
        # File vendor/rails/activeresource/lib/active_resource/http_mock.rb, line 31
    31:       def respond_to(pairs = {})
    32:         reset!
    33:         pairs.each do |(path, response)|
    34:           responses[path] = response
    35:         end
    36: 
    37:         if block_given?
    38:           yield Responder.new(responses)
    39:         else
    40:           Responder.new(responses)
    41:         end
    42:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/HttpMock.html#M000816
- :tinyuri: http://tinyurl.com/53csma
  :path: 
  - ActiveResource
  - Base
  :method: respond_to?
  :description: |+
    
        respond_to?(method, include_priv = false)
    A method to determine if an object responds to a message (e.g., a method
    call). In Active Resource, a Person object with a name
    attribute can answer true to
    +my_person.respond_to?("name")+,
    +my_person.respond_to?("name=")+, and
    +my_person.respond_to?("name?")+.
    
    
    
         # File vendor/rails/activeresource/lib/active_resource/base.rb, line 775
    775:     def respond_to?(method, include_priv = false)
    776:       method_name = method.to_s
    777:       if attributes.nil?
    778:         return super
    779:       elsif attributes.has_key?(method_name)
    780:         return true 
    781:       elsif ['?','='].include?(method_name.last) && attributes.has_key?(method_name.first(-1))
    782:         return true
    783:       end
    784:       # super must be called at the end of the method, because the inherited respond_to?
    785:       # would return true for generated readers, even if the attribute wasn't present
    786:       super
    787:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Base.html#M000854
- :tinyuri: http://tinyurl.com/3mheyn
  :path: 
  - ActiveSupport
  - Multibyte
  - Chars
  :method: respond_to?
  :description: |+
    
        respond_to?(method)
    Make duck-typing with String possible
    
    
    
        # File vendor/rails/activesupport/lib/active_support/multibyte/chars.rb, line 45
    45:     def respond_to?(method)
    46:       super || @string.respond_to?(method) || handler.respond_to?(method) ||
    47:         (method.to_s =~ /(.*)!/ && handler.respond_to?($1)) || false
    48:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Chars.html#M000548
- :tinyuri: http://tinyurl.com/3zwnhj
  :path: 
  - ActionController
  - Assertions
  - SelectorAssertions
  :method: response_from_page_or_rjs
  :description: |+
    
        response_from_page_or_rjs()
    assert_select and css_select call this to obtain
    the content in the HTML page, or from all the RJS statements, depending on
    the type of response.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/assertions/selector_assertions.rb, line 603
    603:         def response_from_page_or_rjs()
    604:           content_type = @response.content_type
    605: 
    606:           if content_type && content_type =~ /text\/javascript/
    607:             body = @response.body.dup
    608:             root = HTML::Node.new(nil)
    609: 
    610:             while true
    611:               next if body.sub!(RJS_PATTERN_EVERYTHING) do |match|
    612:                 html = unescape_rjs($3)
    613:                 matches = HTML::Document.new(html).root.children.select { |n| n.tag? }
    614:                 root.children.concat matches
    615:                 ""
    616:               end
    617:               break
    618:             end
    619: 
    620:             root
    621:           else
    622:             html_document.root
    623:           end
    624:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Assertions/SelectorAssertions.html#M000364
- :tinyuri: http://tinyurl.com/3q24zr
  :path: 
  - ActiveResource
  - HttpMock
  :method: responses
  :description: |+
    
        responses()
    
    
        # File vendor/rails/activeresource/lib/active_resource/http_mock.rb, line 27
    27:       def responses
    28:         @@responses ||= {}
    29:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/HttpMock.html#M000815
- :tinyuri: http://tinyurl.com/4chyug
  :path: 
  - RailsFCGIHandler
  :method: restart!
  :description: |+
    
        restart!()
    
    
         # File vendor/rails/railties/lib/fcgi_handler.rb, line 174
    174:     def restart!
    175:       config       = ::Config::CONFIG
    176:       ruby         = File::join(config['bindir'], config['ruby_install_name']) + config['EXEEXT']
    177:       command_line = [ruby, $0, ARGV].flatten.join(' ')
    178: 
    179:       dispatcher_log :info, "restarted"
    180: 
    181:       # close resources as they won't be closed by
    182:       # the OS when using exec
    183:       logger.close rescue nil
    184:       RAILS_DEFAULT_LOGGER.close rescue nil
    185: 
    186:       exec(command_line)
    187:     end
    
    
  :uri: http://api.rubyonrails.org/classes/RailsFCGIHandler.html#M000044
- :tinyuri: http://tinyurl.com/45ekt8
  :path: 
  - RailsFCGIHandler
  :method: restart_handler
  :description: |+
    
        restart_handler(signal)
    
    
         # File vendor/rails/railties/lib/fcgi_handler.rb, line 169
    169:     def restart_handler(signal)
    170:       dispatcher_log :info, "asked to restart ASAP"
    171:       @when_ready = :restart
    172:     end
    
    
  :uri: http://api.rubyonrails.org/classes/RailsFCGIHandler.html#M000043
- :tinyuri: http://tinyurl.com/5xoby7
  :path: 
  - RailsFCGIHandler
  :method: restore!
  :description: |+
    
        restore!()
    
    
         # File vendor/rails/railties/lib/fcgi_handler.rb, line 201
    201:     def restore!
    202:       $".replace @features
    203:       Dispatcher.reset_application!
    204:       ActionController::Routing::Routes.reload
    205:     end
    
    
  :uri: http://api.rubyonrails.org/classes/RailsFCGIHandler.html#M000047
- :tinyuri: http://tinyurl.com/3kp29l
  :path: 
  - XmlSimple
  - Cache
  :method: restore_mem_copy
  :description: |+
    
        restore_mem_copy(filename)
    Restores a data structure from a memory cache. If restoring the data
    structure failed for any reason, nil will be returned.
    
    
    filename:Name of the file belonging to the data structure.
    
    
    
    
    
        # File vendor/rails/activesupport/lib/active_support/vendor/xml-simple-1.0.11/xmlsimple.rb, line 87
    87:     def restore_mem_copy(filename)
    88:       data = get_from_memory_cache(filename, @mem_share_cache)
    89:       data = Marshal.load(data) unless data.nil?
    90:       data
    91:     end
    
    
  :uri: http://api.rubyonrails.org/classes/XmlSimple/Cache.html#M000122
- :tinyuri: http://tinyurl.com/4ytuc4
  :path: 
  - XmlSimple
  - Cache
  :method: restore_mem_share
  :description: |+
    
        restore_mem_share(filename)
    Restores a data structure from a shared memory cache. You should consider
    these elements as "read only". If restoring the data structure
    failed for any reason, nil will be returned.
    
    
    filename:Name of the file belonging to the data structure.
    
    
    
    
    
        # File vendor/rails/activesupport/lib/active_support/vendor/xml-simple-1.0.11/xmlsimple.rb, line 67
    67:     def restore_mem_share(filename)
    68:       get_from_memory_cache(filename, @mem_share_cache)
    69:     end
    
    
  :uri: http://api.rubyonrails.org/classes/XmlSimple/Cache.html#M000120
- :tinyuri: http://tinyurl.com/549yzb
  :path: 
  - XmlSimple
  - Cache
  :method: restore_storable
  :description: |+
    
        restore_storable(filename)
    Restores a data structure from a file. If restoring the data structure
    failed for any reason, nil will be returned.
    
    
    filename:Name of the file belonging to the data structure.
    
    
    
    
    
        # File vendor/rails/activesupport/lib/active_support/vendor/xml-simple-1.0.11/xmlsimple.rb, line 41
    41:     def restore_storable(filename)
    42:       cache_file = get_cache_filename(filename)
    43:       return nil unless File::exist?(cache_file)
    44:       return nil unless File::mtime(cache_file).to_i > File::mtime(filename).to_i
    45:       data = nil
    46:       File.open(cache_file) { |f| data = Marshal.load(f) }
    47:       data
    48:     end
    
    
  :uri: http://api.rubyonrails.org/classes/XmlSimple/Cache.html#M000118
- :tinyuri: http://tinyurl.com/3t58le
  :path: 
  - Object
  :method: returning
  :description: |+
    
        returning(value) {|value| ...}
    A Ruby-ized realization of the K combinator, courtesy of Mikael Brockman.
    
    
      def foo
        returning values = [] do
          values << 'bar'
          values << 'baz'
        end
      end
    
      foo # => ['bar', 'baz']
    
      def foo
        returning [] do |values|
          values << 'bar'
          values << 'baz'
        end
      end
    
      foo # => ['bar', 'baz']
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/object/misc.rb, line 27
    27:   def returning(value)
    28:     yield(value)
    29:     value
    30:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Object.html#M000139
- :tinyuri: http://tinyurl.com/4vhcrl
  :path: 
  - BlankSlate
  :method: reveal
  :description: |+
    
        reveal(name)
    Redefine a previously hidden method so that it may be called on a blank
    slate object.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/vendor/builder-2.1.2/blankslate.rb, line 38
    38:     def reveal(name)
    39:       bound_method = nil
    40:       unbound_method = find_hidden_method(name)
    41:       fail "Don't know how to reveal method '#{name}'" unless unbound_method
    42:       define_method(name) do |*args|
    43:         bound_method ||= unbound_method.bind(self)
    44:         bound_method.call(*args)
    45:       end
    46:     end
    
    
  :uri: http://api.rubyonrails.org/classes/BlankSlate.html#M000108
- :tinyuri: http://tinyurl.com/4drr8y
  :path: 
  - ActiveSupport
  - Multibyte
  - Handlers
  - UTF8Handler
  :method: reverse
  :description: |+
    
        reverse(str)
    Reverses codepoints in the string.
    
    
    
         # File vendor/rails/activesupport/lib/active_support/multibyte/handlers/utf8_handler.rb, line 243
    243:       def reverse(str)
    244:         u_unpack(str).reverse.pack('U*')
    245:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Handlers/UTF8Handler.html#M000525
- :tinyuri: http://tinyurl.com/3pkz4a
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Hash
  - ReverseMerge
  :method: reverse_merge
  :description: |+
    
        reverse_merge(other_hash)
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/hash/reverse_merge.rb, line 13
    13:         def reverse_merge(other_hash)
    14:           other_hash.merge(self)
    15:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Hash/ReverseMerge.html#M000613
- :tinyuri: http://tinyurl.com/5223bp
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Hash
  - ReverseMerge
  :method: reverse_merge!
  :description: |+
    
        reverse_merge!(other_hash)
    
      This method is also aliased as
      reverse_update
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/hash/reverse_merge.rb, line 17
    17:         def reverse_merge!(other_hash)
    18:           replace(reverse_merge(other_hash))
    19:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Hash/ReverseMerge.html#M000614
- :tinyuri: http://tinyurl.com/4q7azf
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Hash
  - ReverseMerge
  :method: reverse_update
  :description: |
    
        reverse_update(other_hash)
    Alias for reverse_merge!
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Hash/ReverseMerge.html#M000615
- :tinyuri: http://tinyurl.com/45xyeo
  :path: 
  - Rails
  - Generator
  - Manifest
  :method: rewind
  :description: |+
    
        rewind(target = nil)
    Rewind recorded actions.
    
    
    
        # File vendor/rails/railties/lib/rails_generator/manifest.rb, line 35
    35:       def rewind(target = nil)
    36:         send_actions(target || @target, @actions.reverse)
    37:       end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Manifest.html#M001550
- :tinyuri: http://tinyurl.com/5x9ojn
  :path: 
  - ActiveSupport
  - Multibyte
  - Handlers
  - UTF8Handler
  :method: rjust
  :description: "\n  \n    rjust(str, integer, padstr=' ')\n  \n  \n  \n\
    Works just like String#rjust, only integer specifies characters instead of\n\
    bytes.\n\n\n\
    191:       def rjust(str, integer, padstr=' ')\n\
    192:         justify(str, integer, :right, padstr)\n\
    193:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Handlers/UTF8Handler.html#M000518
- :tinyuri: http://tinyurl.com/4yfauk
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - PostgreSQLAdapter
  :method: rollback_db_transaction
  :description: |+
    
        rollback_db_transaction()
    Aborts a transaction.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 432
    432:       def rollback_db_transaction
    433:         execute "ROLLBACK"
    434:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#M001265
- :tinyuri: http://tinyurl.com/4tpy2j
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - DatabaseStatements
  :method: rollback_db_transaction
  :description: |+
    
        rollback_db_transaction()
    Rolls back the transaction
    (and turns on auto-committing). Must be done if the transaction block raises an
    exception or returns false.
    
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 94
    94:       def rollback_db_transaction() end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#M001185
- :tinyuri: http://tinyurl.com/3ftjew
  :path: 
  - ActionController
  - Routing
  - RouteSet
  - Mapper
  :method: root
  :description: |+
    
        root(options = {})
    Creates a named route called "root" for matching the root level request.
    
    
    
          # File vendor/rails/actionpack/lib/action_controller/routing.rb, line 1069
    1069:         def root(options = {})
    1070:           named_route("root", '', options)
    1071:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Routing/RouteSet/Mapper.html#M000350
- :tinyuri: http://tinyurl.com/3uyehf
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Float
  - Rounding
  :method: round_with_precision
  :description: |+
    
        round_with_precision(precision = nil)
    Rounds the float with the specified precision.
    
    
      x = 1.337
      x.round    # => 1
      x.round(1) # => 1.3
      x.round(2) # => 1.34
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/float/rounding.rb, line 18
    18:         def round_with_precision(precision = nil)
    19:           precision.nil? ? round_without_precision : (self * (10 ** precision)).round / (10 ** precision).to_f
    20:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Float/Rounding.html#M000672
- :tinyuri: http://tinyurl.com/3mwxg7
  :path: 
  - Rails
  - Generator
  - Commands
  - List
  :method: route_resources
  :description: |+
    
        route_resources(*resources)
    
    
         # File vendor/rails/railties/lib/rails_generator/commands.rb, line 548
    548:         def route_resources(*resources)
    549:           resource_list = resources.map { |r| r.to_sym.inspect }.join(', ')
    550:           logger.route "map.resources #{resource_list}"
    551:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Commands/List.html#M001517
- :tinyuri: http://tinyurl.com/2yfyjh
  :path: 
  - Rails
  - Generator
  - Commands
  - Create
  :method: route_resources
  :description: |+
    
        route_resources(*resources)
    
    
         # File vendor/rails/railties/lib/rails_generator/commands.rb, line 351
    351:         def route_resources(*resources)
    352:           resource_list = resources.map { |r| r.to_sym.inspect }.join(', ')
    353:           sentinel = 'ActionController::Routing::Routes.draw do |map|'
    354: 
    355:           logger.route "map.resources #{resource_list}"
    356:           unless options[:pretend]
    357:             gsub_file 'config/routes.rb', /(#{Regexp.escape(sentinel)})/mi do |match|
    358:               "#{match}\n  map.resources #{resource_list}\n"
    359:             end
    360:           end
    361:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Commands/Create.html#M001530
- :tinyuri: http://tinyurl.com/4eox42
  :path: 
  - Rails
  - Generator
  - Commands
  - Destroy
  :method: route_resources
  :description: |+
    
        route_resources(*resources)
    
    
         # File vendor/rails/railties/lib/rails_generator/commands.rb, line 504
    504:         def route_resources(*resources)
    505:           resource_list = resources.map { |r| r.to_sym.inspect }.join(', ')
    506:           look_for = "\n  map.resources #{resource_list}\n"
    507:           logger.route "map.resources #{resource_list}"
    508:           gsub_file 'config/routes.rb', /(#{look_for})/mi, ''
    509:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Commands/Destroy.html#M001496
- :tinyuri: http://tinyurl.com/4sss6z
  :path: 
  - ActiveSupport
  - Multibyte
  - Handlers
  - UTF8Handler
  :method: rstrip
  :description: |+
    
        rstrip(str)
    Does Unicode-aware rstrip
    
    
    
         # File vendor/rails/activesupport/lib/active_support/multibyte/handlers/utf8_handler.rb, line 222
    222:       def rstrip(str)
    223:         str.gsub(UNICODE_TRAILERS_PAT, '')
    224:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Handlers/UTF8Handler.html#M000521
- :tinyuri: http://tinyurl.com/4lqe5a
  :path: 
  - ActionController
  - RequestProfiler
  :method: run
  :description: |+
    
        run()
    
    
        # File vendor/rails/actionpack/lib/action_controller/request_profiler.rb, line 60
    60:     def run
    61:       sandbox = Sandbox.new(options[:script])
    62: 
    63:       puts 'Warming up once'
    64: 
    65:       elapsed = warmup(sandbox)
    66:       puts '%.2f sec, %d requests, %d req/sec' % [elapsed, sandbox.request_count, sandbox.request_count / elapsed]
    67:       puts "\n#{options[:benchmark] ? 'Benchmarking' : 'Profiling'} #{options[:n]}x"
    68: 
    69:       options[:benchmark] ? benchmark(sandbox) : profile(sandbox)
    70:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/RequestProfiler.html#M000381
- :tinyuri: http://tinyurl.com/3l6lo5
  :path: 
  - Rails
  - Initializer
  :method: run
  :description: |+
    
        run(command = :process, configuration = Configuration.new) {|configuration if block_given?| ...}
    Runs the initializer. By default, this will invoke the process method, which simply executes
    all of the initialization routines. Alternately, you can specify explicitly
    which initialization routine you want:
    
    
      Rails::Initializer.run(:set_load_path)
    
    
    This is useful if you only want the load path initialized, without incuring
    the overhead of completely loading the entire environment.
    
    
    
        # File vendor/rails/railties/lib/initializer.rb, line 46
    46:     def self.run(command = :process, configuration = Configuration.new)
    47:       yield configuration if block_given?
    48:       initializer = new configuration
    49:       initializer.send(command)
    50:       initializer
    51:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Initializer.html#M001571
- :tinyuri: http://tinyurl.com/4ul6vk
  :path: 
  - ActionController
  - RequestProfiler
  :method: run
  :description: |+
    
        run(args = nil, options = {})
    
    
        # File vendor/rails/actionpack/lib/action_controller/request_profiler.rb, line 54
    54:     def self.run(args = nil, options = {})
    55:       profiler = new(options)
    56:       profiler.parse_options(args) if args
    57:       profiler.run
    58:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/RequestProfiler.html#M000380
- :tinyuri: http://tinyurl.com/49durt
  :path: 
  - ActiveSupport
  - Testing
  - Default
  :method: run
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Testing/Default.html#M000763
- :tinyuri: http://tinyurl.com/3e6vvr
  :path: 
  - Rails
  - Generator
  - Scripts
  - Base
  :method: run
  :description: |+
    
        run(args = [], runtime_options = {})
    Run the generator script. Takes an array of unparsed arguments and a hash
    of parsed arguments, takes the generator as an option or first remaining
    argument, and invokes the requested command.
    
    
    
        # File vendor/rails/railties/lib/rails_generator/scripts.rb, line 17
    17:         def run(args = [], runtime_options = {})
    18:           begin
    19:             parse!(args.dup, runtime_options)
    20:           rescue OptionParser::InvalidOption => e
    21:             # Don't cry, script. Generators want what you think is invalid.
    22:           end
    23: 
    24:           # Generator name is the only required option.
    25:           unless options[:generator]
    26:             usage if args.empty?
    27:             options[:generator] ||= args.shift
    28:           end
    29: 
    30:           # Look up generator instance and invoke command on it.
    31:           Rails::Generator::Base.instance(options[:generator], args, options).command(options[:command]).invoke!
    32:         rescue => e
    33:           puts e
    34:           puts "  #{e.backtrace.join("\n  ")}\n" if options[:backtrace]
    35:           raise SystemExit
    36:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Scripts/Base.html#M001471
- :tinyuri: http://tinyurl.com/3l9dx2
  :path: 
  - ActionController
  - Dispatcher
  :method: run_callbacks
  :description: |+
    
        run_callbacks(kind, enumerator = :each)
    
    
         # File vendor/rails/actionpack/lib/action_controller/dispatcher.rb, line 174
    174:       def run_callbacks(kind, enumerator = :each)
    175:         callbacks[kind].send!(enumerator) do |callback|
    176:           case callback
    177:           when Proc; callback.call(self)
    178:           when String, Symbol; send!(callback)
    179:           when Array; callback[1].call(self)
    180:           else raise ArgumentError, "Unrecognized callback #{callback.inspect}"
    181:           end
    182:         end
    183:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Dispatcher.html#M000477
- :tinyuri: http://tinyurl.com/3homfv
  :path: 
  - RailsFCGIHandler
  :method: run_gc!
  :description: |+
    
        run_gc!()
    
    
         # File vendor/rails/railties/lib/fcgi_handler.rb, line 207
    207:     def run_gc!
    208:       @gc_request_countdown = gc_request_period
    209:       GC.enable; GC.start; GC.disable
    210:     end
    
    
  :uri: http://api.rubyonrails.org/classes/RailsFCGIHandler.html#M000048
- :tinyuri: http://tinyurl.com/4k3qm5
  :path: 
  - ActionView
  - Helpers
  - SanitizeHelper
  :method: sanitize
  :description: "\n  \n    sanitize(html, options = {})\n  \n  \n  \n\
    This sanitize helper will html\n\
    encode all tags and strip all attributes that aren\xE2\x80\x98t specifically\n\
    allowed. It also strips href/src tags with invalid protocols, like\n\
    javascript: especially. It does its best to counter any tricks that hackers\n\
    may use, like throwing in unicode/ascii/hex values to get past the\n\
    javascript: filters. Check out the extensive test suite.\n\n\n  <%= sanitize @article.body %>\n\n\n\
    You can add or remove tags/attributes if you want to customize it a bit.\n\
    See ActionView::Base for full docs on the\n\
    available options. You can add tags/attributes for single uses of sanitize by passing either the\n\
    :attributes or :tags options:\n\n\n\
    Normal Use\n\n\n  <%= sanitize @article.body %>\n\n\n\
    Custom Use (only the mentioned tags and attributes are allowed, nothing\n\
    else)\n\n\n  <%= sanitize @article.body, :tags => %w(table tr td), :attributes => %w(id class style)\n\n\n\
    Add table tags to the default allowed tags\n\n\n  Rails::Initializer.run do |config|\n    config.action_view.sanitized_allowed_tags = 'table', 'tr', 'td'\n  end\n\n\n\
    Remove tags to the default allowed tags\n\n\n  Rails::Initializer.run do |config|\n    config.after_initialize do\n      ActionView::Base.sanitized_allowed_tags.delete 'div'\n    end\n  end\n\n\n\
    51:       def sanitize(html, options = {})\n\
    52:         self.class.white_list_sanitizer.sanitize(html, options)\n\
    53:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html#M000936
- :tinyuri: http://tinyurl.com/5y8lol
  :path: 
  - HTML
  - Sanitizer
  :method: sanitize
  :description: |+
    
        sanitize(text, options = {})
    
    
       # File vendor/rails/actionpack/lib/action_controller/vendor/html-scanner/html/sanitizer.rb, line 3
    3:     def sanitize(text, options = {})
    4:       return text unless sanitizeable?(text)
    5:       tokenize(text, options).join
    6:     end
    
    
  :uri: http://api.rubyonrails.org/classes/HTML/Sanitizer.html#M000185
- :tinyuri: http://tinyurl.com/3u45qc
  :path: 
  - HTML
  - FullSanitizer
  :method: sanitize
  :description: 
  :uri: http://api.rubyonrails.org/classes/HTML/FullSanitizer.html#M000181
- :tinyuri: http://tinyurl.com/446jrk
  :path: 
  - ActionView
  - Helpers
  - SanitizeHelper
  :method: sanitize_css
  :description: |+
    
        sanitize_css(style)
    Sanitizes a block of css code. Used by sanitize when it comes across a
    style attribute
    
    
    
        # File vendor/rails/actionpack/lib/action_view/helpers/sanitize_helper.rb, line 56
    56:       def sanitize_css(style)
    57:         self.class.white_list_sanitizer.sanitize_css(style)
    58:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html#M000937
- :tinyuri: http://tinyurl.com/3jhy8x
  :path: 
  - HTML
  - WhiteListSanitizer
  :method: sanitize_css
  :description: |+
    
        sanitize_css(style)
    Sanitizes a block of css code. Used by sanitize when it comes across a
    style attribute
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/vendor/html-scanner/html/sanitizer.rb, line 104
    104:     def sanitize_css(style)
    105:       # disallow urls
    106:       style = style.to_s.gsub(/url\s*\(\s*[^\s)]+?\s*\)\s*/, ' ')
    107: 
    108:       # gauntlet
    109:       if style !~ /^([:,;#%.\sa-zA-Z0-9!]|\w-\w|\'[\s\w]+\'|\"[\s\w]+\"|\([\d,\s]+\))*$/ ||
    110:           style !~ /^(\s*[-\w]+\s*:\s*[^:;]*(;|$))*$/
    111:         return ''
    112:       end
    113: 
    114:       clean = []
    115:       style.scan(/([-\w]+)\s*:\s*([^:;]*)/) do |prop,val|
    116:         if allowed_css_properties.include?(prop.downcase)
    117:           clean <<  prop + ': ' + val + ';'
    118:         elsif shorthand_css_properties.include?(prop.split('-')[0].downcase) 
    119:           unless val.split().any? do |keyword|
    120:             !allowed_css_keywords.include?(keyword) && 
    121:               keyword !~ /^(#[0-9a-f]+|rgb\(\d+%?,\d*%?,?\d*%?\)?|\d{0,2}\.?\d{0,2}(cm|em|ex|in|mm|pc|pt|px|%|,|\))?)$/
    122:           end
    123:             clean << prop + ': ' + val + ';'
    124:           end
    125:         end
    126:       end
    127:       clean.join(' ')
    128:     end
    
    
  :uri: http://api.rubyonrails.org/classes/HTML/WhiteListSanitizer.html#M000176
- :tinyuri: http://tinyurl.com/3us43s
  :path: 
  - ActiveRecord
  - Base
  :method: sanitize_sql_array
  :description: |+
    
        sanitize_sql_array(ary)
    Accepts an array of conditions. The array has each value sanitized and
    interpolated into the sql statement.
    
    
      ["name='%s' and group_id='%s'", "foo'bar", 4]  returns  "name='foo''bar' and group_id='4'"
    
    
    
          # File vendor/rails/activerecord/lib/active_record/base.rb, line 1835
    1835:         def sanitize_sql_array(ary)
    1836:           statement, *values = ary
    1837:           if values.first.is_a?(Hash) and statement =~ /:\w+/
    1838:             replace_named_bind_variables(statement, values.first)
    1839:           elsif statement.include?('?')
    1840:             replace_bind_variables(statement, values)
    1841:           else
    1842:             statement % values.collect { |value| connection.quote_string(value.to_s) }
    1843:           end
    1844:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001424
- :tinyuri: http://tinyurl.com/3qjf98
  :path: 
  - ActiveRecord
  - Base
  :method: sanitize_sql_for_assignment
  :description: |+
    
        sanitize_sql_for_assignment(assignments)
    Accepts an array, hash, or string of sql
    conditions and sanitizes them into a valid SQL fragment for a SET clause.
    
    
      { :name => nil, :group_id => 4 }  returns "name = NULL , group_id='4'"
    
    
    
          # File vendor/rails/activerecord/lib/active_record/base.rb, line 1787
    1787:         def sanitize_sql_for_assignment(assignments)
    1788:           case assignments
    1789:             when Array; sanitize_sql_array(assignments)
    1790:             when Hash;  sanitize_sql_hash_for_assignment(assignments)
    1791:             else        assignments
    1792:           end
    1793:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001421
- :tinyuri: http://tinyurl.com/2ynhuq
  :path: 
  - ActiveRecord
  - Base
  :method: sanitize_sql_for_conditions
  :description: |+
    
        sanitize_sql_for_conditions(condition)
    Accepts an array, hash, or string of sql
    conditions and sanitizes them into a valid SQL fragment for a WHERE clause.
    
    
      ["name='%s' and group_id='%s'", "foo'bar", 4]  returns  "name='foo''bar' and group_id='4'"
      { :name => "foo'bar", :group_id => 4 }  returns "name='foo''bar' and group_id='4'"
      "name='foo''bar' and group_id='4'" returns "name='foo''bar' and group_id='4'"
    
    
    
          # File vendor/rails/activerecord/lib/active_record/base.rb, line 1775
    1775:         def sanitize_sql_for_conditions(condition)
    1776:           case condition
    1777:             when Array; sanitize_sql_array(condition)
    1778:             when Hash;  sanitize_sql_hash_for_conditions(condition)
    1779:             else        condition
    1780:           end
    1781:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001420
- :tinyuri: http://tinyurl.com/3t7wub
  :path: 
  - ActiveRecord
  - Base
  :method: sanitize_sql_hash_for_assignment
  :description: |+
    
        sanitize_sql_hash_for_assignment(attrs)
    Sanitizes a hash of attribute/value pairs
    into SQL conditions for a SET clause.
    
    
      { :status => nil, :group_id => 1 }
        # => "status = NULL , group_id = 1"
    
    
    
          # File vendor/rails/activerecord/lib/active_record/base.rb, line 1826
    1826:         def sanitize_sql_hash_for_assignment(attrs)
    1827:           conditions = attrs.map do |attr, value|
    1828:             "#{connection.quote_column_name(attr)} = #{quote_bound_value(value)}"
    1829:           end.join(', ')
    1830:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001423
- :tinyuri: http://tinyurl.com/yv8x9z
  :path: 
  - ActiveRecord
  - Base
  :method: sanitize_sql_hash_for_conditions
  :description: |+
    
        sanitize_sql_hash_for_conditions(attrs)
    Sanitizes a hash of attribute/value pairs
    into SQL conditions for a WHERE clause.
    
    
      { :name => "foo'bar", :group_id => 4 }
        # => "name='foo''bar' and group_id= 4"
      { :status => nil, :group_id => [1,2,3] }
        # => "status IS NULL and group_id IN (1,2,3)"
      { :age => 13..18 }
        # => "age BETWEEN 13 AND 18"
      { 'other_records.id' => 7 }
        # => "`other_records`.`id` = 7"
    
    
    
          # File vendor/rails/activerecord/lib/active_record/base.rb, line 1804
    1804:         def sanitize_sql_hash_for_conditions(attrs)
    1805:           conditions = attrs.map do |attr, value|
    1806:             attr = attr.to_s
    1807: 
    1808:             # Extract table name from qualified attribute names.
    1809:             if attr.include?('.')
    1810:               table_name, attr = attr.split('.', 2)
    1811:               table_name = connection.quote_table_name(table_name)
    1812:             else
    1813:               table_name = quoted_table_name
    1814:             end
    1815: 
    1816:             "#{table_name}.#{connection.quote_column_name(attr)} #{attribute_condition(value)}"
    1817:           end.join(' AND ')
    1818: 
    1819:           replace_bind_variables(conditions, expand_range_bind_variables(attrs.values))
    1820:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001422
- :tinyuri: http://tinyurl.com/4hf9y2
  :path: 
  - HTML
  - LinkSanitizer
  :method: sanitizeable?
  :description: |+
    
        sanitizeable?(text)
    
    
        # File vendor/rails/actionpack/lib/action_controller/vendor/html-scanner/html/sanitizer.rb, line 47
    47:     def sanitizeable?(text)
    48:       !(text.nil? || text.empty? || !((text.index("<a") || text.index("<href")) && text.index(">")))
    49:     end
    
    
  :uri: http://api.rubyonrails.org/classes/HTML/LinkSanitizer.html#M000183
- :tinyuri: http://tinyurl.com/4vk43z
  :path: 
  - HTML
  - Sanitizer
  :method: sanitizeable?
  :description: |+
    
        sanitizeable?(text)
    
    
        # File vendor/rails/actionpack/lib/action_controller/vendor/html-scanner/html/sanitizer.rb, line 8
     8:     def sanitizeable?(text)
     9:       !(text.nil? || text.empty? || !text.index("<"))
    10:     end
    
    
  :uri: http://api.rubyonrails.org/classes/HTML/Sanitizer.html#M000186
- :tinyuri: http://tinyurl.com/4s2dje
  :path: 
  - ActiveRecord
  - Base
  :method: save
  :description: |+
    
        save()
    No record exists: Creates a new record with
    values matching those of the object attributes.
    
    
    A record does exist: Updates the record with values matching those of the
    object attributes.
    
    
    
    
    
          # File vendor/rails/activerecord/lib/active_record/base.rb, line 1971
    1971:       def save
    1972:         create_or_update
    1973:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001430
- :tinyuri: http://tinyurl.com/3pn9d7
  :path: 
  - Repositories
  :method: save
  :description: |+
    
        save()
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 320
    320:   def save
    321:     File.open(@cache_file, 'w') do |f|
    322:       each do |repo|
    323:         f.write(repo.uri)
    324:         f.write("\n")
    325:       end
    326:     end
    327:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Repositories.html#M000086
- :tinyuri: http://tinyurl.com/4kwwz6
  :path: 
  - ActiveResource
  - Base
  :method: save
  :description: "\n  \n    save()\n  \n  \n  \n\
    A method to save (POST) or update (PUT) a resource. It delegates\n\
    to create if a new object, update if it is existing. If the response\n\
    to the save includes a body, it will be\n\
    assumed that this body is XML for the final object as it looked after the\n\
    save (which would include attributes like\n\
    created_at that weren\xE2\x80\x98t part of the original submit).\n\n\
    636:     def save\n\
    637:       new? ? create : update\n\
    638:     end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Base.html#M000848
- :tinyuri: http://tinyurl.com/2tr3rl
  :path: 
  - ActiveRecord
  - Base
  :method: save!
  :description: "\n  \n    save!()\n  \n  \n  \n\
    Attempts to save the record, but instead of\n\
    1977:       def save!\n\
    1978:         create_or_update || raise(RecordNotSaved)\n\
    1979:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001431
- :tinyuri: http://tinyurl.com/46s4fn
  :path: 
  - XmlSimple
  - Cache
  :method: save_mem_copy
  :description: |+
    
        save_mem_copy(data, filename)
    Copies a data structure to a memory cache.
    
    
    data:Data structure to be copied.
    
    
    filename:Name of the file belonging to the data structure.
    
    
    
    
    
        # File vendor/rails/activesupport/lib/active_support/vendor/xml-simple-1.0.11/xmlsimple.rb, line 77
    77:     def save_mem_copy(data, filename)
    78:       @mem_share_cache[filename] = [Time::now.to_i, Marshal.dump(data)]
    79:     end
    
    
  :uri: http://api.rubyonrails.org/classes/XmlSimple/Cache.html#M000121
- :tinyuri: http://tinyurl.com/524rkm
  :path: 
  - XmlSimple
  - Cache
  :method: save_mem_share
  :description: |+
    
        save_mem_share(data, filename)
    Saves a data structure in a shared memory cache.
    
    
    data:Data structure to be saved.
    
    
    filename:Name of the file belonging to the data structure.
    
    
    
    
    
        # File vendor/rails/activesupport/lib/active_support/vendor/xml-simple-1.0.11/xmlsimple.rb, line 56
    56:     def save_mem_share(data, filename)
    57:       @mem_share_cache[filename] = [Time::now.to_i, data]
    58:     end
    
    
  :uri: http://api.rubyonrails.org/classes/XmlSimple/Cache.html#M000119
- :tinyuri: http://tinyurl.com/3gsgju
  :path: 
  - XmlSimple
  - Cache
  :method: save_storable
  :description: |+
    
        save_storable(data, filename)
    Saves a data structure into a file.
    
    
    data:Data structure to be saved.
    
    
    filename:Name of the file belonging to the data structure.
    
    
    
    
    
        # File vendor/rails/activesupport/lib/active_support/vendor/xml-simple-1.0.11/xmlsimple.rb, line 31
    31:     def save_storable(data, filename)
    32:       cache_file = get_cache_filename(filename)
    33:       File.open(cache_file, "w+") { |f| Marshal.dump(data, f) }
    34:     end
    
    
  :uri: http://api.rubyonrails.org/classes/XmlSimple/Cache.html#M000117
- :tinyuri: http://tinyurl.com/4qayrc
  :path: 
  - ActiveResource
  - Validations
  :method: save_with_validation
  :description: |+
    
        save_with_validation()
    Validate a resource and save (POST) it to the remote web service.
    
    
    
         # File vendor/rails/activeresource/lib/active_resource/validations.rb, line 261
    261:     def save_with_validation
    262:       save_without_validation
    263:       true
    264:     rescue ResourceInvalid => error
    265:       errors.from_xml(error.response.body)
    266:       false
    267:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Validations.html#M000797
- :tinyuri: http://tinyurl.com/5xcfsk
  :path: 
  - ActiveRecord
  - Validations
  :method: save_with_validation
  :description: |+
    
        save_with_validation(perform_validation = true)
    The validation process on save can be skipped by passing false. The regular
    Base#save method is replaced with this when
    the validations module is mixed in, which it is by default.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/validations.rb, line 932
    932:     def save_with_validation(perform_validation = true)
    933:       if perform_validation && valid? || !perform_validation
    934:         save_without_validation
    935:       else
    936:         false
    937:       end
    938:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Validations.html#M001311
- :tinyuri: http://tinyurl.com/4yz26h
  :path: 
  - ActiveRecord
  - Validations
  :method: save_with_validation!
  :description: |+
    
        save_with_validation!()
    Attempts to save the record just like Base#save but will raise a RecordInvalid
    exception instead of returning false if the record is not valid.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/validations.rb, line 942
    942:     def save_with_validation!
    943:       if valid?
    944:         save_without_validation!
    945:       else
    946:         raise RecordInvalid.new(self)
    947:       end
    948:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Validations.html#M001312
- :tinyuri: http://tinyurl.com/4mpba8
  :path: 
  - ActionController
  - RequestProfiler
  - Sandbox
  :method: say
  :description: |+
    
        say(message)
    
    
        # File vendor/rails/actionpack/lib/action_controller/request_profiler.rb, line 36
    36:       def say(message)
    37:         puts "  #{message}" unless @quiet
    38:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/RequestProfiler/Sandbox.html#M000392
- :tinyuri: http://tinyurl.com/49v8za
  :path: 
  - ActiveRecord
  - Migration
  :method: say
  :description: |+
    
        say(message, subitem=false)
    
    
         # File vendor/rails/activerecord/lib/active_record/migration.rb, line 258
    258:       def say(message, subitem=false)
    259:         write "#{subitem ? "   ->" : "--"} #{message}"
    260:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Migration.html#M001371
- :tinyuri: http://tinyurl.com/3z68uf
  :path: 
  - ActiveRecord
  - Migration
  :method: say_with_time
  :description: |+
    
        say_with_time(message) {|| ...}
    
    
         # File vendor/rails/activerecord/lib/active_record/migration.rb, line 262
    262:       def say_with_time(message)
    263:         say(message)
    264:         result = nil
    265:         time = Benchmark.measure { result = yield }
    266:         say "%.4fs" % time.real, :subitem
    267:         say("#{result} rows", :subitem) if result.is_a?(Integer)
    268:         result
    269:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Migration.html#M001372
- :tinyuri: http://tinyurl.com/3wb3wv
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - PostgreSQLAdapter
  :method: schema_search_path
  :description: |+
    
        schema_search_path()
    Returns the active schema search path.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 505
    505:       def schema_search_path
    506:         @schema_search_path ||= query('SHOW search_path')[0][0]
    507:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#M001270
- :tinyuri: http://tinyurl.com/4kzd3m
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - PostgreSQLAdapter
  :method: schema_search_path=
  :description: "\n  \n    schema_search_path=(schema_csv)\n  \n  \n  \n\
    Sets the schema search path to a string of comma-separated schema names.\n\
    Names beginning with $ have to be quoted (e.g. $user =>\n\
    \xE2\x80\x99$user\xE2\x80\x99). See: www.postgresql.org/docs/current/static/ddl-schemas.html\n\n\n\
    497:       def schema_search_path=(schema_csv)\n\
    498:         if schema_csv\n\
    499:           execute \"SET search_path TO #{schema_csv}\"\n\
    500:           @schema_search_path = schema_csv\n\
    501:         end\n\
    502:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#M001269
- :tinyuri: http://tinyurl.com/4bnkac
  :path: 
  - Commands
  - Discover
  :method: scrape
  :description: |+
    
        scrape(uri) {|uri unless dupes.include?(uri) || Repositories.instance.exist?(uri)| ...}
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 684
    684:     def scrape(uri)
    685:       require 'open-uri'
    686:       puts "Scraping #{uri}" if $verbose
    687:       dupes = []
    688:       content = open(uri).each do |line|
    689:         begin
    690:           if line =~ /<a[^>]*href=['"]([^'"]*)['"]/ || line =~ /(svn:\/\/[^<|\n]*)/
    691:             uri = $1
    692:             if uri =~ /^\w+:\/\// && uri =~ /\/plugins\// && uri !~ /\/browser\// && uri !~ /^http:\/\/wiki\.rubyonrails/ && uri !~ /http:\/\/instiki/
    693:               uri = extract_repository_uri(uri)
    694:               yield uri unless dupes.include?(uri) || Repositories.instance.exist?(uri)
    695:               dupes << uri
    696:             end
    697:           end
    698:         rescue
    699:           puts "Problems scraping '#{uri}': #{$!.to_s}"
    700:         end
    701:       end
    702:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Commands/Discover.html#M000482
- :tinyuri: http://tinyurl.com/4psfcs
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Numeric
  - Time
  :method: second
  :description: |
    
        second()
    Alias for seconds
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Numeric/Time.html#M000639
- :tinyuri: http://tinyurl.com/3jvkmh
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Numeric
  - Time
  :method: seconds
  :description: |+
    
        seconds()
    
      This method is also aliased as
      second
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/numeric/time.rb, line 33
    33:         def seconds
    34:           ActiveSupport::Duration.new(self, [[:seconds, self]])
    35:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Numeric/Time.html#M000638
- :tinyuri: http://tinyurl.com/4td5tw
  :path: 
  - ActiveSupport
  - CoreExtensions
  - DateTime
  - Calculations
  :method: seconds_since_midnight
  :description: |+
    
        seconds_since_midnight()
    Seconds since midnight: DateTime.now.seconds_since_midnight
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 20
    20:         def seconds_since_midnight
    21:           self.sec + (self.min * 60) + (self.hour * 3600)
    22:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/DateTime/Calculations.html#M000722
- :tinyuri: http://tinyurl.com/485tq8
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Calculations
  :method: seconds_since_midnight
  :description: |+
    
        seconds_since_midnight()
    Seconds since midnight: Time.now.seconds_since_midnight
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/time/calculations.rb, line 54
    54:         def seconds_since_midnight
    55:           self.to_i - self.change(:hour => 0).to_i + (self.usec/1.0e+6)
    56:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Calculations.html#M000574
- :tinyuri: http://tinyurl.com/2b7s67
  :path: 
  - ActionView
  - Helpers
  - FormOptionsHelper
  :method: select
  :description: |+
    
        select(object, method, choices, options = {}, html_options = {})
    Create a select tag and a
    series of contained option tags for the provided object and method. The
    option currently held by the object will be selected, provided that the
    object is available. See options_for_select for the
    required format of the choices parameter.
    
    
    Example with @post.person_id => 1:
    
    
      select("post", "person_id", Person.find(:all).collect {|p| [ p.name, p.id ] }, { :include_blank => true })
    
    
    could become:
    
    
      <select name="post[person_id]">
        <option value=""></option>
        <option value="1" selected="selected">David</option>
        <option value="2">Sam</option>
        <option value="3">Tobias</option>
      </select>
    
    
    This can be used to provide a default set of options in the standard way:
    before rendering the create form, a new model instance is assigned the
    default options and bound to @model_name. Usually this model is not saved
    to the database. Instead, a second model object is created when the create
    request is received. This allows the user to submit a form page more than
    once with the expected results of creating multiple records. In addition,
    this allows a single partial to be used to generate form inputs for both
    edit and create forms.
    
    
    By default, post.person_id is the selected option. Specify :selected =>
    value to use a different selection or :selected => nil to leave all
    options unselected.
    
    
    
        # File vendor/rails/actionpack/lib/action_view/helpers/form_options_helper.rb, line 83
    83:       def select(object, method, choices, options = {}, html_options = {})
    84:         InstanceTag.new(object, method, self, nil, options.delete(:object)).to_select_tag(choices, options, html_options)
    85:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/FormOptionsHelper.html#M000940
- :tinyuri: http://tinyurl.com/3j2eqg
  :path: 
  - ActionView
  - Helpers
  - PrototypeHelper
  - JavaScriptGenerator
  - GeneratorMethods
  :method: select
  :description: "\n  \n    select(pattern)\n  \n  \n  \n\
    Returns a collection reference by finding it through a CSS pattern\n\
    in the DOM. This collection can then be used for further method calls.\n\
    Examples:\n\n\n  page.select('p')                      # => $$('p');\n  page.select('p.welcome b').first      # => $$('p.welcome b').first();\n  page.select('p.welcome b').first.hide # => $$('p.welcome b').first().hide();\n\n\n\
    You can also use prototype enumerations with the collection. Observe:\n\n\n  # Generates: $$('#items li').each(function(value) { value.hide(); });\n  page.select('#items li').each do |value|\n    value.hide\n  end\n\n\n\
    Though you can call the block\n\
    param anything you want, they are always rendered in the javascript as\n\
    \xE2\x80\x98value, index.\xE2\x80\x99 Other enumerations, like collect() return the\n\
    697:           def select(pattern)\n\
    698:             JavaScriptElementCollectionProxy.new(self, pattern)\n\
    699:           end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#M000976
- :tinyuri: http://tinyurl.com/4ec4vf
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - DatabaseStatements
  :method: select
  :description: |+
    
        select(sql, name = nil)
    Returns an array of record hashes with the column names as keys and column
    values as values.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 150
    150:         def select(sql, name = nil)
    151:           raise NotImplementedError, "select is an abstract method"
    152:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#M001193
- :tinyuri: http://tinyurl.com/4x79sw
  :path: 
  - HTML
  - Selector
  :method: select
  :description: |+
    
        select(root) => array
    
    Selects and returns an array with all matching elements, beginning with one
    node and traversing through all children depth-first. Returns an empty
    array if no match is found.
    
    
    The root node may be any element in the document, or the document itself.
    
    
    For example:
    
    
      selector = HTML::Selector.new "input[type=text]"
      matches = selector.select(element)
      matches.each do |match|
        puts "Found text field with name #{match.attributes['name']}"
      end
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/vendor/html-scanner/html/selector.rb, line 453
    453:     def select(root)
    454:       matches = []
    455:       stack = [root]
    456:       while node = stack.pop
    457:         if node.tag? && subset = match(node, false)
    458:           subset.each do |match|
    459:             matches << match unless matches.any? { |item| item.equal?(match) }
    460:           end
    461:         elsif children = node.children
    462:           stack.concat children.reverse
    463:         end
    464:       end
    465:       matches
    466:     end
    
    
  :uri: http://api.rubyonrails.org/classes/HTML/Selector.html#M000168
- :tinyuri: http://tinyurl.com/3q4sro
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - DatabaseStatements
  :method: select_all
  :description: |+
    
        select_all(sql, name = nil)
    Returns an array of record hashes with the column names as keys and column
    values as values.
    
    
    
       # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 6
    6:       def select_all(sql, name = nil)
    7:         select(sql, name)
    8:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#M001173
- :tinyuri: http://tinyurl.com/52je26
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - QueryCache
  :method: select_all_with_query_cache
  :description: |+
    
        select_all_with_query_cache(*args)
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb, line 52
    52:       def select_all_with_query_cache(*args)
    53:         if @query_cache_enabled
    54:           cache_sql(args.first) { select_all_without_query_cache(*args) }
    55:         else
    56:           select_all_without_query_cache(*args)
    57:         end
    58:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/QueryCache.html#M001144
- :tinyuri: http://tinyurl.com/3vev3u
  :path: 
  - ActionView
  - Helpers
  - DateHelper
  :method: select_date
  :description: "\n  \n    select_date(date = Date.today, options = {})\n  \n  \n  \n\
    Returns a set of html select-tags (one for year, month, and day)\n\
    pre-selected with the date. It\xE2\x80\x98s possible to explicitly set\n\
    the order of the tags using the :order option with an array of\n\
    symbols :year, :month and :day in the desired\n\
    order. If you do not supply a Symbol, it will be appended onto the\n\
    :order passed in.\n\n\
    274:       def select_date(date = Date.today, options = {})\n\
    275:         options[:order] ||= []\n\
    276:         [:year, :month, :day].each { |o| options[:order].push(o) unless options[:order].include?(o) }\n\
    277: \n\
    278:         select_date = ''\n\
    279:         options[:order].each do |o|\n\
    280:           select_date << self.send(\"select_#{o}\", date, options)\n\
    281:         end\n\
    282:         select_date\n\
    283:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/DateHelper.html#M001013
- :tinyuri: http://tinyurl.com/3och2m
  :path: 
  - ActionView
  - Helpers
  - DateHelper
  :method: select_datetime
  :description: "\n  \n    select_datetime(datetime = Time.now, options = {})\n  \n  \n  \n\
    Returns a set of html select-tags (one for year, month, day, hour, and\n\
    minute) pre-selected with the datetime. It\xE2\x80\x98s also possible\n\
    to explicitly set the order of the tags using the :order option\n\
    with an array of symbols :year, :month and :day\n\
    in the desired order. If you do not supply a Symbol, it will be appended\n\
    onto the :order passed in. You can also add\n\
    :date_separator and :time_separator keys to the\n\
    options to control visual display of the elements.\n\n\
    243:       def select_datetime(datetime = Time.now, options = {})\n\
    244:         separator = options[:datetime_separator] || ''\n\
    245:         select_date(datetime, options) + separator + select_time(datetime, options)\n\
    246:        end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/DateHelper.html#M001012
- :tinyuri: http://tinyurl.com/5xr2a4
  :path: 
  - ActionView
  - Helpers
  - DateHelper
  :method: select_day
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/DateHelper.html#M001018
- :tinyuri: http://tinyurl.com/4ywlly
  :path: 
  - HTML
  - Selector
  :method: select_first
  :description: |+
    
        select_first(root)
    Similar to select but returns the first
    matching element. Returns nil if no element matches the selector.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/vendor/html-scanner/html/selector.rb, line 471
    471:     def select_first(root)
    472:       stack = [root]
    473:       while node = stack.pop
    474:         if node.tag? && subset = match(node, true)
    475:           return subset.first if !subset.empty?
    476:         elsif children = node.children
    477:           stack.concat children.reverse
    478:         end
    479:       end
    480:       nil
    481:     end
    
    
  :uri: http://api.rubyonrails.org/classes/HTML/Selector.html#M000169
- :tinyuri: http://tinyurl.com/3ru7jq
  :path: 
  - ActionView
  - Helpers
  - DateHelper
  :method: select_hour
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/DateHelper.html#M001017
- :tinyuri: http://tinyurl.com/4922m9
  :path: 
  - ActionView
  - Helpers
  - DateHelper
  :method: select_minute
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/DateHelper.html#M001016
- :tinyuri: http://tinyurl.com/3ee8mj
  :path: 
  - ActionView
  - Helpers
  - DateHelper
  :method: select_month
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/DateHelper.html#M001019
- :tinyuri: http://tinyurl.com/42lhqa
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - DatabaseStatements
  :method: select_one
  :description: |+
    
        select_one(sql, name = nil)
    Returns a record hash with the column names as keys and column values as
    values.
    
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 12
    12:       def select_one(sql, name = nil)
    13:         result = select_all(sql, name)
    14:         result.first if result
    15:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#M001174
- :tinyuri: http://tinyurl.com/3w3r96
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - DatabaseStatements
  :method: select_rows
  :description: |+
    
        select_rows(sql, name = nil)
    Returns an array of arrays containing the field values. Order is the same
    as that returned by columns.
    
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 33
    33:       def select_rows(sql, name = nil)
    34:         raise NotImplementedError, "select_rows is an abstract method"
    35:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#M001177
- :tinyuri: http://tinyurl.com/3pyd7v
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - MysqlAdapter
  :method: select_rows
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#M001234
- :tinyuri: http://tinyurl.com/5yfvfd
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - SQLiteAdapter
  :method: select_rows
  :description: |+
    
        select_rows(sql, name = nil)
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/sqlite_adapter.rb, line 149
    149:       def select_rows(sql, name = nil)
    150:         execute(sql, name).map do |row|
    151:           (0...(row.size / 2)).map { |i| row[i] }
    152:         end
    153:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#M001244
- :tinyuri: http://tinyurl.com/44dtzc
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - PostgreSQLAdapter
  :method: select_rows
  :description: |+
    
        select_rows(sql, name = nil)
    Executes a SELECT query and returns an array of rows. Each row is an array
    of field values.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 383
    383:       def select_rows(sql, name = nil)
    384:         select_raw(sql, name).last
    385:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#M001259
- :tinyuri: http://tinyurl.com/3joavp
  :path: 
  - ActionView
  - Helpers
  - DateHelper
  :method: select_second
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/DateHelper.html#M001015
- :tinyuri: http://tinyurl.com/2ryn2c
  :path: 
  - ActionView
  - Helpers
  - FormTagHelper
  :method: select_tag
  :description: |+
    
        select_tag(name, option_tags = nil, options = {})
    Creates a dropdown selection box, or if the :multiple option is
    set to true, a multiple choice selection box.
    
    
    Helpers::FormOptions can be used to create common select boxes such as
    countries, time zones, or associated records. option_tags is a
    string containing the option tags for the select box.
    
    Options
    
    :multiple - If set to true the selection will allow multiple
    choices.
    
    
    :disabled - If set to true, the user will not be able to use this
    input.
    
    
    Any other key creates standard HTML attributes for the tag.
    
    
    
    Examples
    
      select_tag "people", "<option>David</option>"
      # => <select id="people" name="people"><option>David</option></select>
    
      select_tag "count", "<option>1</option><option>2</option><option>3</option><option>4</option>"
      # => <select id="count" name="count"><option>1</option><option>2</option>
      #    <option>3</option><option>4</option></select>
    
      select_tag "colors", "<option>Red</option><option>Green</option><option>Blue</option>", :multiple => true
      # => <select id="colors" multiple="multiple" name="colors"><option>Red</option>
      #    <option>Green</option><option>Blue</option></select>
    
      select_tag "locations", "<option>Home</option><option selected="selected">Work</option><option>Out</option>"
      # => <select id="locations" name="locations"><option>Home</option><option selected='selected'>Work</option>
      #    <option>Out</option></select>
    
      select_tag "access", "<option>Read</option><option>Write</option>", :multiple => true, :class => 'form_input'
      # => <select class="form_input" id="access" multiple="multiple" name="access"><option>Read</option>
      #    <option>Write</option></select>
    
      select_tag "destination", "<option>NYC</option><option>Paris</option><option>Rome</option>", :disabled => true
      # => <select disabled="disabled" id="destination" name="destination"><option>NYC</option>
      #    <option>Paris</option><option>Rome</option></select>
    
    
    
        # File vendor/rails/actionpack/lib/action_view/helpers/form_tag_helper.rb, line 79
    79:       def select_tag(name, option_tags = nil, options = {})
    80:         content_tag :select, option_tags, { "name" => name, "id" => name }.update(options.stringify_keys)
    81:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/FormTagHelper.html#M001037
- :tinyuri: http://tinyurl.com/4t5t67
  :path: 
  - ActionView
  - Helpers
  - DateHelper
  :method: select_time
  :description: |+
    
        select_time(datetime = Time.now, options = {})
    Returns a set of html select-tags (one for hour and minute) You can set
    :time_separator key to format the output, and the
    :include_seconds option to include an input for seconds.
    
    Examples
    
      my_time = Time.now + 5.days + 7.hours + 3.minutes + 14.seconds
    
      # Generates a time select that defaults to the time in my_time
      select_time(my_time)
    
      # Generates a time select that defaults to the current time (no specified time)
      select_time()
    
      # Generates a time select that defaults to the time in my_time,
      # which has fields separated by ':'
      select_time(my_time, :time_separator => ':')
    
      # Generates a time select that defaults to the time in my_time,
      # that also includes an input for seconds
      select_time(my_time, :include_seconds => true)
    
      # Generates a time select that defaults to the time in my_time, that has fields
      # separated by ':' and includes an input for seconds
      select_time(my_time, :time_separator => ':', :include_seconds => true)
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/date_helper.rb, line 310
    310:       def select_time(datetime = Time.now, options = {})
    311:         separator = options[:time_separator] || ''
    312:         select_hour(datetime, options) + separator + select_minute(datetime, options) + (options[:include_seconds] ? separator + select_second(datetime, options) : '')
    313:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/DateHelper.html#M001014
- :tinyuri: http://tinyurl.com/4m3f4w
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - DatabaseStatements
  :method: select_value
  :description: |+
    
        select_value(sql, name = nil)
    Returns a single value from a record
    
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 18
    18:       def select_value(sql, name = nil)
    19:         if result = select_one(sql, name)
    20:           result.values.first
    21:         end
    22:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#M001175
- :tinyuri: http://tinyurl.com/47vk2g
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - DatabaseStatements
  :method: select_values
  :description: |+
    
        select_values(sql, name = nil)
    Returns an array of the values of the first column in a select:
    
    
      select_values("SELECT id FROM companies LIMIT 3") => [1,2,3]
    
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 26
    26:       def select_values(sql, name = nil)
    27:         result = select_rows(sql, name)
    28:         result.map { |v| v[0] }
    29:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#M001176
- :tinyuri: http://tinyurl.com/3f295u
  :path: 
  - ActionView
  - Helpers
  - DateHelper
  :method: select_year
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/DateHelper.html#M001020
- :tinyuri: http://tinyurl.com/3tf9l3
  :path: 
  - ActionView
  - CompiledTemplates
  :method: selector
  :description: |+
    
        selector(identifier, arg_names)
    Return the selector for this
    method or nil if it has not been compiled
    
    
      This method is also aliased as
      compiled?
    
    
    
        # File vendor/rails/actionpack/lib/action_view/compiled_templates.rb, line 28
    28:     def selector(identifier, arg_names)
    29:       key = full_key(identifier, arg_names)
    30:       method_names.key?(key) ? method_names[key] : nil
    31:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/CompiledTemplates.html#M001077
- :tinyuri: http://tinyurl.com/3mcsjs
  :path: 
  - ActionController
  - Streaming
  :method: send_data
  :description: "\n  \n    send_data(data, options = {})\n  \n  \n  \n\
    Send binary data to the user as a file download. May set content type,\n\
    apparent file name, and specify whether to show data inline or download as\n\
    an attachment.\n\n\n\
    Options:\n\n\n\
    :filename - Suggests a filename for the browser to use.\n\n\n\
    :type - specifies an HTTP content type. Defaults to\n\
    \xE2\x80\x98application/octet-stream\xE2\x80\x99.\n\n\n\
    :disposition - specifies whether the file will be shown inline or\n\
    downloaded. Valid values are \xE2\x80\x98inline\xE2\x80\x99 and\n\
    \xE2\x80\x98attachment\xE2\x80\x99 (default).\n\n\n\
    :status - specifies the status code to send with the response.\n\
    Defaults to \xE2\x80\x98200 OK\xE2\x80\x99.\n\n\n\n\n\
    Generic data download:\n\n\n  send_data buffer\n\n\n\
    Download a dynamically-generated tarball:\n\n\n  send_data generate_tgz('dir'), :filename => 'dir.tgz'\n\n\n\
    Display an image Active Record in the browser:\n\n\n  send_data image.data, :type => image.content_type, :disposition => 'inline'\n\n\n\
    See send_file for more\n\
    107:       def send_data(data, options = {}) #:doc:\n\
    108:         logger.info \"Sending data #{options[:filename]}\" unless logger.nil?\n\
    109:         send_file_headers! options.merge(:length => data.size)\n\
    110:         @performed_render = false\n\
    111:         render :status => options[:status], :text => data\n\
    112:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionController/Streaming.html#M000229
- :tinyuri: http://tinyurl.com/2enhul
  :path: 
  - ActionController
  - Streaming
  :method: send_file
  :description: "\n  \n    send_file(path, options = {})\n  \n  \n  \n\
    Sends the file by streaming it 4096 bytes at a time. This way the whole\n\
    file doesn\xE2\x80\x98t need to be read into memory at once. This makes it\n\
    feasible to send even large files.\n\n\n\
    Be careful to sanitize the path parameter if it coming from a web page. send_file(params[:path]) allows a\n\
    malicious user to download any file on your server.\n\n\n\
    Options:\n\n\n\
    :filename - suggests a filename for the browser to use. Defaults\n\
    to File.basename(path).\n\n\n\
    :type - specifies an HTTP content type. Defaults to\n\
    \xE2\x80\x98application/octet-stream\xE2\x80\x99.\n\n\n\
    :disposition - specifies whether the file will be shown inline or\n\
    downloaded. Valid values are \xE2\x80\x98inline\xE2\x80\x99 and\n\
    \xE2\x80\x98attachment\xE2\x80\x99 (default).\n\n\n\
    :stream - whether to send the file to the user agent as it is read\n\
    (true) or to read the entire file before sending (false). Defaults to true.\n\n\n\
    :buffer_size - specifies size (in bytes) of the buffer used to\n\
    stream the file. Defaults to 4096.\n\n\n\
    :status - specifies the status code to send with the response.\n\
    Defaults to \xE2\x80\x98200 OK\xE2\x80\x99.\n\n\n\
    :url_based_filename - set to true if you want the browser guess\n\
    the filename from the URL, which is necessary for i18n filenames on certain\n\
    browsers (setting :filename overrides this option).\n\n\n\n\n\
    The default Content-Type and Content-Disposition headers are set to\n\
    download arbitrary binary files in as many browsers as possible. IE\n\
    versions 4, 5, 5.5, and 6 are all known to have a variety of quirks\n\
    (especially when downloading over SSL).\n\n\n\
    Simple download:\n\n\n  send_file '/path/to.zip'\n\n\n\
    Show a JPEG in the browser:\n\n\n  send_file '/path/to.jpeg', :type => 'image/jpeg', :disposition => 'inline'\n\n\n\
    Show a 404 page in the browser:\n\n\n  send_file '/path/to/404.html', :type => 'text/html; charset=utf-8', :status => 404\n\n\n\
    Read about the other Content-* HTTP headers if you\xE2\x80\x98d like to provide\n\
    the user with more information (such as Content-Description). www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11\n\n\n\
    Also be aware that the document may be cached by proxies and browsers. The\n\
    Pragma and Cache-Control headers declare how the file may be cached by\n\
    intermediaries. They default to require clients to validate with the server\n\
    before releasing cached responses. See www.mnot.net/cache_docs/ for an\n\
    overview of web caching and www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\n\
    61:       def send_file(path, options = {}) #:doc:\n\
    62:         raise MissingFile, \"Cannot read file #{path}\" unless File.file?(path) and File.readable?(path)\n\
    63: \n\
    64:         options[:length]   ||= File.size(path)\n\
    65:         options[:filename] ||= File.basename(path) unless options[:url_based_filename]\n\
    66:         send_file_headers! options\n\
    67: \n\
    68:         @performed_render = false\n\
    69: \n\
    70:         if options[:stream]\n\
    71:           render :status => options[:status], :text => Proc.new { |response, output|\n\
    72:             logger.info \"Streaming file #{path}\" unless logger.nil?\n\
    73:             len = options[:buffer_size] || 4096\n\
    74:             File.open(path, 'rb') do |file|\n\
    75:               while buf = file.read(len)\n\
    76:                 output.write(buf)\n\
    77:               end\n\
    78:             end\n\
    79:           }\n\
    80:         else\n\
    81:           logger.info \"Sending file #{path}\" unless logger.nil?\n\
    82:           File.open(path, 'rb') { |file| render :status => options[:status], :text => file.read }\n\
    83:         end\n\
    84:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionController/Streaming.html#M000228
- :tinyuri: http://tinyurl.com/4xxx57
  :path: 
  - ActiveRecord
  - Base
  :method: serialize
  :description: |+
    
        serialize(attr_name, class_name = Object)
    If you have an attribute that needs to be saved to the database as an
    object, and retrieved as the same object, then specify the name of that
    attribute using this method and it will be handled automatically. The
    serialization is done through YAML. If class_name is specified,
    the serialized object must be of that class on retrieval or SerializationTypeMismatch
    will be raised.
    
    Options
    
    attr_name The field name that should be serialized
    class_name Optional, class name that the object type should be
    equal to
    
    Example
    
      # Serialize a preferences attribute
      class User
        serialize :preferences
      end
    
    
    
         # File vendor/rails/activerecord/lib/active_record/base.rb, line 887
    887:       def serialize(attr_name, class_name = Object)
    888:         serialized_attributes[attr_name.to_s] = class_name
    889:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001394
- :tinyuri: http://tinyurl.com/472e6f
  :path: 
  - ActiveRecord
  - Base
  :method: serialized_attributes
  :description: |+
    
        serialized_attributes()
    Returns a hash of all the attributes that have been specified for
    serialization as keys and their class restriction as values.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/base.rb, line 892
    892:       def serialized_attributes
    893:         read_inheritable_attribute("attr_serialized") or write_inheritable_attribute("attr_serialized", {})
    894:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001395
- :tinyuri: http://tinyurl.com/4ccgfl
  :path: 
  - ActionController
  - AbstractRequest
  :method: server_software
  :description: |+
    
        server_software()
    Returns the lowercase name of the HTTP server software.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/request.rb, line 151
    151:     def server_software
    152:       (@env['SERVER_SOFTWARE'] && /^([a-zA-Z]+)/ =~ @env['SERVER_SOFTWARE']) ? $1.downcase : nil
    153:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/AbstractRequest.html#M000409
- :tinyuri: http://tinyurl.com/3o57bu
  :path: 
  - ActionController
  - TestProcess
  :method: session
  :description: |+
    
        session()
    
    
         # File vendor/rails/actionpack/lib/action_controller/test_process.rb, line 424
    424:     def session
    425:       @response.session
    426:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/TestProcess.html#M000195
- :tinyuri: http://tinyurl.com/3kkgrq
  :path: 
  - ActionController
  - SessionManagement
  - ClassMethods
  :method: session
  :description: |+
    
        session(*args)
    Specify how sessions ought to be managed for a subset of the actions on the
    controller. Like filters, you can specify :only and
    :except clauses to restrict the subset, otherwise options apply to
    all actions on this controller.
    
    
    The session options are
    inheritable, as well, so if you specify them in a parent controller, they
    apply to controllers that extend the parent.
    
    
    Usage:
    
    
      # turn off session management for all actions.
      session :off
    
      # turn off session management for all actions _except_ foo and bar.
      session :off, :except => %w(foo bar)
    
      # turn off session management for only the foo and bar actions.
      session :off, :only => %w(foo bar)
    
      # the session will only work over HTTPS, but only for the foo action
      session :only => :foo, :session_secure => true
    
      # the session will only be disabled for 'foo', and only if it is
      # requested as a web service
      session :off, :only => :foo,
              :if => Proc.new { |req| req.parameters[:ws] }
    
      # the session will be disabled for non html/ajax requests
      session :off,
        :if => Proc.new { |req| !(req.format.html? || req.format.js?) }
    
    
    All session options described for
    ActionController::Base.process_cgi are
    valid arguments.
    
    
      This method is also aliased as
      session=
    
    
    
        # File vendor/rails/actionpack/lib/action_controller/session_management.rb, line 72
    72:       def session(*args)
    73:         options = args.extract_options!
    74: 
    75:         options[:disabled] = true if !args.empty?
    76:         options[:only] = [*options[:only]].map { |o| o.to_s } if options[:only]
    77:         options[:except] = [*options[:except]].map { |o| o.to_s } if options[:except]
    78:         if options[:only] && options[:except]
    79:           raise ArgumentError, "only one of either :only or :except are allowed"
    80:         end
    81: 
    82:         write_inheritable_array("session_options", [options])
    83:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/SessionManagement/ClassMethods.html#M000273
- :tinyuri: http://tinyurl.com/4ypbu9
  :path: 
  - ActionController
  - SessionManagement
  - ClassMethods
  :method: session=
  :description: |
    
        session=(*args)
    Alias for session
    
  :uri: http://api.rubyonrails.org/classes/ActionController/SessionManagement/ClassMethods.html#M000274
- :tinyuri: http://tinyurl.com/48rpvh
  :path: 
  - ActionController
  - Base
  :method: session_enabled?
  :description: |+
    
        session_enabled?()
    
    
         # File vendor/rails/actionpack/lib/action_controller/base.rb, line 637
    637:       def session_enabled?
    638:         request.session_options && request.session_options[:disabled] != false
    639:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Base.html#M000447
- :tinyuri: http://tinyurl.com/4a5z92
  :path: 
  - ActionController
  - SessionManagement
  - ClassMethods
  :method: session_options
  :description: |+
    
        session_options()
    Returns the hash used to configure the session. Example use:
    
    
      ActionController::Base.session_options[:session_secure] = true # session only available over HTTPS
    
    
    
        # File vendor/rails/actionpack/lib/action_controller/session_management.rb, line 35
    35:       def session_options
    36:         ActionController::CgiRequest::DEFAULT_SESSION_OPTIONS
    37:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/SessionManagement/ClassMethods.html#M000272
- :tinyuri: http://tinyurl.com/3lv95b
  :path: 
  - ActionController
  - SessionManagement
  - ClassMethods
  :method: session_store
  :description: |+
    
        session_store()
    Returns the session store class
    currently used.
    
    
    
        # File vendor/rails/actionpack/lib/action_controller/session_management.rb, line 28
    28:       def session_store
    29:         ActionController::CgiRequest::DEFAULT_SESSION_OPTIONS[:database_manager]
    30:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/SessionManagement/ClassMethods.html#M000271
- :tinyuri: http://tinyurl.com/3zdzl7
  :path: 
  - ActionController
  - SessionManagement
  - ClassMethods
  :method: session_store=
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionController/SessionManagement/ClassMethods.html#M000270
- :tinyuri: http://tinyurl.com/3pfwmf
  :path: 
  - Rails
  - Initializer
  :method: set_autoload_paths
  :description: |+
    
        set_autoload_paths()
    Set the paths from which Rails will
    automatically load source files, and the load_once paths.
    
    
    
         # File vendor/rails/railties/lib/initializer.rb, line 136
    136:     def set_autoload_paths
    137:       Dependencies.load_paths = configuration.load_paths.uniq
    138:       Dependencies.load_once_paths = configuration.load_once_paths.uniq
    139: 
    140:       extra = Dependencies.load_once_paths - Dependencies.load_paths
    141:       unless extra.empty?
    142:         abort "load_once_paths must be a subset of the load_paths.\nExtra items in load_once_paths: \#{extra * ','}\n"
    143:       end
    144: 
    145:       # Freeze the arrays so future modifications will fail rather than do nothing mysteriously
    146:       configuration.load_once_paths.freeze
    147:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Initializer.html#M001576
- :tinyuri: http://tinyurl.com/5yuhtu
  :path: 
  - ActiveRecord
  - Base
  :method: set_inheritance_column
  :description: |+
    
        set_inheritance_column(value = nil, &block)
    Sets the name of the inheritance column to use to the given value, or (if
    the value # is nil or false) to the value returned by the given block.
    
    
    Example:
    
    
      class Project < ActiveRecord::Base
        set_inheritance_column do
          original_inheritance_column + "_id"
        end
      end
    
    
    
          # File vendor/rails/activerecord/lib/active_record/base.rb, line 1027
    1027:       def set_inheritance_column(value = nil, &block)
    1028:         define_attr_method :inheritance_column, value, &block
    1029:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001401
- :tinyuri: http://tinyurl.com/4jxb2c
  :path: 
  - Rails
  - Initializer
  :method: set_load_path
  :description: |+
    
        set_load_path()
    Set the $LOAD_PATH based on the value of Configuration#load_paths.
    Duplicates are removed.
    
    
    
         # File vendor/rails/railties/lib/initializer.rb, line 128
    128:     def set_load_path
    129:       load_paths = configuration.load_paths + configuration.framework_paths
    130:       load_paths.reverse_each { |dir| $LOAD_PATH.unshift(dir) if File.directory?(dir) }
    131:       $LOAD_PATH.uniq!
    132:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Initializer.html#M001575
- :tinyuri: http://tinyurl.com/5x564s
  :path: 
  - ActiveRecord
  - Locking
  - Optimistic
  - ClassMethods
  :method: set_locking_column
  :description: |+
    
        set_locking_column(value = nil, &block)
    Set the column to use for optimistic locking. Defaults to lock_version.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/locking/optimistic.rb, line 116
    116:         def set_locking_column(value = nil, &block)
    117:           define_attr_method :locking_column, value, &block
    118:           value
    119:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#M001110
- :tinyuri: http://tinyurl.com/4yapfp
  :path: 
  - ActiveRecord
  - Base
  :method: set_primary_key
  :description: |+
    
        set_primary_key(value = nil, &block)
    Sets the name of the primary key column to use to the given value, or (if
    the value is nil or false) to the value returned by the given block.
    
    
    Example:
    
    
      class Project < ActiveRecord::Base
        set_primary_key "sysid"
      end
    
    
    
          # File vendor/rails/activerecord/lib/active_record/base.rb, line 1011
    1011:       def set_primary_key(value = nil, &block)
    1012:         define_attr_method :primary_key, value, &block
    1013:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001400
- :tinyuri: http://tinyurl.com/53mtlw
  :path: 
  - Rails
  - Configuration
  :method: set_root_path!
  :description: |+
    
        set_root_path!()
    Set the root_path to RAILS_ROOT and canonicalize it.
    
    
    
         # File vendor/rails/railties/lib/initializer.rb, line 484
    484:     def set_root_path!
    485:       raise 'RAILS_ROOT is not set' unless defined?(::RAILS_ROOT)
    486:       raise 'RAILS_ROOT is not a directory' unless File.directory?(::RAILS_ROOT)
    487: 
    488:       @root_path =
    489:         # Pathname is incompatible with Windows, but Windows doesn't have
    490:         # real symlinks so File.expand_path is safe.
    491:         if RUBY_PLATFORM =~ /(:?mswin|mingw)/
    492:           File.expand_path(::RAILS_ROOT)
    493: 
    494:         # Otherwise use Pathname#realpath which respects symlinks.
    495:         else
    496:           Pathname.new(::RAILS_ROOT).realpath.to_s
    497:         end
    498:       
    499:       Object.const_set(:RELATIVE_RAILS_ROOT, ::RAILS_ROOT.dup) unless defined?(::RELATIVE_RAILS_ROOT)
    500:       ::RAILS_ROOT.replace @root_path
    501:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Configuration.html#M001607
- :tinyuri: http://tinyurl.com/3fpyx4
  :path: 
  - ActiveRecord
  - Base
  :method: set_sequence_name
  :description: |+
    
        set_sequence_name(value = nil, &block)
    Sets the name of the sequence to use when generating ids to the given
    value, or (if the value is nil or false) to the value returned by the given
    block. This is required for Oracle and is useful for any database which
    relies on sequences for primary key generation.
    
    
    If a sequence name is not explicitly set when using Oracle or Firebird, it
    will default to the commonly used pattern of: #{table_name}_seq
    
    
    If a sequence name is not explicitly set when using PostgreSQL, it will
    discover the sequence corresponding to your primary key for you.
    
    
    Example:
    
    
      class Project < ActiveRecord::Base
        set_sequence_name "projectseq"   # default would have been "project_seq"
      end
    
    
    
          # File vendor/rails/activerecord/lib/active_record/base.rb, line 1048
    1048:       def set_sequence_name(value = nil, &block)
    1049:         define_attr_method :sequence_name, value, &block
    1050:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001402
- :tinyuri: http://tinyurl.com/3ttt2k
  :path: 
  - ActiveRecord
  - Base
  :method: set_table_name
  :description: |+
    
        set_table_name(value = nil, &block)
    Sets the table name to use to the given value, or (if the value is nil or
    false) to the value returned by the given block.
    
    
    Example:
    
    
      class Project < ActiveRecord::Base
        set_table_name "project"
      end
    
    
    
         # File vendor/rails/activerecord/lib/active_record/base.rb, line 997
    997:       def set_table_name(value = nil, &block)
    998:         define_attr_method :table_name, value, &block
    999:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001399
- :tinyuri: http://tinyurl.com/6mzypo
  :path: 
  - ActionController
  - TestCase
  :method: setup
  :description: |+
    
        setup()
    
    
        # File vendor/rails/actionpack/lib/action_controller/test_case.rb, line 47
    47:     def setup
    48:       @controller = self.class.controller_class.new
    49:       @request    = TestRequest.new
    50:       @response   = TestResponse.new
    51:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/TestCase.html#M000378
- :tinyuri: http://tinyurl.com/3mrfyc
  :path: 
  - ActionView
  - Helpers
  - PrototypeHelper
  - JavaScriptGenerator
  - GeneratorMethods
  :method: show
  :description: |+
    
        show(*ids)
    Shows hidden DOM elements with the given ids.
    
    
    Example:
    
    
     # Show a few people
     # Generates: ["person_6", "person_13", "person_223"].each(Element.show);
     page.show 'person_6', 'person_13', 'person_223'
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/prototype_helper.rb, line 798
    798:           def show(*ids)
    799:             loop_on_multiple_args 'Element.show', ids
    800:           end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#M000981
- :tinyuri: http://tinyurl.com/43wa3s
  :path: 
  - ActionController
  - RequestProfiler
  :method: show_profile_results
  :description: |+
    
        show_profile_results(results)
    
    
         # File vendor/rails/actionpack/lib/action_controller/request_profiler.rb, line 126
    126:       def show_profile_results(results)
    127:         File.open "#{RAILS_ROOT}/tmp/profile-graph.html", 'w' do |file|
    128:           RubyProf::GraphHtmlPrinter.new(results).print(file)
    129:           `#{options[:open] % file.path}` if options[:open]
    130:         end
    131: 
    132:         File.open "#{RAILS_ROOT}/tmp/profile-flat.txt", 'w' do |file|
    133:           RubyProf::FlatPrinter.new(results).print(file)
    134:           `#{options[:open] % file.path}` if options[:open]
    135:         end
    136:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/RequestProfiler.html#M000388
- :tinyuri: http://tinyurl.com/4w9x8r
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - MysqlAdapter
  :method: show_variable
  :description: "\n  \n    show_variable(name)\n  \n  \n  \n\
    452:       def show_variable(name)\n\
    453:         variables = select_all(\"SHOW VARIABLES LIKE '#{name}'\")\n\
    454:         variables.first['Value'] unless variables.empty?\n\
    455:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#M001241
- :tinyuri: http://tinyurl.com/4ejem7
  :path: 
  - ActiveRecord
  - Base
  :method: silence
  :description: |+
    
        silence() {|| ...}
    Silences the logger for the duration of the block.
    
    
    
          # File vendor/rails/activerecord/lib/active_record/base.rb, line 1196
    1196:       def silence
    1197:         old_logger_level, logger.level = logger.level, Logger::ERROR if logger
    1198:         yield
    1199:       ensure
    1200:         logger.level = old_logger_level if logger
    1201:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001412
- :tinyuri: http://tinyurl.com/4xejjo
  :path: 
  - ActiveSupport
  - BufferedLogger
  :method: silence
  :description: |+
    
        silence(temporary_level = ERROR) {|self| ...}
    Silences the logger for the duration of the block.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/buffered_logger.rb, line 21
    21:     def silence(temporary_level = ERROR)
    22:       if silencer
    23:         begin
    24:           old_logger_level, self.level = level, temporary_level
    25:           yield self
    26:         ensure
    27:           self.level = old_logger_level
    28:         end
    29:       else
    30:         yield self
    31:       end
    32:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/BufferedLogger.html#M000764
- :tinyuri: http://tinyurl.com/4llsnf
  :path: 
  - Logger
  :method: silence
  :description: |+
    
        silence(temporary_level = Logger::ERROR) {|self| ...}
    Silences the logger for the duration of the block.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/clean_logger.rb, line 22
    22:   def silence(temporary_level = Logger::ERROR)
    23:     if silencer
    24:       begin
    25:         old_logger_level, self.level = level, temporary_level
    26:         yield self
    27:       ensure
    28:         self.level = old_logger_level
    29:       end
    30:     else
    31:       yield self
    32:     end
    33:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Logger.html#M000123
- :tinyuri: http://tinyurl.com/47hxkw
  :path: 
  - ActionController
  - Benchmarking
  - ClassMethods
  :method: silence
  :description: |+
    
        silence() {|| ...}
    Silences the logger for the duration of the block.
    
    
    
        # File vendor/rails/actionpack/lib/action_controller/benchmarking.rb, line 35
    35:       def silence
    36:         old_logger_level, logger.level = logger.level, Logger::ERROR if logger
    37:         yield
    38:       ensure
    39:         logger.level = old_logger_level if logger
    40:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Benchmarking/ClassMethods.html#M000291
- :tinyuri: http://tinyurl.com/52qnpv
  :path: 
  - Kernel
  :method: silence_stream
  :description: |+
    
        silence_stream(stream) {|| ...}
    Silences any stream for the duration of the block.
    
    
      silence_stream(STDOUT) do
        puts 'This will never be seen'
      end
    
      puts 'But this will'
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/kernel/reporting.rb, line 36
    36:   def silence_stream(stream)
    37:     old_stream = stream.dup
    38:     stream.reopen(RUBY_PLATFORM =~ /mswin/ ? 'NUL:' : '/dev/null')
    39:     stream.sync = true
    40:     yield
    41:   ensure
    42:     stream.reopen(old_stream)
    43:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Kernel.html#M001641
- :tinyuri: http://tinyurl.com/3vm7rm
  :path: 
  - Kernel
  :method: silence_warnings
  :description: |+
    
        silence_warnings() {|| ...}
    Sets $VERBOSE to nil for the duration of the block and back to its original
    value afterwards.
    
    
      silence_warnings do
        value = noisy_call # no warning voiced
      end
    
      noisy_call # warning voiced
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/kernel/reporting.rb, line 9
     9:   def silence_warnings
    10:     old_verbose, $VERBOSE = $VERBOSE, nil
    11:     yield
    12:   ensure
    13:     $VERBOSE = old_verbose
    14:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Kernel.html#M001639
- :tinyuri: http://tinyurl.com/39on8q
  :path: 
  - ActionView
  - Helpers
  - TextHelper
  :method: simple_format
  :description: |+
    
        simple_format(text)
    Returns text transformed into HTML using simple formatting rules.
    Two or more consecutive newlines(\n\n) are considered as a
    paragraph and wrapped in <p> tags. One newline (\n)
    is considered as a linebreak and a <br /> tag is appended.
    This method does not remove the newlines from the text.
    
    Examples
    
      my_text = """Here is some basic text...
                ...with a line break."""
    
      simple_format(my_text)
      # => "<p>Here is some basic text...<br />...with a line break.</p>"
    
      more_text = """We want to put a paragraph...
    
                  ...right there."""
    
      simple_format(more_text)
      # => "<p>We want to put a paragraph...</p><p>...right there.</p>"
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/text_helper.rb, line 275
    275:       def simple_format(text)
    276:         content_tag 'p', text.to_s.
    277:           gsub(/\r\n?/, "\n").                    # \r\n and \r -> \n
    278:           gsub(/\n\n+/, "</p>\n\n<p>").           # 2+ newline  -> paragraph
    279:           gsub(/([^\n]\n)(?=[^\n])/, '\1<br />')  # 1 newline   -> br
    280:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/TextHelper.html#M001057
- :tinyuri: http://tinyurl.com/3ojqqe
  :path: 
  - HTML
  - Selector
  :method: simple_selector
  :description: 
  :uri: http://api.rubyonrails.org/classes/HTML/Selector.html#M000171
- :tinyuri: http://tinyurl.com/5yycxt
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Numeric
  - Time
  :method: since
  :description: |+
    
        since(time = ::Time.now)
    Reads best with argument: 10.minutes.since(time)
    
    
      This method is also aliased as
      from_now
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/numeric/time.rb, line 82
    82:         def since(time = ::Time.now)
    83:           time + self
    84:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Numeric/Time.html#M000656
- :tinyuri: http://tinyurl.com/3l239a
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Calculations
  :method: since
  :description: |+
    
        since(seconds)
    Returns a new Time representing the time a number of seconds since the instance time, this is
    basically a wrapper around the Numeric extension. Do not use this method in combination with x.months, use months_since instead!
    
    
      This method is also aliased as
      in
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/time/calculations.rb, line 91
    91:         def since(seconds)
    92:           initial_dst = self.dst? ? 1 : 0
    93:           f = seconds.since(self)
    94:           final_dst   = f.dst? ? 1 : 0
    95:           (seconds.abs >= 86400 && initial_dst != final_dst) ? f + (initial_dst - final_dst).hours : f
    96:         rescue
    97:           self.to_datetime.since(seconds)          
    98:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Calculations.html#M000578
- :tinyuri: http://tinyurl.com/4gbqe9
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Date
  - Calculations
  :method: since
  :description: |+
    
        since(seconds)
    Converts Date to a Time (or DateTime if necessary) with the time portion
    set to the beginning of the day (0:00) and then adds the specified number
    of seconds
    
    
      This method is also aliased as
      in
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/date/calculations.rb, line 36
    36:         def since(seconds)
    37:           to_time.since(seconds)
    38:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Date/Calculations.html#M000681
- :tinyuri: http://tinyurl.com/426vbq
  :path: 
  - ActiveSupport
  - CoreExtensions
  - DateTime
  - Calculations
  :method: since
  :description: |+
    
        since(seconds)
    Returns a new DateTime representing the time a number of seconds since the instance time Do not use
    this method in combination with
    x.months, use months_since instead!
    
    
      This method is also aliased as
      in
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/date_time/calculations.rb, line 57
    57:         def since(seconds)
    58:           self + Rational(seconds.round, 86400)
    59:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/DateTime/Calculations.html#M000726
- :tinyuri: http://tinyurl.com/3s4haz
  :path: 
  - ActiveSupport
  - Duration
  :method: since
  :description: |+
    
        since(time = ::Time.now)
    Calculates a new Time or Date that is as far in the future as this Duration represents.
    
    
      This method is also aliased as
      from_now
    
    
    
        # File vendor/rails/activesupport/lib/active_support/duration.rb, line 54
    54:     def since(time = ::Time.now)
    55:       sum(1, time)
    56:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Duration.html#M000774
- :tinyuri: http://tinyurl.com/499cdy
  :path: 
  - Inflector
  - Inflections
  :method: singular
  :description: |+
    
        singular(rule, replacement)
    Specifies a new singularization rule
    and its replacement. The rule can either be a string or a regular
    expression. The replacement should always be a string that may include
    references to the matched data from the rule.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/inflector.rb, line 39
    39:     def singular(rule, replacement)
    40:       @singulars.insert(0, [rule, replacement])
    41:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Inflector/Inflections.html#M001632
- :tinyuri: http://tinyurl.com/3eakan
  :path: 
  - ActionController
  - RecordIdentifier
  :method: singular_class_name
  :description: |+
    
        singular_class_name(record_or_class)
    Returns the singular class name of a record or class. Examples:
    
    
      singular_class_name(post)             # => "post"
      singular_class_name(Highrise::Person) # => "highrise_person"
    
    
    
        # File vendor/rails/actionpack/lib/action_controller/record_identifier.rb, line 82
    82:     def singular_class_name(record_or_class)
    83:       class_from_record_or_class(record_or_class).name.underscore.tr('/', '_')
    84:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/RecordIdentifier.html#M000280
- :tinyuri: http://tinyurl.com/3ldybv
  :path: 
  - ActiveSupport
  - CoreExtensions
  - String
  - Inflections
  :method: singularize
  :description: |+
    
        singularize()
    The reverse of pluralize, returns
    the singular form of a word in a string.
    
    
    Examples
    
    
      "posts".singularize #=> "post"
      "octopi".singularize #=> "octopus"
      "sheep".singluarize #=> "sheep"
      "word".singluarize #=> "word"
      "the blue mailmen".singularize #=> "the blue mailman"
      "CamelOctopi".singularize #=> "CamelOctopus"
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/string/inflections.rb, line 32
    32:         def singularize
    33:           Inflector.singularize(self)
    34:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/String/Inflections.html#M000741
- :tinyuri: http://tinyurl.com/42htee
  :path: 
  - Inflector
  :method: singularize
  :description: |+
    
        singularize(word)
    The reverse of pluralize, returns the
    singular form of a word in a string.
    
    
    Examples
    
    
      "posts".singularize #=> "post"
      "octopi".singularize #=> "octopus"
      "sheep".singluarize #=> "sheep"
      "word".singluarize #=> "word"
      "the blue mailmen".singularize #=> "the blue mailman"
      "CamelOctopi".singularize #=> "CamelOctopus"
    
    
    
         # File vendor/rails/activesupport/lib/active_support/inflector.rb, line 126
    126:   def singularize(word)
    127:     result = word.to_s.dup
    128: 
    129:     if inflections.uncountables.include?(result.downcase)
    130:       result
    131:     else
    132:       inflections.singulars.each { |(rule, replacement)| break if result.gsub!(rule, replacement) }
    133:       result
    134:     end
    135:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Inflector.html#M001618
- :tinyuri: http://tinyurl.com/4d5xwq
  :path: 
  - ActiveResource
  - Base
  :method: site
  :description: "\n  \n    site()\n  \n  \n  \n\
    155:       def site\n\
    156:         if defined?(@site)\n\
    157:           @site\n\
    158:         elsif superclass != Object && superclass.site\n\
    159:           superclass.site.dup.freeze\n\
    160:         end\n\
    161:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Base.html#M000825
- :tinyuri: http://tinyurl.com/3ouot2
  :path: 
  - ActiveResource
  - Connection
  :method: site=
  :description: |+
    
        site=(site)
    Set URI for remote service.
    
    
    
        # File vendor/rails/activeresource/lib/active_resource/connection.rb, line 76
    76:     def site=(site)
    77:       @site = site.is_a?(URI) ? site : URI.parse(site)
    78:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Connection.html#M000869
- :tinyuri: http://tinyurl.com/5yca3h
  :path: 
  - ActiveResource
  - Base
  :method: site=
  :description: "\n  \n    site=(site)\n  \n  \n  \n\
    Sets the URI of the REST resources to map for this class to the value in\n\
    165:       def site=(site)\n\
    166:         @connection = nil\n\
    167:         @site = site.nil? ? nil : create_site_uri_from(site)\n\
    168:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Base.html#M000826
- :tinyuri: http://tinyurl.com/3u7r58
  :path: 
  - ActiveRecord
  - Errors
  :method: size
  :description: |+
    
        size()
    Returns the total number of errors added. Two errors added to the same
    attribute will be counted as such.
    
    
      This method is also aliased as
      count
      length
    
    
    
         # File vendor/rails/activerecord/lib/active_record/validations.rb, line 197
    197:     def size
    198:       @errors.values.inject(0) { |error_count, attribute| error_count + attribute.size }
    199:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Errors.html#M001358
- :tinyuri: http://tinyurl.com/4phha7
  :path: 
  - ActiveSupport
  - Multibyte
  - Handlers
  - UTF8Handler
  :method: size
  :description: |+
    
        size(str)
    Returns the number of codepoints in the string
    
    
    
         # File vendor/rails/activesupport/lib/active_support/multibyte/handlers/utf8_handler.rb, line 237
    237:       def size(str)
    238:         u_unpack(str).size
    239:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Handlers/UTF8Handler.html#M000524
- :tinyuri: http://tinyurl.com/4zf38w
  :path: 
  - ActiveResource
  - Errors
  :method: size
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Errors.html#M000810
- :tinyuri: http://tinyurl.com/44a86g
  :path: 
  - ActionController
  - Filters
  - ClassMethods
  :method: skip_after_filter
  :description: |+
    
        skip_after_filter(*filters)
    Removes the specified filters from the after filter chain. Note
    that this only works for skipping method-reference filters, not procs. This
    is especially useful for managing the chain in inheritance hierarchies
    where only one out of many sub-controllers need a different hierarchy.
    
    
    You can control the actions to skip the filter for with the :only
    and :except options, just like when you apply the filters.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/filters.rb, line 332
    332:       def skip_after_filter(*filters)
    333:         skip_filter_in_chain(*filters, &:after?)
    334:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Filters/ClassMethods.html#M000320
- :tinyuri: http://tinyurl.com/4xphmc
  :path: 
  - ActionController
  - Filters
  - ClassMethods
  :method: skip_before_filter
  :description: |+
    
        skip_before_filter(*filters)
    Removes the specified filters from the before filter chain. Note
    that this only works for skipping method-reference filters, not procs. This
    is especially useful for managing the chain in inheritance hierarchies
    where only one out of many sub-controllers need a different hierarchy.
    
    
    You can control the actions to skip the filter for with the :only
    and :except options, just like when you apply the filters.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/filters.rb, line 322
    322:       def skip_before_filter(*filters)
    323:         skip_filter_in_chain(*filters, &:before?)
    324:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Filters/ClassMethods.html#M000319
- :tinyuri: http://tinyurl.com/4lwqq3
  :path: 
  - ActionController
  - Filters
  - ClassMethods
  :method: skip_filter
  :description: |+
    
        skip_filter(*filters)
    Removes the specified filters from the filter chain. This only works for
    method reference (symbol) filters, not procs. This method is different from
    skip_after_filter and skip_before_filter in that it will
    match any before, after or yielding around filter.
    
    
    You can control the actions to skip the filter for with the :only
    and :except options, just like when you apply the filters.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/filters.rb, line 342
    342:       def skip_filter(*filters)
    343:         skip_filter_in_chain(*filters)
    344:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Filters/ClassMethods.html#M000321
- :tinyuri: http://tinyurl.com/47rvnk
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Hash
  - Slice
  :method: slice
  :description: |+
    
        slice(*keys)
    Returns a new hash with only the given keys.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/hash/slice.rb, line 16
    16:         def slice(*keys)
    17:           allowed = Set.new(respond_to?(:convert_key) ? keys.map { |key| convert_key(key) } : keys)
    18:           reject { |key,| !allowed.include?(key) }
    19:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Hash/Slice.html#M000611
- :tinyuri: http://tinyurl.com/534lsj
  :path: 
  - ActiveSupport
  - Multibyte
  - Handlers
  - UTF8Handler
  :method: slice
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Handlers/UTF8Handler.html#M000526
- :tinyuri: http://tinyurl.com/4aggbn
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Hash
  - Slice
  :method: slice!
  :description: |+
    
        slice!(*keys)
    Replaces the hash with only the given keys.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/hash/slice.rb, line 22
    22:         def slice!(*keys)
    23:           replace(slice(*keys))
    24:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Hash/Slice.html#M000612
- :tinyuri: http://tinyurl.com/3tbl97
  :path: 
  - ActionView
  - Helpers
  - PrototypeHelper
  - JavaScriptGenerator
  - GeneratorMethods
  :method: sortable
  :description: |+
    
        sortable(id, options = {})
    Creates a script.aculo.us sortable element. Useful to
    recreate sortable elements
    after items get added or deleted. See ActionView::Helpers::ScriptaculousHelper
    for more information.
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/prototype_helper.rb, line 919
    919:           def sortable(id, options = {})
    920:             record @context.send(:sortable_element_js, id, options)
    921:           end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#M000991
- :tinyuri: http://tinyurl.com/3m977w
  :path: 
  - ActionView
  - Helpers
  - ScriptaculousHelper
  :method: sortable_element
  :description: "\n  \n    sortable_element(element_id, options = {})\n  \n  \n  \n\
    Makes the element with the DOM ID specified by element_id sortable\n\
    by drag-and-drop and make an Ajax call whenever the sort order has changed.\n\
    By default, the action called gets the serialized sortable element as\n\
    parameters.\n\n\n\
    Example:\n\n\n  <%= sortable_element(\"my_list\", :url => { :action => \"order\" }) %>\n\n\n\
    In the example, the action gets a \"my_list\" array parameter\n\
    containing the values of the ids of elements the sortable consists of, in\n\
    the current order.\n\n\n\
    Important: For this to work, the sortable elements must have id attributes\n\
    in the form \"string_identifier\". For example, \"item_1\".\n\
    Only the identifier part of the id attribute will be serialized.\n\n\n\
    Additional options are:\n\n\n\
    :format:A regular expression to determine what to send as the serialized id to the\n\
    server (the default is /^[^_]*_(.*)$/).\n\n\n\
    :constraint:Whether to constrain the dragging to either :horizontal or\n\
    :vertical (or false to make it unconstrained).\n\n\n\
    :overlap:Calculate the item overlap in the :horizontal or\n\
    :vertical direction.\n\n\n\
    :tag:Which children of the container element to treat as sortable (default is\n\
    li).\n\n\n\
    :containment:Takes an element or array of elements to treat as potential drop targets\n\
    (defaults to the original target element).\n\n\n\
    :only:A CSS class name or arry of class names used to filter out child elements\n\
    as candidates.\n\n\n\
    :scroll:Determines whether to scroll the list during drag operationsif the list\n\
    runs past the visual border.\n\n\n\
    :tree:Determines whether to treat nested lists as part of the main sortable list.\n\
    This means that you can create multi- layer lists, and not only sort items\n\
    at the same level, but drag and sort items between levels.\n\n\n\
    :hoverclass:If set, the Droppable will have this additional CSS class when an accepted\n\
    Draggable is hovered over it.\n\n\n\
    :handle:Sets whether the element should only be draggable by an embedded handle.\n\
    The value may be a string referencing a CSS class value (as of\n\
    script.aculo.us V1.5). The first child/grandchild/etc. element found within\n\
    the element that has this CSS class value will be used as the handle.\n\n\n\
    :ghosting:Clones the element and drags the clone, leaving the original in place until\n\
    the clone is dropped (defaut is false).\n\n\n\
    :dropOnEmpty:If set to true, the Sortable container will be made into a Droppable, that\n\
    can receive a Draggable (as according to the containment rules) as a child\n\
    element when there are no more elements inside (defaut is false).\n\n\n\
    :onChange:Called whenever the sort order changes while dragging. When dragging from\n\
    one Sortable to another, the callback is called once on each Sortable. Gets\n\
    the affected element as its parameter.\n\n\n\
    :onUpdate:Called when the drag ends and the Sortable\xE2\x80\x98s order is changed in any\n\
    way. When dragging from one Sortable to another, the callback is called\n\
    once on each Sortable. Gets the container as its parameter.\n\n\n\n\n\
    See script.aculo.us for more\n\
    138:       def sortable_element(element_id, options = {})\n\
    139:         javascript_tag(sortable_element_js(element_id, options).chop!)\n\
    140:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/ScriptaculousHelper.html#M000953
- :tinyuri: http://tinyurl.com/4hzucv
  :path: 
  - ActionController
  - Routing
  - Optimisation
  - Optimiser
  :method: source_code
  :description: |+
    
        source_code()
    
    
        # File vendor/rails/actionpack/lib/action_controller/routing_optimisation.rb, line 36
    36:         def source_code
    37:           if applicable?
    38:             "return #{generation_code} if #{guard_condition}\n"
    39:           else
    40:             "\n"
    41:           end
    42:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Routing/Optimisation/Optimiser.html#M000347
- :tinyuri: http://tinyurl.com/43e2af
  :path: 
  - Rails
  - Generator
  - Base
  :method: source_path
  :description: 
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Base.html#M001565
- :tinyuri: http://tinyurl.com/3zogns
  :path: 
  - Rails
  - Generator
  - Lookup
  - ClassMethods
  :method: sources
  :description: |+
    
        sources()
    The list of sources where we look,
    in order, for generators.
    
    
    
        # File vendor/rails/railties/lib/rails_generator/lookup.rb, line 63
    63:         def sources
    64:           read_inheritable_attribute(:sources) or use_component_sources!
    65:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Lookup/ClassMethods.html#M001533
- :tinyuri: http://tinyurl.com/3wtbqb
  :path: 
  - ActiveSupport
  - Multibyte
  - Chars
  :method: split
  :description: |+
    
        split(*args)
    Works just like String#split, with the exception that the items in the
    resulting list are Chars instances instead of
    String. This makes chaining methods easier.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/multibyte/chars.rb, line 62
    62:     def split(*args)
    63:       @string.split(*args).map { |i| i.chars }
    64:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Chars.html#M000551
- :tinyuri: http://tinyurl.com/3pqup3
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Array
  - Grouping
  :method: split
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Array/Grouping.html#M000637
- :tinyuri: http://tinyurl.com/528fwz
  :path: 
  - Commands
  - Plugin
  :method: split_args
  :description: |+
    
        split_args(args)
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 485
    485:     def split_args(args)
    486:       left = []
    487:       left << args.shift while args[0] and args[0] =~ /^-/
    488:       left << args.shift if args[0]
    489:       return [left, args]
    490:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Commands/Plugin.html#M000507
- :tinyuri: http://tinyurl.com/4qdn68
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - SQLiteAdapter
  :method: sqlite_version
  :description: |+
    
        sqlite_version()
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/sqlite_adapter.rb, line 356
    356:         def sqlite_version
    357:           @sqlite_version ||= select_value('select sqlite_version(*)')
    358:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#M001249
- :tinyuri: http://tinyurl.com/4jb95x
  :path: 
  - ActionController
  - AbstractRequest
  :method: ssl?
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionController/AbstractRequest.html#M000412
- :tinyuri: http://tinyurl.com/5xg47g
  :path: 
  - ActionController
  - AbstractRequest
  :method: standard_port
  :description: "\n  \n    standard_port()\n  \n  \n  \n\
    Returns the standard port number\n\
    187:     def standard_port\n\
    188:       case protocol\n\
    189:         when 'https://' then 443\n\
    190:         else 80\n\
    191:       end\n\
    192:     end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionController/AbstractRequest.html#M000416
- :tinyuri: http://tinyurl.com/3kgsfu
  :path: 
  - ActiveSupport
  - CoreExtensions
  - String
  - StartsEndsWith
  :method: starts_with?
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/String/StartsEndsWith.html#M000761
- :tinyuri: http://tinyurl.com/4tvdnc
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Range
  - BlocklessStep
  :method: step_with_blockless
  :description: |+
    
        step_with_blockless(value, &block)
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/range/blockless_step.rb, line 10
    10:         def step_with_blockless(value, &block)
    11:           if block_given?
    12:             step_without_blockless(value, &block)
    13:           else
    14:             returning [] do |array|
    15:               step_without_blockless(value) { |step| array << step }
    16:             end
    17:           end
    18:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Range/BlocklessStep.html#M000561
- :tinyuri: http://tinyurl.com/3ep6p7
  :path: 
  - Builder
  - CSS
  :method: store!
  :description: |+
    
        store!(sym, &block)
    
    
         # File vendor/rails/activesupport/lib/active_support/vendor/builder-2.1.2/builder/css.rb, line 152
    152:     def store!(sym, &block)
    153:       @library[sym] = block.to_proc
    154:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Builder/CSS.html#M000905
- :tinyuri: http://tinyurl.com/4aytu6
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - Column
  :method: string_to_binary
  :description: |+
    
        string_to_binary(value)
    Used to convert from Strings to BLOBs
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 106
    106:         def string_to_binary(value)
    107:           value
    108:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/Column.html#M001205
- :tinyuri: http://tinyurl.com/3suyrn
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - Column
  :method: string_to_date
  :description: |+
    
        string_to_date(string)
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 115
    115:         def string_to_date(string)
    116:           return string unless string.is_a?(String)
    117:           return nil if string.empty?
    118: 
    119:           fast_string_to_date(string) || fallback_string_to_date(string)
    120:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/Column.html#M001207
- :tinyuri: http://tinyurl.com/3lrkqf
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - Column
  :method: string_to_dummy_time
  :description: |+
    
        string_to_dummy_time(string)
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 129
    129:         def string_to_dummy_time(string)
    130:           return string unless string.is_a?(String)
    131:           return nil if string.empty?
    132: 
    133:           string_to_time "2000-01-01 #{string}"
    134:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/Column.html#M001209
- :tinyuri: http://tinyurl.com/4h4ave
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - Column
  :method: string_to_time
  :description: |+
    
        string_to_time(string)
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 122
    122:         def string_to_time(string)
    123:           return string unless string.is_a?(String)
    124:           return nil if string.empty?
    125: 
    126:           fast_string_to_time(string) || fallback_string_to_time(string)
    127:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/Column.html#M001208
- :tinyuri: http://tinyurl.com/4v96xu
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Hash
  - Keys
  :method: stringify_keys
  :description: |+
    
        stringify_keys()
    Return a new hash with all keys converted to strings.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/hash/keys.rb, line 6
     6:         def stringify_keys
     7:           inject({}) do |options, (key, value)|
     8:             options[key.to_s] = value
     9:             options
    10:           end
    11:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Hash/Keys.html#M000616
- :tinyuri: http://tinyurl.com/4rofgq
  :path: 
  - HashWithIndifferentAccess
  :method: stringify_keys!
  :description: |+
    
        stringify_keys!()
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/hash/indifferent_access.rb, line 64
    64:   def stringify_keys!; self end
    
    
  :uri: http://api.rubyonrails.org/classes/HashWithIndifferentAccess.html#M000072
- :tinyuri: http://tinyurl.com/46h6d2
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Hash
  - Keys
  :method: stringify_keys!
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Hash/Keys.html#M000617
- :tinyuri: http://tinyurl.com/5yqtzy
  :path: 
  - ActiveSupport
  - Multibyte
  - Handlers
  - UTF8Handler
  :method: strip
  :description: |+
    
        strip(str)
    Removed leading and trailing whitespace
    
    
    
         # File vendor/rails/activesupport/lib/active_support/multibyte/handlers/utf8_handler.rb, line 232
    232:       def strip(str)
    233:         str.gsub(UNICODE_LEADERS_PAT, '').gsub(UNICODE_TRAILERS_PAT, '')
    234:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Handlers/UTF8Handler.html#M000523
- :tinyuri: http://tinyurl.com/3umdjp
  :path: 
  - ActionView
  - Helpers
  - SanitizeHelper
  :method: strip_links
  :description: |+
    
        strip_links(html)
    Strips all link tags from text leaving just the link text.
    
    Examples
    
      strip_links('<a href="http://www.rubyonrails.org">Ruby on Rails</a>')
      # => Ruby on Rails
    
      strip_links('Please e-mail me at <a href="mailto:me@email.com">me@email.com</a>.')
      # => Please e-mail me at me@email.com.
    
      strip_links('Blog: <a href="http://www.myblog.com/" class="nav" target=\"_blank\">Visit</a>.')
      # => Blog: Visit
    
    
    
        # File vendor/rails/actionpack/lib/action_view/helpers/sanitize_helper.rb, line 89
    89:       def strip_links(html)
    90:         self.class.link_sanitizer.sanitize(html)
    91:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html#M000939
- :tinyuri: http://tinyurl.com/4pw3oo
  :path: 
  - ActionView
  - Helpers
  - SanitizeHelper
  :method: strip_tags
  :description: |+
    
        strip_tags(html)
    Strips all HTML tags from the html, including comments. This uses
    the html-scanner tokenizer and so its HTML parsing ability is limited by
    that of html-scanner.
    
    Examples
    
      strip_tags("Strip <i>these</i> tags!")
      # => Strip these tags!
    
      strip_tags("<b>Bold</b> no more!  <a href='more.html'>See more here</a>...")
      # => Bold no more!  See more here...
    
      strip_tags("<div id='top-bar'>Welcome to my website!</div>")
      # => Welcome to my website!
    
    
    
        # File vendor/rails/actionpack/lib/action_view/helpers/sanitize_helper.rb, line 74
    74:       def strip_tags(html)     
    75:         self.class.full_sanitizer.sanitize(html)
    76:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html#M000938
- :tinyuri: http://tinyurl.com/3njwzh
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - SchemaStatements
  :method: structure_dump
  :description: |+
    
        structure_dump()
    Returns a string of CREATE TABLE SQL statement(s) for recreating
    the entire structure of the database.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 230
    230:       def structure_dump
    231:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#M001160
- :tinyuri: http://tinyurl.com/44orlx
  :path: 
  - ActionView
  - Helpers
  - AssetTagHelper
  :method: stylesheet_link_tag
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/AssetTagHelper.html#M001028
- :tinyuri: http://tinyurl.com/3k29yd
  :path: 
  - ActionView
  - Helpers
  - AssetTagHelper
  :method: stylesheet_path
  :description: |+
    
        stylesheet_path(source)
    Computes the path to a stylesheet asset in the public stylesheets
    directory. If the source filename has no extension, .css will be
    appended. Full paths from the document root will be passed through. Used
    internally by stylesheet_link_tag
    to build the stylesheet path.
    
    Examples
    
      stylesheet_path "style" # => /stylesheets/style.css
      stylesheet_path "dir/style.css" # => /stylesheets/dir/style.css
      stylesheet_path "/dir/style.css" # => /dir/style.css
      stylesheet_path "http://www.railsapplication.com/css/style" # => http://www.railsapplication.com/css/style.css
      stylesheet_path "http://www.railsapplication.com/css/style.js" # => http://www.railsapplication.com/css/style.css
    
    
      This method is also aliased as
      path_to_stylesheet
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/asset_tag_helper.rb, line 260
    260:       def stylesheet_path(source)
    261:         compute_public_path(source, 'stylesheets', 'css')
    262:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/AssetTagHelper.html#M001026
- :tinyuri: http://tinyurl.com/4y743t
  :path: 
  - ActionController
  - AbstractRequest
  :method: subdomains
  :description: |+
    
        subdomains(tld_length = 1)
    Returns all the subdomains as an
    array, so ["dev", "www"] would be returned for
    "dev.www.rubyonrails.org". You can specify a different
    tld_length, such as 2 to catch ["www"] instead of
    ["www", "rubyonrails"] in "www.rubyonrails.co.uk".
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/request.rb, line 211
    211:     def subdomains(tld_length = 1)
    212:       return [] unless named_host?(host)
    213:       parts = host.split('.')
    214:       parts[0..-(tld_length+2)]
    215:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/AbstractRequest.html#M000419
- :tinyuri: http://tinyurl.com/3r4n2l
  :path: 
  - ActionView
  - Helpers
  - FormTagHelper
  :method: submit_tag
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/FormTagHelper.html#M001045
- :tinyuri: http://tinyurl.com/489z54
  :path: 
  - ActionView
  - Helpers
  - PrototypeHelper
  :method: submit_to_remote
  :description: |+
    
        submit_to_remote(name, value, options = {})
    Returns a button input tag with the element name of name and a
    value (i.e., display text) of value that will submit form using
    XMLHttpRequest in the background instead of a regular POST request that
    reloads the page.
    
    
     # Create a button that submits to the create action
     #
     # Generates: <input name="create_btn" onclick="new Ajax.Request('/testing/create',
     #     {asynchronous:true, evalScripts:true, parameters:Form.serialize(this.form)});
     #     return false;" type="button" value="Create" />
     <%= submit_to_remote 'create_btn', 'Create', :url => { :action => 'create' } %>
    
     # Submit to the remote action update and update the DIV succeed or fail based
     # on the success or failure of the request
     #
     # Generates: <input name="update_btn" onclick="new Ajax.Updater({success:'succeed',failure:'fail'},
     #      '/testing/update', {asynchronous:true, evalScripts:true, parameters:Form.serialize(this.form)});
     #      return false;" type="button" value="Update" />
     <%= submit_to_remote 'update_btn', 'Update', :url => { :action => 'update' },
        :update => { :success => "succeed", :failure => "fail" }
    
    
    options argument is the same as in form_remote_tag.
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/prototype_helper.rb, line 412
    412:       def submit_to_remote(name, value, options = {})
    413:         options[:with] ||= 'Form.serialize(this.form)'
    414: 
    415:         options[:html] ||= {}
    416:         options[:html][:type] = 'button'
    417:         options[:html][:onclick] = "#{remote_function(options)}; return false;"
    418:         options[:html][:name] = name
    419:         options[:html][:value] = value
    420: 
    421:         tag("input", options[:html], false)
    422:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/PrototypeHelper.html#M000963
- :tinyuri: http://tinyurl.com/3mnqmg
  :path: 
  - ActiveResource
  - Response
  :method: success?
  :description: |+
    
        success?()
    
    
         # File vendor/rails/activeresource/lib/active_resource/http_mock.rb, line 121
    121:     def success?
    122:       (200..299).include?(code)
    123:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Response.html#M000821
- :tinyuri: http://tinyurl.com/4zxgrf
  :path: 
  - ActiveRecord
  - Calculations
  - ClassMethods
  :method: sum
  :description: |+
    
        sum(column_name, options = {})
    Calculates the sum of values on a
    given column. The value is returned with the same data type of the column.
    See calculate for examples with
    options.
    
    
      Person.sum('age')
    
    
    
        # File vendor/rails/activerecord/lib/active_record/calculations.rb, line 73
    73:       def sum(column_name, options = {})
    74:         calculate(:sum, column_name, options)
    75:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Calculations/ClassMethods.html#M001341
- :tinyuri: http://tinyurl.com/4xav7s
  :path: 
  - Enumerable
  :method: sum
  :description: |+
    
        sum(identity = 0, &block)
    Calculates a sum from the elements.
    Examples:
    
    
     payments.sum { |p| p.price * p.tax_rate }
     payments.sum(&:price)
    
    
    This is instead of payments.inject { |sum, p| sum + p.price }
    
    
    Also calculates sums without the use of a block:
    
    
      [5, 15, 10].sum # => 30
    
    
    The default identity (sum of an empty
    list) is zero. However, you can override this default:
    
    
    [].sum(Payment.new(0)) { |i| i.amount
    } # => Payment.new(0)
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/enumerable.rb, line 39
    39:   def sum(identity = 0, &block)
    40:     return identity unless size > 0
    41: 
    42:     if block_given?
    43:       map(&block).sum
    44:     else
    45:       inject { |sum, element| sum + element }
    46:     end
    47:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Enumerable.html#M001646
- :tinyuri: http://tinyurl.com/4lz7bj
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - AbstractAdapter
  :method: supports_count_distinct?
  :description: |+
    
        supports_count_distinct?()
    Does this adapter support using DISTINCT within COUNT? This is
    true for all adapters except sqlite.
    
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 49
    49:       def supports_count_distinct?
    50:         true
    51:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#M001284
- :tinyuri: http://tinyurl.com/52n2e2
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - AbstractAdapter
  :method: supports_migrations?
  :description: |+
    
        supports_migrations?()
    Does this adapter support migrations? Backend specific, as the abstract
    adapter always returns false.
    
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb, line 43
    43:       def supports_migrations?
    44:         false
    45:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#M001283
- :tinyuri: http://tinyurl.com/4cnez9
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - PostgreSQLAdapter
  :method: supports_migrations?
  :description: |+
    
        supports_migrations?()
    Does PostgreSQL support migrations?
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 288
    288:       def supports_migrations?
    289:         true
    290:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#M001256
- :tinyuri: http://tinyurl.com/3og5ez
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - PostgreSQLAdapter
  :method: supports_standard_conforming_strings?
  :description: |+
    
        supports_standard_conforming_strings?()
    Does PostgreSQL support standard conforming strings?
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 293
    293:       def supports_standard_conforming_strings?
    294:         # Temporarily set the client message level above error to prevent unintentional
    295:         # error messages in the logs when working on a PostgreSQL database server that
    296:         # does not support standard conforming strings.
    297:         client_min_messages_old = client_min_messages
    298:         self.client_min_messages = 'panic'
    299: 
    300:         # postgres-pr does not raise an exception when client_min_messages is set higher
    301:         # than error and "SHOW standard_conforming_strings" fails, but returns an empty
    302:         # PGresult instead.
    303:         has_support = execute('SHOW standard_conforming_strings')[0][0] rescue false
    304:         self.client_min_messages = client_min_messages_old
    305:         has_support
    306:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#M001257
- :tinyuri: http://tinyurl.com/45lxhy
  :path: 
  - Kernel
  :method: suppress
  :description: |+
    
        suppress(*exception_classes) {|| ...}
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/kernel/reporting.rb, line 45
    45:   def suppress(*exception_classes)
    46:     begin yield
    47:     rescue Exception => e
    48:       raise unless exception_classes.any? { |cls| e.kind_of?(cls) }
    49:     end
    50:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Kernel.html#M001642
- :tinyuri: http://tinyurl.com/4g852d
  :path: 
  - ActiveRecord
  - Migration
  :method: suppress_messages
  :description: |+
    
        suppress_messages() {|| ...}
    
    
         # File vendor/rails/activerecord/lib/active_record/migration.rb, line 271
    271:       def suppress_messages
    272:         save, self.verbose = verbose, false
    273:         yield
    274:       ensure
    275:         self.verbose = save
    276:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Migration.html#M001373
- :tinyuri: http://tinyurl.com/4naj3l
  :path: 
  - Plugin
  :method: svn_url?
  :description: |+
    
        svn_url?()
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 161
    161:   def svn_url?
    162:     @uri =~ /svn(?:\+ssh)?:\/\/*/
    163:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Plugin.html#M000094
- :tinyuri: http://tinyurl.com/49rk6e
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Hash
  - Keys
  :method: symbolize_keys
  :description: |+
    
        symbolize_keys()
    Return a new hash with all keys converted to symbols.
    
    
      This method is also aliased as
      to_options
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/hash/keys.rb, line 25
    25:         def symbolize_keys
    26:           inject({}) do |options, (key, value)|
    27:             options[key.to_sym || key] = value
    28:             options
    29:           end
    30:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Hash/Keys.html#M000618
- :tinyuri: http://tinyurl.com/3lkb2n
  :path: 
  - HashWithIndifferentAccess
  :method: symbolize_keys!
  :description: |+
    
        symbolize_keys!()
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/hash/indifferent_access.rb, line 65
    65:   def symbolize_keys!; self end
    
    
  :uri: http://api.rubyonrails.org/classes/HashWithIndifferentAccess.html#M000073
- :tinyuri: http://tinyurl.com/4vyta5
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Hash
  - Keys
  :method: symbolize_keys!
  :description: |+
    
        symbolize_keys!()
    Destructively convert all keys to symbols.
    
    
      This method is also aliased as
      to_options!
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/hash/keys.rb, line 33
    33:         def symbolize_keys!
    34:           self.replace(self.symbolize_keys)
    35:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Hash/Keys.html#M000619
- :tinyuri: http://tinyurl.com/3z2kzj
  :path: 
  - ActionController
  - AbstractRequest
  :method: symbolized_path_parameters
  :description: |+
    
        symbolized_path_parameters()
    The same as path_parameters with
    explicitly symbolized keys
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/request.rb, line 296
    296:     def symbolized_path_parameters 
    297:       @symbolized_path_parameters ||= path_parameters.symbolize_keys
    298:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/AbstractRequest.html#M000426
- :tinyuri: http://tinyurl.com/469tma
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - SchemaStatements
  :method: table_alias_for
  :description: |+
    
        table_alias_for(table_name)
    Truncates a table alias according to the limits of the current adapter.
    
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 17
    17:       def table_alias_for(table_name)
    18:         table_name[0..table_alias_length-1].gsub(/\./, '_')
    19:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#M001148
- :tinyuri: http://tinyurl.com/4bjvvg
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - PostgreSQLAdapter
  :method: table_alias_length
  :description: |+
    
        table_alias_length()
    Returns the configured supported identifier length supported by PostgreSQL,
    or report the default of 63 on PostgreSQL 7.x.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 310
    310:       def table_alias_length
    311:         @table_alias_length ||= (postgresql_version >= 80000 ? query('SHOW max_identifier_length')[0][0].to_i : 63)
    312:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#M001258
- :tinyuri: http://tinyurl.com/3ncmrp
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - SchemaStatements
  :method: table_alias_length
  :description: |+
    
        table_alias_length()
    This is the maximum length a table alias can be
    
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb, line 12
    12:       def table_alias_length
    13:         255
    14:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#M001147
- :tinyuri: http://tinyurl.com/4wr827
  :path: 
  - ActiveRecord
  - Base
  :method: table_exists?
  :description: |+
    
        table_exists?()
    Indicates whether the table associated with this class exists
    
    
    
          # File vendor/rails/activerecord/lib/active_record/base.rb, line 1062
    1062:       def table_exists?
    1063:         if connection.respond_to?(:tables)
    1064:           connection.tables.include? table_name
    1065:         else
    1066:           # if the connection adapter hasn't implemented tables, there are two crude tests that can be
    1067:           # used - see if getting column info raises an error, or if the number of columns returned is zero
    1068:           begin
    1069:             reset_column_information
    1070:             columns.size > 0
    1071:           rescue ActiveRecord::StatementInvalid
    1072:             false
    1073:           end
    1074:         end
    1075:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001403
- :tinyuri: http://tinyurl.com/yrjazz
  :path: 
  - ActiveRecord
  - Base
  :method: table_name
  :description: "\n  \n    table_name()\n  \n  \n  \n\
    Guesses the table name (in forced lower-case) based on the name of the\n\
    class in the inheritance hierarchy descending directly from ActiveRecord.\n\
    So if the hierarchy looks like: Reply < Message < ActiveRecord, then\n\
    Message is used to guess the table name even when called on Reply. The\n\
    rules used to do the guess are handled by the Inflector class in Active Support, which knows\n\
    almost all common English inflections. You can add new inflections in\n\
    config/initializers/inflections.rb.\n\n\n\
    Nested classes are given table names prefixed by the singular form of the\n\
    parent\xE2\x80\x98s table name. Enclosing modules are not considered. Examples:\n\n\n  class Invoice < ActiveRecord::Base; end;\n  file                  class               table_name\n  invoice.rb            Invoice             invoices\n\n  class Invoice < ActiveRecord::Base; class Lineitem < ActiveRecord::Base; end; end;\n  file                  class               table_name\n  invoice.rb            Invoice::Lineitem   invoice_lineitems\n\n  module Invoice; class Lineitem < ActiveRecord::Base; end; end;\n  file                  class               table_name\n  invoice/lineitem.rb   Invoice::Lineitem   lineitems\n\n\n\
    Additionally, the class-level table_name_prefix is prepended and the\n\
    table_name_suffix is appended. So if you have \"myapp_\" as a\n\
    prefix, the table name guess for an Invoice class becomes \"myapp_invoices\".\n\
    Invoice::Lineitem becomes\n\
    \"myapp_invoice_lineitems\".\n\n\n\
    You can also overwrite this class method to allow for unguessable links,\n\
    928:       def table_name\n\
    929:         reset_table_name\n\
    930:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001396
- :tinyuri: http://tinyurl.com/4t9hz3
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - SQLiteAdapter
  :method: table_structure
  :description: |+
    
        table_structure(table_name)
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/sqlite_adapter.rb, line 268
    268:         def table_structure(table_name)
    269:           returning structure = execute("PRAGMA table_info(#{table_name})") do
    270:             raise(ActiveRecord::StatementInvalid, "Could not find table '#{table_name}'") if structure.empty?
    271:           end
    272:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SQLiteAdapter.html#M001247
- :tinyuri: http://tinyurl.com/2cano4
  :path: 
  - ActiveSupport
  - CoreExtensions
  - String
  - Inflections
  :method: tableize
  :description: |+
    
        tableize()
    Create the name of a table like Rails
    does for models to table names. This method uses the pluralize method on the last word in
    the string.
    
    
    Examples
    
    
      "RawScaledScorer".tableize #=> "raw_scaled_scorers"
      "egg_and_ham".tableize #=> "egg_and_hams"
      "fancyCategory".tableize #=> "fancy_categories"
    
    
    
         # File vendor/rails/activesupport/lib/active_support/core_ext/string/inflections.rb, line 103
    103:         def tableize
    104:           Inflector.tableize(self)
    105:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/String/Inflections.html#M000749
- :tinyuri: http://tinyurl.com/53bvjb
  :path: 
  - Inflector
  :method: tableize
  :description: |+
    
        tableize(class_name)
    Create the name of a table like Rails does for
    models to table names. This method uses the pluralize method on the last word in the
    string.
    
    
    Examples
    
    
      "RawScaledScorer".tableize #=> "raw_scaled_scorers"
      "egg_and_ham".tableize #=> "egg_and_hams"
      "fancyCategory".tableize #=> "fancy_categories"
    
    
    
         # File vendor/rails/activesupport/lib/active_support/inflector.rb, line 217
    217:   def tableize(class_name)
    218:     pluralize(underscore(class_name))
    219:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Inflector.html#M001625
- :tinyuri: http://tinyurl.com/3fe2ug
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - PostgreSQLAdapter
  :method: tables
  :description: |+
    
        tables(name = nil)
    Returns the list of all tables
    in the schema search path or a specified schema.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 439
    439:       def tables(name = nil)
    440:         schemas = schema_search_path.split(/,/).map { |p| quote(p) }.join(',')
    441:         query("SELECT tablename\nFROM pg_tables\nWHERE schemaname IN (\#{schemas})\n", name).map { |row| row[0] }
    442:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#M001266
- :tinyuri: http://tinyurl.com/4osl4v
  :path: 
  - ActionView
  - Helpers
  - TagHelper
  :method: tag
  :description: |+
    
        tag(name, options = nil, open = false, escape = true)
    Returns an empty HTML tag of type
    name which by default is XHTML compliant. Set open to
    true to create an open tag compatible
    with HTML 4.0 and below. Add HTML attributes by passing an attributes hash
    to options. Set escape to false to disable attribute
    value escaping.
    
    Options
    
    The options hash is used with attributes with no value like
    (disabled and readonly), which you can give a value of
    true in the options hash. You can use symbols or strings for the
    attribute names.
    
    Examples
    
      tag("br")
      # => <br />
    
      tag("br", nil, true)
      # => <br>
    
      tag("input", { :type => 'text', :disabled => true })
      # => <input type="text" disabled="disabled" />
    
      tag("img", { :src => "open & shut.png" })
      # => <img src="open &amp; shut.png" />
    
      tag("img", { :src => "open &amp; shut.png" }, false, false)
      # => <img src="open &amp; shut.png" />
    
    
    
        # File vendor/rails/actionpack/lib/action_view/helpers/tag_helper.rb, line 39
    39:       def tag(name, options = nil, open = false, escape = true)
    40:         "<#{name}#{tag_options(options, escape) if options}" + (open ? ">" : " />")
    41:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/TagHelper.html#M001032
- :tinyuri: http://tinyurl.com/4hq73n
  :path: 
  - Builder
  - XmlBase
  :method: tag!
  :description: |+
    
        tag!(sym, *args, &block)
    Create a tag named sym. Other than the first argument which is the
    tag name, the arguments are the same as the tags implemented via method_missing.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/vendor/builder-2.1.2/builder/xmlbase.rb, line 30
    30:     def tag!(sym, *args, &block)
    31:       method_missing(sym.to_sym, *args, &block)
    32:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Builder/XmlBase.html#M000885
- :tinyuri: http://tinyurl.com/4x3lh3
  :path: 
  - Builder
  - CSS
  :method: target!
  :description: |+
    
        target!()
    Return the target of the builder
    
    
    
         # File vendor/rails/activesupport/lib/active_support/vendor/builder-2.1.2/builder/css.rb, line 129
    129:     def target!
    130:       @target * ''
    131:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Builder/CSS.html#M000901
- :tinyuri: http://tinyurl.com/4laukr
  :path: 
  - Builder
  - XmlMarkup
  :method: target!
  :description: |+
    
        target!()
    Return the target of the builder.
    
    
    
         # File vendor/rails/activesupport/lib/active_support/vendor/builder-2.1.2/builder/xmlmarkup.rb, line 193
    193:     def target!
    194:       @target
    195:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Builder/XmlMarkup.html#M000891
- :tinyuri: http://tinyurl.com/4jzzsp
  :path: 
  - Rails
  - Generator
  - Commands
  - Destroy
  :method: template
  :description: |
    
        template(relative_source, relative_destination, file_options = {})
    Alias for file
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Commands/Destroy.html#M001492
- :tinyuri: http://tinyurl.com/5xndv8
  :path: 
  - Rails
  - Generator
  - Commands
  - List
  :method: template
  :description: |+
    
        template(relative_source, relative_destination, options = {})
    
    
         # File vendor/rails/railties/lib/rails_generator/commands.rb, line 527
    527:         def template(relative_source, relative_destination, options = {})
    528:           logger.template relative_destination
    529:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Commands/List.html#M001512
- :tinyuri: http://tinyurl.com/4ytx95
  :path: 
  - Rails
  - Generator
  - Commands
  - Update
  :method: template
  :description: |+
    
        template(relative_source, relative_destination, options = {})
    
    
         # File vendor/rails/railties/lib/rails_generator/commands.rb, line 560
    560:         def template(relative_source, relative_destination, options = {})
    561:           # logger.template relative_destination
    562:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Commands/Update.html#M001519
- :tinyuri: http://tinyurl.com/3rqj7u
  :path: 
  - Rails
  - Generator
  - Commands
  - Create
  :method: template
  :description: |+
    
        template(relative_source, relative_destination, template_options = {})
    Generate a file for a Rails application using an ERuby template. Looks up and evaluates a template by name and writes the result.
    
    
    The ERB template uses explicit trim mode to best
    control the proliferation of whitespace in generated code. <%- trims
    leading whitespace; -%> trims trailing whitespace including one newline.
    
    
    A hash of template options may be passed
    as the last argument. The options accepted by the file are accepted as well as :assigns, a
    hash of variable bindings. Example:
    
    
      template 'foo', 'bar', :assigns => { :action => 'view' }
    
    
    Template is implemented in terms of file.
    It calls file with a block which takes a
    file handle and returns its rendered
    contents.
    
    
    
         # File vendor/rails/railties/lib/rails_generator/commands.rb, line 287
    287:         def template(relative_source, relative_destination, template_options = {})
    288:           file(relative_source, relative_destination, template_options) do |file|
    289:             # Evaluate any assignments in a temporary, throwaway binding.
    290:             vars = template_options[:assigns] || {}
    291:             b = binding
    292:             vars.each { |k,v| eval "#{k} = vars[:#{k}] || vars['#{k}']", b }
    293: 
    294:             # Render the source file with the temporary binding.
    295:             ERB.new(file.read, nil, '-').result(b)
    296:           end
    297:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Commands/Create.html#M001525
- :tinyuri: http://tinyurl.com/4n39ct
  :path: 
  - ActionView
  - Base
  :method: template_format
  :description: |+
    
        template_format()
    symbolized version of the :format parameter of the request, or :html by
    default.
    
    
    
         # File vendor/rails/actionpack/lib/action_view/base.rb, line 418
    418:     def template_format
    419:       return @template_format if @template_format
    420:       format = controller && controller.respond_to?(:request) && controller.request.parameters[:format]
    421:       @template_format = format.blank? ? :html : format.to_sym
    422:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Base.html#M001091
- :tinyuri: http://tinyurl.com/3ewgfw
  :path: 
  - ActionView
  - Base
  :method: template_handler_extensions
  :description: |+
    
        template_handler_extensions()
    
    
         # File vendor/rails/actionpack/lib/action_view/base.rb, line 246
    246:     def self.template_handler_extensions
    247:       @@template_handler_extensions ||= @@template_handlers.keys.map(&:to_s).sort
    248:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Base.html#M001087
- :tinyuri: http://tinyurl.com/4a96kv
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Numeric
  - Bytes
  :method: terabyte
  :description: |
    
        terabyte()
    Alias for terabytes
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Numeric/Bytes.html#M000667
- :tinyuri: http://tinyurl.com/3t4bzf
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Numeric
  - Bytes
  :method: terabytes
  :description: |+
    
        terabytes()
    
      This method is also aliased as
      terabyte
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/numeric/bytes.rb, line 26
    26:         def terabytes
    27:           self * 1024.gigabytes
    28:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Numeric/Bytes.html#M000666
- :tinyuri: http://tinyurl.com/3myuh7
  :path: 
  - ActionController
  - TestCase
  :method: tests
  :description: |+
    
        tests(controller_class)
    
    
        # File vendor/rails/actionpack/lib/action_controller/test_case.rb, line 15
    15:       def tests(controller_class)
    16:         self.controller_class = controller_class
    17:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/TestCase.html#M000372
- :tinyuri: http://tinyurl.com/4hbkm6
  :path: 
  - Builder
  - XmlEvents
  :method: text!
  :description: |+
    
        text!(text)
    
    
        # File vendor/rails/activesupport/lib/active_support/vendor/builder-2.1.2/builder/xmlevents.rb, line 49
    49:     def text!(text)
    50:       @target.text(text)
    51:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Builder/XmlEvents.html#M000909
- :tinyuri: http://tinyurl.com/436pjn
  :path: 
  - Builder
  - XmlBase
  :method: text!
  :description: |+
    
        text!(text)
    Append text to the output target. Escape any markup. May be used within the
    markup brackets as:
    
    
      builder.p { |b| b.br; b.text! "HI" }   #=>  <p><br/>HI</p>
    
    
    
        # File vendor/rails/activesupport/lib/active_support/vendor/builder-2.1.2/builder/xmlbase.rb, line 80
    80:     def text!(text)
    81:       _text(_escape(text))
    82:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Builder/XmlBase.html#M000887
- :tinyuri: http://tinyurl.com/4vgfom
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - Column
  :method: text?
  :description: |+
    
        text?()
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 32
    32:       def text?
    33:         [:string, :text].include? type
    34:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/Column.html#M001198
- :tinyuri: http://tinyurl.com/4dqu52
  :path: 
  - ActionView
  - Helpers
  - FormHelper
  :method: text_area
  :description: |+
    
        text_area(object_name, method, options = {})
    Returns a textarea opening and closing tag set tailored for accessing a
    specified attribute (identified by method) on an object assigned
    to the template (identified by object). Additional options on the
    input tag can be passed as a hash with options.
    
    Examples
    
      text_area(:post, :body, :cols => 20, :rows => 40)
      # => <textarea cols="20" rows="40" id="post_body" name="post[body]">
      #      #{@post.body}
      #    </textarea>
    
      text_area(:comment, :text, :size => "20x30")
      # => <textarea cols="20" rows="30" id="comment_text" name="comment[text]">
      #      #{@comment.text}
      #    </textarea>
    
      text_area(:application, :notes, :cols => 40, :rows => 15, :class => 'app_input')
      # => <textarea cols="40" rows="15" id="application_notes" name="application[notes]" class="app_input">
      #      #{@application.notes}
      #    </textarea>
    
      text_area(:entry, :body, :size => "20x20", :disabled => 'disabled')
      # => <textarea cols="20" rows="20" id="entry_body" name="entry[body]" disabled="disabled">
      #      #{@entry.body}
      #    </textarea>
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/form_helper.rb, line 375
    375:       def text_area(object_name, method, options = {})
    376:         InstanceTag.new(object_name, method, self, nil, options.delete(:object)).to_text_area_tag(options)
    377:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/FormHelper.html#M000927
- :tinyuri: http://tinyurl.com/4cyzdx
  :path: 
  - ActionView
  - Helpers
  - FormTagHelper
  :method: text_area_tag
  :description: |+
    
        text_area_tag(name, content = nil, options = {})
    Creates a text input area; use a textarea for longer text inputs such as
    blog posts or descriptions.
    
    Options
    
    :size - A string specifying the dimensions (columns by rows) of
    the textarea (e.g., "25x10").
    
    
    :rows - Specify the number of rows in the textarea
    
    
    :cols - Specify the number of columns in the textarea
    
    
    :disabled - If set to true, the user will not be able to use this
    input.
    
    
    Any other key creates standard HTML attributes for the tag.
    
    
    
    Examples
    
      text_area_tag 'post'
      # => <textarea id="post" name="post"></textarea>
    
      text_area_tag 'bio', @user.bio
      # => <textarea id="bio" name="bio">This is my biography.</textarea>
    
      text_area_tag 'body', nil, :rows => 10, :cols => 25
      # => <textarea cols="25" id="body" name="body" rows="10"></textarea>
    
      text_area_tag 'body', nil, :size => "25x10"
      # => <textarea name="body" id="body" cols="25" rows="10"></textarea>
    
      text_area_tag 'description', "Description goes here.", :disabled => true
      # => <textarea disabled="disabled" id="description" name="description">Description goes here.</textarea>
    
      text_area_tag 'comment', nil, :class => 'comment_input'
      # => <textarea class="comment_input" id="comment" name="comment"></textarea>
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/form_tag_helper.rb, line 234
    234:       def text_area_tag(name, content = nil, options = {})
    235:         options.stringify_keys!
    236: 
    237:         if size = options.delete("size")
    238:           options["cols"], options["rows"] = size.split("x") if size.respond_to?(:split)
    239:         end
    240: 
    241:         content_tag :textarea, content, { "name" => name, "id" => name }.update(options.stringify_keys)
    242:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/FormTagHelper.html#M001042
- :tinyuri: http://tinyurl.com/34vwmn
  :path: 
  - ActionView
  - Helpers
  - FormHelper
  :method: text_field
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/FormHelper.html#M000923
- :tinyuri: http://tinyurl.com/53qzxs
  :path: 
  - ActionView
  - Helpers
  - FormTagHelper
  :method: text_field_tag
  :description: |+
    
        text_field_tag(name, value = nil, options = {})
    Creates a standard text field; use these text fields to input smaller
    chunks of text like a username or a search query.
    
    Options
    
    :disabled - If set to true, the user will not be able to use this
    input.
    
    
    :size - The number of visible characters that will fit in the
    input.
    
    
    :maxlength - The maximum number of characters that the browser
    will allow the user to enter.
    
    
    Any other key creates standard HTML attributes for the tag.
    
    
    
    Examples
    
      text_field_tag 'name'
      # => <input id="name" name="name" type="text" />
    
      text_field_tag 'query', 'Enter your search query here'
      # => <input id="query" name="query" type="text" value="Enter your search query here" />
    
      text_field_tag 'request', nil, :class => 'special_input'
      # => <input class="special_input" id="request" name="request" type="text" />
    
      text_field_tag 'address', '', :size => 75
      # => <input id="address" name="address" size="75" type="text" value="" />
    
      text_field_tag 'zip', nil, :maxlength => 5
      # => <input id="zip" maxlength="5" name="zip" type="text" />
    
      text_field_tag 'payment_amount', '$0.00', :disabled => true
      # => <input disabled="disabled" id="payment_amount" name="payment_amount" type="text" value="$0.00" />
    
      text_field_tag 'ip', '0.0.0.0', :maxlength => 15, :size => 20, :class => "ip-input"
      # => <input class="ip-input" id="ip" maxlength="15" name="ip" size="20" type="text" value="0.0.0.0" />
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/form_tag_helper.rb, line 113
    113:       def text_field_tag(name, value = nil, options = {})
    114:         tag :input, { "type" => "text", "name" => name, "id" => name, "value" => value }.update(options.stringify_keys)
    115:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/FormTagHelper.html#M001038
- :tinyuri: http://tinyurl.com/3jdct4
  :path: 
  - ActionView
  - Helpers
  - TextHelper
  :method: textilize
  :description: "\n  \n    textilize(text)\n  \n  \n  \n\
    Returns the text with all the Textile codes turned into\n\
    HTML tags.\n\n\n\
    You can learn more about Textile\xE2\x80\x98s syntax at its website. This method is\n\
    only available if RedCloth is\n\
    available.\n\n\
    190:         def textilize(text)\n\
    191:           if text.blank?\n\
    192:             \"\"\n\
    193:           else\n\
    194:             textilized = RedCloth.new(text, [ :hard_breaks ])\n\
    195:             textilized.hard_breaks = true if textilized.respond_to?(\"hard_breaks=\")\n\
    196:             textilized.to_html\n\
    197:           end\n\
    198:         end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/TextHelper.html#M001054
- :tinyuri: http://tinyurl.com/45sa7q
  :path: 
  - ActionView
  - Helpers
  - TextHelper
  :method: textilize_without_paragraph
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/TextHelper.html#M001055
- :tinyuri: http://tinyurl.com/3s85me
  :path: 
  - ActiveSupport
  - Multibyte
  - Handlers
  - UTF8Handler
  :method: tidy_bytes
  :description: |+
    
        tidy_bytes(str)
    Replaces all the non-utf-8 bytes by their iso-8859-1 or cp1252 equivalent
    resulting in a valid utf-8 string
    
    
    
         # File vendor/rails/activesupport/lib/active_support/multibyte/handlers/utf8_handler.rb, line 359
    359:       def tidy_bytes(str)
    360:         str.split(//u).map do |c|
    361:           if !UTF8_PAT.match(c)
    362:             n = c.unpack('C')[0]
    363:             n < 128 ? n.chr :
    364:             n < 160 ? [UCD.cp1252[n] || n].pack('U') :
    365:             n < 192 ? "\xC2" + n.chr : "\xC3" + (n-64).chr
    366:           else
    367:             c
    368:           end
    369:         end.join
    370:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Handlers/UTF8Handler.html#M000536
- :tinyuri: http://tinyurl.com/49dxou
  :path: 
  - ActionView
  - Helpers
  - DateHelper
  :method: time_ago_in_words
  :description: |+
    
        time_ago_in_words(from_time, include_seconds = false)
    Like distance_of_time_in_words, but
    where to_time is fixed to Time.now.
    
    Examples
    
      time_ago_in_words(3.minutes.from_now)       # => 3 minutes
      time_ago_in_words(Time.now - 15.hours)      # => 15 hours
      time_ago_in_words(Time.now)                 # => less than a minute
    
      from_time = Time.now - 3.days - 14.minutes - 25.seconds     # => 3 days
    
    
      This method is also aliased as
      distance_of_time_in_words_to_now
    
    
    
        # File vendor/rails/actionpack/lib/action_view/helpers/date_helper.rb, line 97
    97:       def time_ago_in_words(from_time, include_seconds = false)
    98:         distance_of_time_in_words(from_time, Time.now, include_seconds)
    99:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/DateHelper.html#M001007
- :tinyuri: http://tinyurl.com/49zg9o
  :path: 
  - ActionView
  - Helpers
  - DateHelper
  :method: time_select
  :description: |+
    
        time_select(object_name, method, options = {})
    Returns a set of select tags (one for hour, minute and optionally second)
    pre-selected for accessing a specified time-based attribute (identified by
    method) on an object assigned to the template (identified by
    object). You can include the seconds with
    :include_seconds.
    
    Examples
    
      # Creates a time select tag that, when POSTed, will be stored in the post variable in the sunrise attribute
      time_select("post", "sunrise")
    
      # Creates a time select tag that, when POSTed, will be stored in the order variable in the submitted attribute
      time_select("order", "submitted")
    
      # Creates a time select tag that, when POSTed, will be stored in the mail variable in the sent_at attribute
      time_select("mail", "sent_at")
    
      # Creates a time select tag with a seconds field that, when POSTed, will be stored in the post variables in
      # the sunrise attribute.
      time_select("post", "start_time", :include_seconds => true)
    
      # Creates a time select tag with a seconds field that, when POSTed, will be stored in the entry variables in
      # the submission_time attribute.
      time_select("entry", "submission_time", :include_seconds => true)
    
      # You can set the :minute_step to 15 which will give you: 00, 15, 30 and 45.
      time_select 'game', 'game_time', {:minute_step => 15}
    
    
    The selects are prepared for multi-parameter assignment to an Active Record
    object.
    
    
    Note: If the day is not included as an option but the month is, the day
    will be set to the 1st to ensure that all month choices are valid.
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/date_helper.rb, line 184
    184:       def time_select(object_name, method, options = {})
    185:         InstanceTag.new(object_name, method, self, nil, options.delete(:object)).to_time_select_tag(options)
    186:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/DateHelper.html#M001010
- :tinyuri: http://tinyurl.com/4nnbc7
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Calculations
  - ClassMethods
  :method: time_with_datetime_fallback
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Calculations/ClassMethods.html#M000608
- :tinyuri: http://tinyurl.com/3lb76x
  :path: 
  - ActionView
  - Helpers
  - FormOptionsHelper
  :method: time_zone_options_for_select
  :description: |+
    
        time_zone_options_for_select(selected = nil, priority_zones = nil, model = TimeZone)
    Returns a string of option tags for pretty much any time zone in the world.
    Supply a TimeZone name as
    selected to have it marked as the selected option tag. You can
    also supply an array of TimeZone objects
    as priority_zones, so that they will be listed above the rest of
    the (long) list. (You can use TimeZone.us_zones as a convenience
    for obtaining a list of the US time zones.)
    
    
    The selected parameter must be either nil, or a string
    that names a TimeZone.
    
    
    By default, model is the TimeZone constant (which can be obtained in
    ActiveRecord as a value object). The only requirement is that the
    model parameter be an object that responds to all, and returns an
    array of objects that represent time zones.
    
    
    NOTE: Only the option tags are returned, you have to wrap this call in a
    regular HTML select tag.
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/form_options_helper.rb, line 275
    275:       def time_zone_options_for_select(selected = nil, priority_zones = nil, model = TimeZone)
    276:         zone_options = ""
    277: 
    278:         zones = model.all
    279:         convert_zones = lambda { |list| list.map { |z| [ z.to_s, z.name ] } }
    280: 
    281:         if priority_zones
    282:           zone_options += options_for_select(convert_zones[priority_zones], selected)
    283:           zone_options += "<option value=\"\" disabled=\"disabled\">-------------</option>\n"
    284: 
    285:           zones = zones.reject { |z| priority_zones.include?( z ) }
    286:         end
    287: 
    288:         zone_options += options_for_select(convert_zones[zones], selected)
    289:         zone_options
    290:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/FormOptionsHelper.html#M000948
- :tinyuri: http://tinyurl.com/42g28g
  :path: 
  - ActionView
  - Helpers
  - FormOptionsHelper
  :method: time_zone_select
  :description: |+
    
        time_zone_select(object, method, priority_zones = nil, options = {}, html_options = {})
    Return select and option tags
    for the given object and method, using time_zone_options_for_select to
    generate the list of option tags.
    
    
    In addition to the :include_blank option documented above, this
    method also supports a :model option, which defaults to TimeZone. This may be used by users to
    specify a different time zone model object. (See time_zone_options_for_select for
    more information.)
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/form_options_helper.rb, line 134
    134:       def time_zone_select(object, method, priority_zones = nil, options = {}, html_options = {})
    135:         InstanceTag.new(object, method, self, nil, options.delete(:object)).to_time_zone_select_tag(priority_zones, options, html_options)
    136:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/FormOptionsHelper.html#M000943
- :tinyuri: http://tinyurl.com/4uppdf
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - TableDefinition
  :method: timestamps
  :description: |+
    
        timestamps()
    Appends :datetime columns :created_at and
    :updated_at to the table.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 443
    443:       def timestamps
    444:         column(:created_at, :datetime)
    445:         column(:updated_at, :datetime)
    446:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#M001223
- :tinyuri: http://tinyurl.com/3hqglt
  :path: 
  - ActiveSupport
  - CoreExtensions
  - String
  - Inflections
  :method: titlecase
  :description: |
    
        titlecase()
    Alias for titleize
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/String/Inflections.html#M000745
- :tinyuri: http://tinyurl.com/4d36qs
  :path: 
  - Inflector
  :method: titleize
  :description: |+
    
        titleize(word)
    Capitalizes all the words and replaces some characters in the string to
    create a nicer looking title. Titleize is meant for creating pretty output.
    It is not used in the Rails internals.
    
    
    titleize is also aliased as as
    titlecase
    
    
    Examples
    
    
      "man from the boondocks".titleize #=> "Man From The Boondocks"
      "x-men: the last stand".titleize #=> "X Men: The Last Stand"
    
    
    
         # File vendor/rails/activesupport/lib/active_support/inflector.rb, line 164
    164:   def titleize(word)
    165:     humanize(underscore(word)).gsub(/\b([a-z])/) { $1.capitalize }
    166:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Inflector.html#M001620
- :tinyuri: http://tinyurl.com/3vvboc
  :path: 
  - ActiveSupport
  - CoreExtensions
  - String
  - Inflections
  :method: titleize
  :description: |+
    
        titleize()
    Capitalizes all the words and replaces some characters in the string to
    create a nicer looking title. Titleize is meant for creating pretty output.
    It is not used in the Rails internals.
    
    
    titleize is also aliased as as titlecase
    
    
    Examples
    
    
      "man from the boondocks".titleize #=> "Man From The Boondocks"
      "x-men: the last stand".titleize #=> "X Men: The Last Stand"
    
    
      This method is also aliased as
      titlecase
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/string/inflections.rb, line 63
    63:         def titleize
    64:           Inflector.titleize(self)
    65:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/String/Inflections.html#M000744
- :tinyuri: http://tinyurl.com/2wdf9c
  :path: 
  - ActiveSupport
  - CoreExtensions
  - String
  - Access
  :method: to
  :description: |+
    
        to(position)
    Returns the beginning of the string up to
    the position treating the string as an array (where 0 is the first character).
    
    
    Examples:
    
    
      "hello".to(0)  # => "h"
      "hello".to(2)  # => "hel"
      "hello".to(10) # => "hello"
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/string/access.rb, line 32
    32:         def to(position)
    33:           chars[0..position].to_s
    34:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/String/Access.html#M000756
- :tinyuri: http://tinyurl.com/3osun4
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Array
  - Access
  :method: to
  :description: |+
    
        to(position)
    Returns the beginning of the array up to
    the position.
    
    
    Examples:
    
    
      %w( a b c d ).to(0)  # => %w( a )
      %w( a b c d ).to(2)  # => %w( a b c )
      %w( a b c d ).to(10) # => %w( a b c d )
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/array/access.rb, line 22
    22:         def to(position)
    23:           self[0..position]
    24:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Array/Access.html#M000635
- :tinyuri: http://tinyurl.com/5yafuj
  :path: 
  - ActiveSupport
  - Multibyte
  - Handlers
  - UTF8Handler
  :method: to_case
  :description: |+
    
        to_case(way, str)
    Convert characters to a different case
    
    
    
         # File vendor/rails/activesupport/lib/active_support/multibyte/handlers/utf8_handler.rb, line 453
    453:       def to_case(way, str)
    454:         u_unpack(str).map do |codepoint|
    455:           cp = UCD[codepoint] 
    456:           unless cp.nil?
    457:             ncp = cp.send(way)
    458:             ncp > 0 ? ncp : codepoint
    459:           else
    460:             codepoint
    461:           end
    462:         end.pack('U*')
    463:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Handlers/UTF8Handler.html#M000543
- :tinyuri: http://tinyurl.com/4basyq
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Date
  - Conversions
  :method: to_date
  :description: |+
    
        to_date()
    A method to keep Time, Date and DateTime instances interchangeable on
    conversions. In this case, it simply returns self.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/date/conversions.rb, line 63
    63:         def to_date
    64:           self
    65:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Date/Conversions.html#M000675
- :tinyuri: http://tinyurl.com/yvanfb
  :path: 
  - ActiveSupport
  - CoreExtensions
  - String
  - Conversions
  :method: to_date
  :description: |+
    
        to_date()
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/string/conversions.rb, line 18
    18:         def to_date
    19:           ::Date.new(*ParseDate.parsedate(self)[0..2])
    20:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/String/Conversions.html#M000738
- :tinyuri: http://tinyurl.com/3n3zv2
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Conversions
  :method: to_date
  :description: |+
    
        to_date()
    Convert a Time object to a Date, dropping hour, minute, and second
    precision.
    
    Examples
    
      my_time = Time.now
      # => Mon Nov 12 22:59:51 -0500 2007
    
      my_time.to_date
      #=> Mon, 12 Nov 2007
    
      your_time = Time.parse("1/13/2009 1:13:03 P.M.")
      # => Tue Jan 13 13:13:03 -0500 2009
    
      your_time.to_date
      # => Tue, 13 Jan 2009
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/time/conversions.rb, line 64
    64:         def to_date
    65:           ::Date.new(year, month, day)
    66:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Conversions.html#M000570
- :tinyuri: http://tinyurl.com/4wz45h
  :path: 
  - ActiveSupport
  - CoreExtensions
  - DateTime
  - Conversions
  :method: to_date
  :description: |+
    
        to_date()
    Converts self to a Ruby Date object; time portion is discarded
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/date_time/conversions.rb, line 52
    52:         def to_date
    53:           ::Date.new(year, month, day)
    54:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/DateTime/Conversions.html#M000718
- :tinyuri: http://tinyurl.com/4eszzu
  :path: 
  - ActiveSupport
  - CoreExtensions
  - String
  - Conversions
  :method: to_datetime
  :description: |+
    
        to_datetime()
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/string/conversions.rb, line 22
    22:         def to_datetime
    23:           ::DateTime.civil(*ParseDate.parsedate(self)[0..5].map {|arg| arg || 0} << 0)
    24:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/String/Conversions.html#M000739
- :tinyuri: http://tinyurl.com/4luwk5
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Date
  - Conversions
  :method: to_datetime
  :description: |+
    
        to_datetime()
    Converts a Date instance to a DateTime, where the time is set to the
    beginning of the day and UTC offset is set to 0.
    
    Example:
    
      date = Date.new(2007, 11, 10)  # => Sat, 10 Nov 2007
    
      date.to_datetime               # => Sat, 10 Nov 2007 00:00:00 0000
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/date/conversions.rb, line 88
    88:         def to_datetime
    89:           ::DateTime.civil(year, month, day, 0, 0, 0, 0)
    90:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Date/Conversions.html#M000677
- :tinyuri: http://tinyurl.com/532rml
  :path: 
  - ActiveSupport
  - CoreExtensions
  - DateTime
  - Conversions
  :method: to_datetime
  :description: |+
    
        to_datetime()
    To be able to keep Times, Dates and DateTimes interchangeable on
    conversions
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/date_time/conversions.rb, line 63
    63:         def to_datetime
    64:           self
    65:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/DateTime/Conversions.html#M000720
- :tinyuri: http://tinyurl.com/3t9r39
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Conversions
  :method: to_datetime
  :description: |+
    
        to_datetime()
    Converts a Time instance to a Ruby DateTime instance, preserving UTC
    offset.
    
    Examples
    
      my_time = Time.now
      # => Mon Nov 12 23:04:21 -0500 2007
    
      my_time.to_datetime
      # => Mon, 12 Nov 2007 23:04:21 -0500
    
      your_time = Time.parse("1/13/2009 1:13:03 P.M.")
      # => Tue Jan 13 13:13:03 -0500 2009
    
      your_time.to_datetime
      # => Tue, 13 Jan 2009 13:13:03 -0500
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/time/conversions.rb, line 88
    88:         def to_datetime
    89:           ::DateTime.civil(year, month, day, hour, min, sec, Rational(utc_offset, 86400))
    90:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Conversions.html#M000572
- :tinyuri: http://tinyurl.com/yrtj9e
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Conversions
  :method: to_formatted_s
  :description: |+
    
        to_formatted_s(format = :default)
    Convert to a formatted string - see DATE_FORMATS for predefined formats.
    You can also add your own formats to the DATE_FORMATS constant and use them
    with this method.
    
    
    This method is also aliased as to_s.
    
    Examples:
    
      time = Time.now                     # => Thu Jan 18 06:10:17 CST 2007
    
      time.to_formatted_s(:time)          # => "06:10:17"
      time.to_s(:time)                    # => "06:10:17"
    
      time.to_formatted_s(:db)            # => "2007-01-18 06:10:17"
      time.to_formatted_s(:short)         # => "18 Jan 06:10"
      time.to_formatted_s(:long)          # => "January 18, 2007 06:10"
      time.to_formatted_s(:long_ordinal)  # => "January 18th, 2007 06:10"
      time.to_formatted_s(:rfc822)        # => "Thu, 18 Jan 2007 06:10:17 -0600"
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/time/conversions.rb, line 38
    38:         def to_formatted_s(format = :default)
    39:           if formatter = DATE_FORMATS[format]
    40:             if formatter.respond_to?(:call)
    41:               formatter.call(self).to_s
    42:             else
    43:               strftime(formatter)
    44:             end
    45:           else
    46:             to_default_s
    47:           end
    48:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Conversions.html#M000569
- :tinyuri: http://tinyurl.com/4hh37x
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Range
  - Conversions
  :method: to_formatted_s
  :description: |+
    
        to_formatted_s(format = :default)
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/range/conversions.rb, line 17
    17:         def to_formatted_s(format = :default)
    18:           RANGE_FORMATS[format] ? RANGE_FORMATS[format].call(first, last) : to_default_s
    19:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Range/Conversions.html#M000560
- :tinyuri: http://tinyurl.com/4vlv9g
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Date
  - Conversions
  :method: to_formatted_s
  :description: |+
    
        to_formatted_s(format = :default)
    Convert to a formatted string - see DATE_FORMATS for predefined formats.
    You can also add your own formats to the DATE_FORMATS constant and use them
    with this method.
    
    
    This method is also aliased as to_s.
    
    Examples:
    
      date = Date.new(2007, 11, 10)       # => Sat, 10 Nov 2007
    
      date.to_formatted_s(:db)            # => "2007-11-10"
      date.to_s(:db)                      # => "2007-11-10"
    
      date.to_formatted_s(:short)         # => "10 Nov"
      date.to_formatted_s(:long)          # => "November 10, 2007"
      date.to_formatted_s(:long_ordinal)  # => "November 10th, 2007"
      date.to_formatted_s(:rfc822)        # => "10 Nov 2007"
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/date/conversions.rb, line 44
    44:         def to_formatted_s(format = :default)
    45:           if formatter = DATE_FORMATS[format]
    46:             if formatter.respond_to?(:call)
    47:               formatter.call(self).to_s
    48:             else
    49:               strftime(formatter)
    50:             end
    51:           else
    52:             to_default_s
    53:           end
    54:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Date/Conversions.html#M000673
- :tinyuri: http://tinyurl.com/3zmmhu
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Array
  - Conversions
  :method: to_formatted_s
  :description: |+
    
        to_formatted_s(format = :default)
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/array/conversions.rb, line 48
    48:         def to_formatted_s(format = :default)
    49:           case format
    50:             when :db
    51:               if respond_to?(:empty?) && self.empty?
    52:                 "null"
    53:               else
    54:                 collect { |element| element.id }.join(",")
    55:               end
    56:             else
    57:               to_default_s
    58:           end
    59:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Array/Conversions.html#M000632
- :tinyuri: http://tinyurl.com/3wrhkd
  :path: 
  - ActiveSupport
  - CoreExtensions
  - DateTime
  - Conversions
  :method: to_formatted_s
  :description: |+
    
        to_formatted_s(format = :default)
    Convert to a formatted string - see DATE_FORMATS for predefined formats.
    You can also add your own formats to the DATE_FORMATS constant and use them
    with this method.
    
    
    This method is also aliased as to_s.
    
    Examples:
    
      datetime = DateTime.civil(2007, 12, 4, 0, 0, 0, 0)   # => Tue, 04 Dec 2007 00:00:00 +0000
    
      datetime.to_formatted_s(:db)            # => "2007-12-04 00:00:00"
      datetime.to_s(:db)                      # => "2007-12-04 00:00:00"
      datetime.to_s(:number)                  # => "20071204000000"
      datetime.to_formatted_s(:short)         # => "04 Dec 00:00"
      datetime.to_formatted_s(:long)          # => "December 04, 2007 00:00"
      datetime.to_formatted_s(:long_ordinal)  # => "December 4th, 2007 00:00"
      datetime.to_formatted_s(:rfc822)        # => "Tue, 04 Dec 2007 00:00:00 +0000"
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/date_time/conversions.rb, line 34
    34:         def to_formatted_s(format = :default)
    35:           if formatter = ::Time::DATE_FORMATS[format]
    36:             if formatter.respond_to?(:call)
    37:               formatter.call(self).to_s
    38:             else
    39:               strftime(formatter)
    40:             end
    41:           else
    42:             to_datetime_default_s
    43:           end
    44:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/DateTime/Conversions.html#M000716
- :tinyuri: http://tinyurl.com/4s47pc
  :path: 
  - HashWithIndifferentAccess
  :method: to_hash
  :description: |+
    
        to_hash()
    Convert to a Hash with String keys.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/hash/indifferent_access.rb, line 69
    69:   def to_hash
    70:     Hash.new(default).merge(self)
    71:   end
    
    
  :uri: http://api.rubyonrails.org/classes/HashWithIndifferentAccess.html#M000075
- :tinyuri: http://tinyurl.com/3pp3j5
  :path: 
  - Object
  :method: to_json
  :description: |+
    
        to_json(options = {})
    Dumps object in JSON (JavaScript Object
    Notation). See www.json.org for more
    info.
    
    
    
       # File vendor/rails/activesupport/lib/active_support/json/encoders/object.rb, line 3
    3:   def to_json(options = {})
    4:     ActiveSupport::JSON.encode(instance_values, options)
    5:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Object.html#M000143
- :tinyuri: http://tinyurl.com/ysnb9b
  :path: 
  - ActiveRecord
  - Serialization
  :method: to_json
  :description: "\n  \n    to_json(options = {})\n  \n  \n  \n\
    Returns a JSON string representing the model. Some configuration is\n\
    available through options.\n\n\n\
    Without any options, the returned JSON string will include all the\n\
    model\xE2\x80\x98s attributes. For example:\n\n\n  konata = User.find(1)\n  konata.to_json\n\n  {\"id\": 1, \"name\": \"Konata Izumi\", \"age\": 16,\n   \"created_at\": \"2006/08/01\", \"awesome\": true}\n\n\n\
    The :only and :except options can be used to limit the attributes included,\n\
    and work similar to the attributes method. For example:\n\n\n  konata.to_json(:only => [ :id, :name ])\n\n  {\"id\": 1, \"name\": \"Konata Izumi\"}\n\n  konata.to_json(:except => [ :id, :created_at, :age ])\n\n  {\"name\": \"Konata Izumi\", \"awesome\": true}\n\n\n\
    To include any methods on the model, use :methods.\n\n\n  konata.to_json(:methods => :permalink)\n\n  {\"id\": 1, \"name\": \"Konata Izumi\", \"age\": 16,\n   \"created_at\": \"2006/08/01\", \"awesome\": true,\n   \"permalink\": \"1-konata-izumi\"}\n\n\n\
    To include associations, use :include.\n\n\n  konata.to_json(:include => :posts)\n\n  {\"id\": 1, \"name\": \"Konata Izumi\", \"age\": 16,\n   \"created_at\": \"2006/08/01\", \"awesome\": true,\n   \"posts\": [{\"id\": 1, \"author_id\": 1, \"title\": \"Welcome to the weblog\"},\n             {\"id\": 2, author_id: 1, \"title\": \"So I was thinking\"}]}\n\n\n\
    56:     def to_json(options = {})\n\
    57:       JsonSerializer.new(self, options).to_s\n\
    58:     end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Serialization.html#M001135
- :tinyuri: http://tinyurl.com/526lqk
  :path: 
  - ActiveSupport
  - JSON
  - Variable
  :method: to_json
  :description: |+
    
        to_json(options=nil)
    
    
       # File vendor/rails/activesupport/lib/active_support/json/variable.rb, line 5
    5:       def to_json(options=nil)
    6:         self
    7:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/JSON/Variable.html#M000559
- :tinyuri: http://tinyurl.com/4c7xur
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Hash
  - Keys
  :method: to_options
  :description: |
    
        to_options()
    Alias for symbolize_keys
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Hash/Keys.html#M000620
- :tinyuri: http://tinyurl.com/4qbtxa
  :path: 
  - HashWithIndifferentAccess
  :method: to_options!
  :description: |+
    
        to_options!()
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/hash/indifferent_access.rb, line 66
    66:   def to_options!; self end
    
    
  :uri: http://api.rubyonrails.org/classes/HashWithIndifferentAccess.html#M000074
- :tinyuri: http://tinyurl.com/4j9ew2
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Hash
  - Keys
  :method: to_options!
  :description: |
    
        to_options!()
    Alias for symbolize_keys!
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Hash/Keys.html#M000621
- :tinyuri: http://tinyurl.com/454jtj
  :path: 
  - Object
  :method: to_param
  :description: |+
    
        to_param()
    Alias of to_s.
    
    
    
       # File vendor/rails/activesupport/lib/active_support/core_ext/object/conversions.rb, line 3
    3:   def to_param
    4:     to_s
    5:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Object.html#M000135
- :tinyuri: http://tinyurl.com/4fooev
  :path: 
  - Object
  :method: to_param
  :description: |+
    
        to_param()
    
    
       # File vendor/rails/actionpack/lib/action_controller/routing.rb, line 7
    7:   def to_param
    8:     to_s
    9:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Object.html#M000132
- :tinyuri: http://tinyurl.com/4yjtcf
  :path: 
  - ActiveResource
  - Base
  :method: to_param
  :description: |+
    
        to_param()
    Allows ActiveResource objects to be
    used as parameters in ActionPack URL generation.
    
    
    
         # File vendor/rails/activeresource/lib/active_resource/base.rb, line 555
    555:     def to_param
    556:       id && id.to_s
    557:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Base.html#M000843
- :tinyuri: http://tinyurl.com/3rhfb7
  :path: 
  - ActiveRecord
  - Base
  :method: to_param
  :description: |+
    
        to_param()
    Enables Active Record objects to be used as URL parameters in Action Pack
    automatically.
    
    
    
          # File vendor/rails/activerecord/lib/active_record/base.rb, line 1946
    1946:       def to_param
    1947:         # We can't use alias_method here, because method 'id' optimizes itself on the fly.
    1948:         (id = self.id) ? id.to_s : nil # Be sure to stringify the id for routes
    1949:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001427
- :tinyuri: http://tinyurl.com/4mr5g6
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Array
  - Conversions
  :method: to_param
  :description: |+
    
        to_param()
    Calls to_param on all its elements
    and joins the result with slashes. This is used by url_for in Action Pack.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/array/conversions.rb, line 28
    28:         def to_param
    29:           map(&:to_param).join '/'
    30:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Array/Conversions.html#M000630
- :tinyuri: http://tinyurl.com/48madn
  :path: 
  - Rails
  - Configuration
  :method: to_prepare
  :description: |+
    
        to_prepare(&callback)
    Add a preparation callback that will run before every request in
    development mode, or before the first request in production.
    
    
    See Dispatcher#to_prepare.
    
    
    
         # File vendor/rails/railties/lib/initializer.rb, line 538
    538:     def to_prepare(&callback)
    539:       require 'dispatcher' unless defined?(::Dispatcher)
    540:       Dispatcher.to_prepare(&callback)
    541:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Configuration.html#M001613
- :tinyuri: http://tinyurl.com/43qrjy
  :path: 
  - ActionController
  - Dispatcher
  :method: to_prepare
  :description: |+
    
        to_prepare(identifier = nil, &block)
    Add a preparation callback. Preparation callbacks are run before every
    request in development mode, and before the first request in production
    mode.
    
    
    An optional identifier may be supplied for the callback. If provided, to_prepare may be called again with the
    same identifier to replace the existing callback. Passing an identifier is
    a suggested practice if the code adding a preparation block may be
    reloaded.
    
    
    
        # File vendor/rails/actionpack/lib/action_controller/dispatcher.rb, line 34
    34:       def to_prepare(identifier = nil, &block)
    35:         # Already registered: update the existing callback
    36:         if identifier
    37:           if callback = callbacks[:prepare].assoc(identifier)
    38:             callback[1] = block
    39:           else
    40:             callbacks[:prepare] << [identifier, block]
    41:           end
    42:         else
    43:           callbacks[:prepare] << block
    44:         end
    45:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Dispatcher.html#M000467
- :tinyuri: http://tinyurl.com/4w3hox
  :path: 
  - Object
  :method: to_query
  :description: |+
    
        to_query(key)
    Converts an object into a string suitable for use as a URL query string,
    using the given key as the param name.
    
    
    Note: This method is defined as a default implementation for all Objects
    for Hash#to_query to work.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/object/conversions.rb, line 11
    11:   def to_query(key)
    12:     "#{CGI.escape(key.to_s)}=#{CGI.escape(to_param.to_s)}"
    13:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Object.html#M000136
- :tinyuri: http://tinyurl.com/4edw4d
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Array
  - Conversions
  :method: to_query
  :description: |+
    
        to_query(key)
    Converts an array into a string suitable for use as a URL query string,
    using the given key as the param name.
    
    Example:
    
      ['Rails', 'coding'].to_query('hobbies') => "hobbies%5B%5D=Rails&hobbies%5B%5D=coding"
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/array/conversions.rb, line 37
    37:         def to_query(key)
    38:           collect { |value| value.to_query("#{key}[]") } * '&'
    39:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Array/Conversions.html#M000631
- :tinyuri: http://tinyurl.com/4x94yu
  :path: 
  - ActiveResource
  - Request
  :method: to_s
  :description: |+
    
        to_s()
    
    
        # File vendor/rails/activeresource/lib/active_resource/http_mock.rb, line 93
    93:     def to_s
    94:       "<#{method.to_s.upcase}: #{path} [#{headers}] (#{body})>"
    95:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Request.html#M000865
- :tinyuri: http://tinyurl.com/4szr6t
  :path: 
  - TimeZone
  :method: to_s
  :description: |+
    
        to_s()
    Returns a textual representation of this time zone.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/values/time_zone.rb, line 70
    70:   def to_s
    71:     "(UTC#{formatted_offset}) #{name}"
    72:   end
    
    
  :uri: http://api.rubyonrails.org/classes/TimeZone.html#M000023
- :tinyuri: http://tinyurl.com/3q6nxm
  :path: 
  - SourceAnnotationExtractor
  - Annotation
  :method: to_s
  :description: |+
    
        to_s(options={})
    
    
       # File vendor/rails/railties/lib/source_annotation_extractor.rb, line 3
    3:     def to_s(options={})
    4:       s = "[%3d] " % line
    5:       s << "[#{tag}] " if options[:tag]
    6:       s << text
    7:     end
    
    
  :uri: http://api.rubyonrails.org/classes/SourceAnnotationExtractor/Annotation.html#M000105
- :tinyuri: http://tinyurl.com/47bz35
  :path: 
  - Plugin
  :method: to_s
  :description: |+
    
        to_s()
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 157
    157:   def to_s
    158:     "#{@name.ljust(30)}#{@uri}"
    159:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Plugin.html#M000093
- :tinyuri: http://tinyurl.com/52l884
  :path: 
  - Mime
  - Type
  :method: to_s
  :description: |+
    
        to_s()
    
    
         # File vendor/rails/actionpack/lib/action_controller/mime_type.rb, line 127
    127:     def to_s
    128:       @string
    129:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Mime/Type.html#M001654
- :tinyuri: http://tinyurl.com/3hbu7c
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Array
  - Conversions
  :method: to_sentence
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Array/Conversions.html#M000629
- :tinyuri: http://tinyurl.com/4clkcb
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - TableDefinition
  :method: to_sql
  :description: |+
    
        to_sql()
    Returns a String whose contents are the column definitions concatenated
    together. This string can then be prepended and appended to to generate the
    final SQL to create the table.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 463
    463:       def to_sql
    464:         @columns * ', '
    465:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#M001226
- :tinyuri: http://tinyurl.com/4qqfer
  :path: 
  - ActiveSupport
  - Multibyte
  - Chars
  :method: to_str
  :description: |+
    
        to_str()
    The magic method to make String and Chars
    comparable
    
    
    
        # File vendor/rails/activesupport/lib/active_support/multibyte/chars.rb, line 38
    38:     def to_str
    39:       # Using any other ways of overriding the String itself will lead you all the way from infinite loops to
    40:       # core dumps. Don't go there.
    41:       @string
    42:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Chars.html#M000547
- :tinyuri: http://tinyurl.com/3oeb8k
  :path: 
  - Mime
  - Type
  :method: to_str
  :description: |+
    
        to_str()
    
    
         # File vendor/rails/actionpack/lib/action_controller/mime_type.rb, line 131
    131:     def to_str
    132:       to_s
    133:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Mime/Type.html#M001655
- :tinyuri: http://tinyurl.com/5xstg2
  :path: 
  - Mime
  - Type
  :method: to_sym
  :description: |+
    
        to_sym()
    
    
         # File vendor/rails/actionpack/lib/action_controller/mime_type.rb, line 135
    135:     def to_sym
    136:       @symbol || @string.to_sym
    137:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Mime/Type.html#M001656
- :tinyuri: http://tinyurl.com/42yfqw
  :path: 
  - ActiveSupport
  - CoreExtensions
  - String
  - Conversions
  :method: to_time
  :description: |+
    
        to_time(form = :utc)
    Form can be either :utc (default) or :local.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/string/conversions.rb, line 14
    14:         def to_time(form = :utc)
    15:           ::Time.send("#{form}_time", *ParseDate.parsedate(self)[0..5].map {|arg| arg || 0})
    16:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/String/Conversions.html#M000737
- :tinyuri: http://tinyurl.com/3rwypo
  :path: 
  - ActiveSupport
  - CoreExtensions
  - DateTime
  - Conversions
  :method: to_time
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/DateTime/Conversions.html#M000719
- :tinyuri: http://tinyurl.com/493ts7
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Conversions
  :method: to_time
  :description: |+
    
        to_time()
    A method to keep Time, Date and DateTime instances interchangeable on
    conversions. In this case, it simply returns self.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/time/conversions.rb, line 70
    70:         def to_time
    71:           self
    72:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Conversions.html#M000571
- :tinyuri: http://tinyurl.com/3eg2sh
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Date
  - Conversions
  :method: to_time
  :description: |+
    
        to_time(form = :local)
    Converts a Date instance to a Time, where the time is set to the beginning
    of the day. The timezone can be either :local or :utc (default :local).
    
    Examples:
    
      date = Date.new(2007, 11, 10)  # => Sat, 10 Nov 2007
    
      date.to_time                   # => Sat Nov 10 00:00:00 0800 2007
      date.to_time(:local)           # => Sat Nov 10 00:00:00 0800 2007
    
      date.to_time(:utc)             # => Sat Nov 10 00:00:00 UTC 2007
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/date/conversions.rb, line 77
    77:         def to_time(form = :local)
    78:           ::Time.send("#{form}_time", year, month, day)
    79:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Date/Conversions.html#M000676
- :tinyuri: http://tinyurl.com/3lzgtp
  :path: 
  - ActiveRecord
  - Serialization
  :method: to_xml
  :description: "\n  \n    to_xml(options = {}, &block)\n  \n  \n  \n\
    Builds an XML document to represent the model. Some configuration is\n\
    available through options, however more complicated cases should\n\
    override ActiveRecord\xE2\x80\x98s to_xml.\n\n\n\
    By default the generated XML document will include the processing\n\
    instruction and all object\xE2\x80\x98s attributes. For example:\n\n\n  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <topic>\n    <title>The First Topic</title>\n    <author-name>David</author-name>\n    <id type=\"integer\">1</id>\n    <approved type=\"boolean\">false</approved>\n    <replies-count type=\"integer\">0</replies-count>\n    <bonus-time type=\"datetime\">2000-01-01T08:28:00+12:00</bonus-time>\n    <written-on type=\"datetime\">2003-07-16T09:28:00+1200</written-on>\n    <content>Have a nice day</content>\n    <author-email-address>david@loudthinking.com</author-email-address>\n    <parent-id></parent-id>\n    <last-read type=\"date\">2004-04-15</last-read>\n  </topic>\n\n\n\
    This behavior can be controlled with :only, :except, :skip_instruct,\n\
    :skip_types and :dasherize. The :only and :except options are the same as\n\
    for the attributes method. The default is to dasherize all column names, to\n\
    disable this, set :dasherize to false. To not have the column type included\n\
    in the XML output, set :skip_types to true.\n\n\n\
    For instance:\n\n\n  topic.to_xml(:skip_instruct => true, :except => [ :id, :bonus_time, :written_on, :replies_count ])\n\n  <topic>\n    <title>The First Topic</title>\n    <author-name>David</author-name>\n    <approved type=\"boolean\">false</approved>\n    <content>Have a nice day</content>\n    <author-email-address>david@loudthinking.com</author-email-address>\n    <parent-id></parent-id>\n    <last-read type=\"date\">2004-04-15</last-read>\n  </topic>\n\n\n\
    To include first level associations use :include\n\n\n  firm.to_xml :include => [ :account, :clients ]\n\n  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <firm>\n    <id type=\"integer\">1</id>\n    <rating type=\"integer\">1</rating>\n    <name>37signals</name>\n    <clients type=\"array\">\n      <client>\n        <rating type=\"integer\">1</rating>\n        <name>Summit</name>\n      </client>\n      <client>\n        <rating type=\"integer\">1</rating>\n        <name>Microsoft</name>\n      </client>\n    </clients>\n    <account>\n      <id type=\"integer\">1</id>\n      <credit-limit type=\"integer\">50</credit-limit>\n    </account>\n  </firm>\n\n\n\
    To include any methods on the object(s) being called use :methods\n\n\n  firm.to_xml :methods => [ :calculated_earnings, :real_earnings ]\n\n  <firm>\n    # ... normal attributes as shown above ...\n    <calculated-earnings>100000000000000000</calculated-earnings>\n    <real-earnings>5</real-earnings>\n  </firm>\n\n\n\
    To call any Proc\xE2\x80\x98s on the object(s) use :procs. The Proc\xE2\x80\x98s are\n\
    passed a modified version of the options hash that was given to to_xml.\n\n\n  proc = Proc.new { |options| options[:builder].tag!('abc', 'def') }\n  firm.to_xml :procs => [ proc ]\n\n  <firm>\n    # ... normal attributes as shown above ...\n    <abc>def</abc>\n  </firm>\n\n\n\
    Alternatively, you can also just yield the builder object as part of the to_xml call:\n\n\n  firm.to_xml do |xml|\n    xml.creator do\n      xml.first_name \"David\"\n      xml.last_name \"Heinemeier Hansson\"\n    end\n  end\n\n  <firm>\n    # ... normal attributes as shown above ...\n    <creator>\n      <first_name>David</first_name>\n      <last_name>Heinemeier Hansson</last_name>\n    </creator>\n  </firm>\n\n\n\
    You can override the to_xml method\n\
    in your ActiveRecord::Base subclasses if you need\n\
    123:     def to_xml(options = {}, &block)\n\
    124:       serializer = XmlSerializer.new(self, options)\n\
    125:       block_given? ? serializer.to_s(&block) : serializer.to_s\n\
    126:     end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Serialization.html#M001137
- :tinyuri: http://tinyurl.com/5uks67
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Array
  - Conversions
  :method: to_xml
  :description: |+
    
        to_xml(options = {}) {|xml if block_given?| ...}
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/array/conversions.rb, line 61
    61:         def to_xml(options = {})
    62:           raise "Not all elements respond to to_xml" unless all? { |e| e.respond_to? :to_xml }
    63: 
    64:           options[:root]     ||= all? { |e| e.is_a?(first.class) && first.class.to_s != "Hash" } ? first.class.to_s.underscore.pluralize : "records"
    65:           options[:children] ||= options[:root].singularize
    66:           options[:indent]   ||= 2
    67:           options[:builder]  ||= Builder::XmlMarkup.new(:indent => options[:indent])
    68: 
    69:           root     = options.delete(:root).to_s
    70:           children = options.delete(:children)
    71: 
    72:           if !options.has_key?(:dasherize) || options[:dasherize]
    73:             root = root.dasherize
    74:           end
    75: 
    76:           options[:builder].instruct! unless options.delete(:skip_instruct)
    77: 
    78:           opts = options.merge({ :root => children })
    79: 
    80:           xml = options[:builder]
    81:           if empty?
    82:             xml.tag!(root, options[:skip_types] ? {} : {:type => "array"})
    83:           else
    84:             xml.tag!(root, options[:skip_types] ? {} : {:type => "array"}) {
    85:               yield xml if block_given?
    86:               each { |e| e.to_xml(opts.merge!({ :skip_instruct => true })) }
    87:             }
    88:           end
    89:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Array/Conversions.html#M000633
- :tinyuri: http://tinyurl.com/3zxqcl
  :path: 
  - ActiveRecord
  - Errors
  :method: to_xml
  :description: |+
    
        to_xml(options={})
    Return an XML representation of this error object.
    
    
      class Company < ActiveRecord::Base
        validates_presence_of :name, :address, :email
        validates_length_of :name, :in => 5..30
      end
    
      company = Company.create(:address => '123 First St.')
      company.errors.to_xml # =>
        <?xml version="1.0" encoding="UTF-8"?>
        <errors>
          <error>Name is too short (minimum is 5 characters)</error>
          <error>Name can't be blank</error>
          <error>Address can't be blank</error>
        </errors>
    
    
    
         # File vendor/rails/activerecord/lib/active_record/validations.rb, line 219
    219:     def to_xml(options={})
    220:       options[:root] ||= "errors"
    221:       options[:indent] ||= 2
    222:       options[:builder] ||= Builder::XmlMarkup.new(:indent => options[:indent])
    223: 
    224:       options[:builder].instruct! unless options.delete(:skip_instruct)
    225:       options[:builder].errors do |e|
    226:         full_messages.each { |msg| e.error(msg) }
    227:       end
    228:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Errors.html#M001361
- :tinyuri: http://tinyurl.com/4daghk
  :path: 
  - ActiveResource
  - Base
  :method: to_xml
  :description: |+
    
        to_xml(options={})
    A method to convert the the resource to an XML string.
    
    Options
    
    The options parameter is handed off to the to_xml method on each attribute, so it
    has the same options as the to_xml
    methods in ActiveSupport.
    
    
    indent:Set the indent level for the XML output (default is +2+).
    
    
    dasherize:Boolean option to determine whether or not element names should replace
    underscores with dashes (default is false).
    
    
    skip_instruct:Toggle skipping the +instruct!+ call on the XML builder that generates the
    XML declaration (default is false).
    
    
    
    Examples
    
      my_group = SubsidiaryGroup.find(:first)
      my_group.to_xml
      # => <?xml version="1.0" encoding="UTF-8"?>
      #    <subsidiary_group> [...] </subsidiary_group>
    
      my_group.to_xml(:dasherize => true)
      # => <?xml version="1.0" encoding="UTF-8"?>
      #    <subsidiary-group> [...] </subsidiary-group>
    
      my_group.to_xml(:skip_instruct => true)
      # => <subsidiary_group> [...] </subsidiary_group>
    
    
    
         # File vendor/rails/activeresource/lib/active_resource/base.rb, line 707
    707:     def to_xml(options={})
    708:       attributes.to_xml({:root => self.class.element_name}.merge(options))
    709:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Base.html#M000851
- :tinyuri: http://tinyurl.com/4rfbk3
  :path: 
  - TimeZone
  :method: today
  :description: |+
    
        today()
    Return the current date in this time zone.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/values/time_zone.rb, line 42
    42:   def today
    43:     now.to_date
    44:   end
    
    
  :uri: http://api.rubyonrails.org/classes/TimeZone.html#M000019
- :tinyuri: http://tinyurl.com/3p37dt
  :path: 
  - ActiveRecord
  - Base
  :method: toggle
  :description: "\n  \n    toggle(attribute)\n  \n  \n  \n\
    Turns an attribute that\xE2\x80\x98s currently true into false and vice\n\
    2069:       def toggle(attribute)\n\
    2070:         self[attribute] = !send(\"#{attribute}?\")\n\
    2071:         self\n\
    2072:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001442
- :tinyuri: http://tinyurl.com/4682gc
  :path: 
  - ActionView
  - Helpers
  - PrototypeHelper
  - JavaScriptGenerator
  - GeneratorMethods
  :method: toggle
  :description: |+
    
        toggle(*ids)
    Toggles the visibility of the DOM elements with the given ids.
    Example:
    
    
     # Show a few people
     # Generates: ["person_14", "person_12", "person_23"].each(Element.toggle);
     page.toggle 'person_14', 'person_12', 'person_23'      # Hides the elements
     page.toggle 'person_14', 'person_12', 'person_23'      # Shows the previously hidden elements
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/prototype_helper.rb, line 822
    822:           def toggle(*ids)
    823:             loop_on_multiple_args 'Element.toggle', ids            
    824:           end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#M000983
- :tinyuri: http://tinyurl.com/4bz4pz
  :path: 
  - ActiveRecord
  - Base
  :method: toggle!
  :description: |+
    
        toggle!(attribute)
    Toggles the attribute and saves the record.
    
    
    
          # File vendor/rails/activerecord/lib/active_record/base.rb, line 2075
    2075:       def toggle!(attribute)
    2076:         toggle(attribute).update_attribute(attribute, self[attribute])
    2077:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001443
- :tinyuri: http://tinyurl.com/3ud9n2
  :path: 
  - HTML
  - Sanitizer
  :method: tokenize
  :description: |+
    
        tokenize(text, options)
    
    
        # File vendor/rails/actionpack/lib/action_controller/vendor/html-scanner/html/sanitizer.rb, line 13
    13:     def tokenize(text, options)
    14:       tokenizer = HTML::Tokenizer.new(text)
    15:       result = []
    16:       while token = tokenizer.next
    17:         node = Node.parse(nil, 0, 0, token, false)
    18:         process_node node, result, options
    19:       end
    20:       result
    21:     end
    
    
  :uri: http://api.rubyonrails.org/classes/HTML/Sanitizer.html#M000187
- :tinyuri: http://tinyurl.com/4pmwsy
  :path: 
  - HTML
  - WhiteListSanitizer
  :method: tokenize
  :description: |+
    
        tokenize(text, options)
    
    
         # File vendor/rails/actionpack/lib/action_controller/vendor/html-scanner/html/sanitizer.rb, line 131
    131:     def tokenize(text, options)
    132:       options[:parent] = []
    133:       options[:attributes] ||= allowed_attributes
    134:       options[:tags]       ||= allowed_tags
    135:       super
    136:     end
    
    
  :uri: http://api.rubyonrails.org/classes/HTML/WhiteListSanitizer.html#M000177
- :tinyuri: http://tinyurl.com/3naslr
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Date
  - Calculations
  - ClassMethods
  :method: tomorrow
  :description: |+
    
        tomorrow()
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/date/calculations.rb, line 23
    23:           def tomorrow
    24:             ::Date.today.tomorrow
    25:           end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Date/Calculations/ClassMethods.html#M000713
- :tinyuri: http://tinyurl.com/4wpdt9
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Calculations
  :method: tomorrow
  :description: |+
    
        tomorrow()
    Convenience method which returns a new Time representing the time 1 day since the instance time
    
    
    
         # File vendor/rails/activesupport/lib/active_support/core_ext/time/calculations.rb, line 202
    202:         def tomorrow
    203:           self.since(1.day)
    204:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Calculations.html#M000606
- :tinyuri: http://tinyurl.com/48xe8e
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Date
  - Calculations
  :method: tomorrow
  :description: |+
    
        tomorrow()
    Convenience method which returns a new Date/DateTime representing the time
    1 day since the instance time
    
    
    
         # File vendor/rails/activesupport/lib/active_support/core_ext/date/calculations.rb, line 182
    182:         def tomorrow
    183:           self + 1
    184:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Date/Calculations.html#M000711
- :tinyuri: http://tinyurl.com/4alvth
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - DatabaseStatements
  :method: transaction
  :description: |+
    
        transaction(start_db_transaction = true) {|| ...}
    Wrap a block in a transaction. Returns result of
    block.
    
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 58
    58:       def transaction(start_db_transaction = true)
    59:         transaction_open = false
    60:         begin
    61:           if block_given?
    62:             if start_db_transaction
    63:               begin_db_transaction
    64:               transaction_open = true
    65:             end
    66:             yield
    67:           end
    68:         rescue Exception => database_transaction_rollback
    69:           if transaction_open
    70:             transaction_open = false
    71:             rollback_db_transaction
    72:           end
    73:           raise unless database_transaction_rollback.is_a? ActiveRecord::Rollback
    74:         end
    75:       ensure
    76:         if transaction_open
    77:           begin
    78:             commit_db_transaction
    79:           rescue Exception => database_transaction_rollback
    80:             rollback_db_transaction
    81:             raise
    82:           end
    83:         end
    84:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#M001182
- :tinyuri: http://tinyurl.com/3th3ry
  :path: 
  - ActiveRecord
  - Transactions
  - ClassMethods
  :method: transaction
  :description: |+
    
        transaction(&block)
    
    
        # File vendor/rails/activerecord/lib/active_record/transactions.rb, line 75
    75:       def transaction(&block)
    76:         previous_handler = trap('TERM') { raise TransactionError, "Transaction aborted" }
    77:         increment_open_transactions
    78: 
    79:         begin
    80:           connection.transaction(Thread.current['start_db_transaction'], &block)
    81:         ensure
    82:           decrement_open_transactions
    83:           trap('TERM', previous_handler)
    84:         end
    85:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Transactions/ClassMethods.html#M001115
- :tinyuri: http://tinyurl.com/4hocup
  :path: 
  - ActiveSupport
  - Multibyte
  - Handlers
  - UTF8Handler
  :method: translate_offset
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Handlers/UTF8Handler.html#M000533
- :tinyuri: http://tinyurl.com/yselxn
  :path: 
  - ActionView
  - Helpers
  - TextHelper
  :method: truncate
  :description: "\n  \n    truncate(text, length = 30, truncate_string = \"...\")\n  \n  \n  \n\
    If text is longer than length, text will be\n\
    truncated to the length of length (defaults to 30) and the last\n\
    characters will be replaced with the truncate_string (defaults to\n\
    \"\xE2\x80\xA6\").\n\n\
    48:       def truncate(text, length = 30, truncate_string = \"...\")\n\
    49:         if text.nil? then return end\n\
    50:         l = length - truncate_string.chars.length\n\
    51:         (text.chars.length > length ? text.chars[0...l] + truncate_string : text).to_s\n\
    52:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/TextHelper.html#M001049
- :tinyuri: http://tinyurl.com/4cealj
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - Column
  :method: type_cast
  :description: |+
    
        type_cast(value)
    Casts value (which is a String) to an appropriate instance.
    
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 57
    57:       def type_cast(value)
    58:         return nil if value.nil?
    59:         case type
    60:           when :string    then value
    61:           when :text      then value
    62:           when :integer   then value.to_i rescue value ? 1 : 0
    63:           when :float     then value.to_f
    64:           when :decimal   then self.class.value_to_decimal(value)
    65:           when :datetime  then self.class.string_to_time(value)
    66:           when :timestamp then self.class.string_to_time(value)
    67:           when :time      then self.class.string_to_dummy_time(value)
    68:           when :date      then self.class.string_to_date(value)
    69:           when :binary    then self.class.binary_to_string(value)
    70:           when :boolean   then self.class.value_to_boolean(value)
    71:           else value
    72:         end
    73:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/Column.html#M001201
- :tinyuri: http://tinyurl.com/4qj5o2
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - Column
  :method: type_cast_code
  :description: |+
    
        type_cast_code(var_name)
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 75
    75:       def type_cast_code(var_name)
    76:         case type
    77:           when :string    then nil
    78:           when :text      then nil
    79:           when :integer   then "(#{var_name}.to_i rescue #{var_name} ? 1 : 0)"
    80:           when :float     then "#{var_name}.to_f"
    81:           when :decimal   then "#{self.class.name}.value_to_decimal(#{var_name})"
    82:           when :datetime  then "#{self.class.name}.string_to_time(#{var_name})"
    83:           when :timestamp then "#{self.class.name}.string_to_time(#{var_name})"
    84:           when :time      then "#{self.class.name}.string_to_dummy_time(#{var_name})"
    85:           when :date      then "#{self.class.name}.string_to_date(#{var_name})"
    86:           when :binary    then "#{self.class.name}.binary_to_string(#{var_name})"
    87:           when :boolean   then "#{self.class.name}.value_to_boolean(#{var_name})"
    88:           else nil
    89:         end
    90:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/Column.html#M001202
- :tinyuri: http://tinyurl.com/3o7yhs
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - PostgreSQLAdapter
  :method: type_to_sql
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#M001280
- :tinyuri: http://tinyurl.com/45btkb
  :path: 
  - ActiveSupport
  - Multibyte
  - Handlers
  - UTF8Handler
  :method: u_unpack
  :description: |+
    
        u_unpack(str)
    Unpack the string at codepoints boundaries
    
    
    
         # File vendor/rails/activesupport/lib/active_support/multibyte/handlers/utf8_handler.rb, line 381
    381:       def u_unpack(str)
    382:         begin
    383:           str.unpack 'U*'
    384:         rescue ArgumentError
    385:           raise EncodingError.new('malformed UTF-8 character')
    386:         end
    387:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Handlers/UTF8Handler.html#M000538
- :tinyuri: http://tinyurl.com/4fwy5n
  :path: 
  - TimeZone
  :method: unadjust
  :description: |+
    
        unadjust(time)
    Reinterprets the given time value as a time in the current time zone, and
    then adjusts it to return the corresponding time in the local time zone.
    
    
    
        # File vendor/rails/activesupport/lib/active_support/values/time_zone.rb, line 55
    55:   def unadjust(time)
    56:     time = time.to_time unless time.is_a?(::Time)
    57:     time = time.localtime
    58:     time - utc_offset - time.utc_offset
    59:   end
    
    
  :uri: http://api.rubyonrails.org/classes/TimeZone.html#M000021
- :tinyuri: http://tinyurl.com/4yr637
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - QueryCache
  :method: uncached
  :description: |+
    
        uncached() {|| ...}
    Disable the query cache within the
    block.
    
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb, line 41
    41:       def uncached
    42:         old, @query_cache_enabled = @query_cache_enabled, false
    43:         yield
    44:       ensure
    45:         @query_cache_enabled = old
    46:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/QueryCache.html#M001142
- :tinyuri: http://tinyurl.com/48tk4f
  :path: 
  - ActiveRecord
  - QueryCache
  :method: uncached
  :description: |+
    
        uncached() {|| ...}
    Disable the query cache within the
    block if Active Record is configured.
    
    
    
        # File vendor/rails/activerecord/lib/active_record/query_cache.rb, line 13
    13:     def uncached(&block)
    14:       if ActiveRecord::Base.configurations.blank?
    15:         yield
    16:       else
    17:         connection.uncached(&block)
    18:       end
    19:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/QueryCache.html#M001134
- :tinyuri: http://tinyurl.com/3t2hch
  :path: 
  - Inflector
  - Inflections
  :method: uncountable
  :description: "\n  \n    uncountable(*words)\n  \n  \n  \n\
    Add uncountable words that\n\
    shouldn\xE2\x80\x98t be attempted inflected.\n\n\n\
    67:     def uncountable(*words)\n\
    68:       (@uncountables << words).flatten!\n\
    69:     end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/Inflector/Inflections.html#M001634
- :tinyuri: http://tinyurl.com/4oc7hg
  :path: 
  - Inflector
  :method: underscore
  :description: "\n  \n    underscore(camel_cased_word)\n  \n  \n  \n\
    The reverse of camelize.\n\
    Makes an underscored form from the expression in the string.\n\n\n\
    Changes \xE2\x80\x99::\xE2\x80\x99 to \xE2\x80\x99/\xE2\x80\x99 to convert namespaces to paths.\n\n\n\
    175:   def underscore(camel_cased_word)\n\
    176:     camel_cased_word.to_s.gsub(/::/, '/').\n\
    177:       gsub(/([A-Z]+)([A-Z][a-z])/,'\\1_\\2').\n\
    178:       gsub(/([a-z\\d])([A-Z])/,'\\1_\\2').\n\
    179:       tr(\"-\", \"_\").\n\
    180:       downcase\n\
    181:   end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/Inflector.html#M001621
- :tinyuri: http://tinyurl.com/4h9qg8
  :path: 
  - ActiveSupport
  - CoreExtensions
  - String
  - Inflections
  :method: underscore
  :description: "\n  \n    underscore()\n  \n  \n  \n\
    The reverse of camelize.\n\
    Makes an underscored form from the expression in the string.\n\n\n\
    Changes \xE2\x80\x99::\xE2\x80\x99 to \xE2\x80\x99/\xE2\x80\x99 to convert namespaces to paths.\n\n\n\
    75:         def underscore\n\
    76:           Inflector.underscore(self)\n\
    77:         end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/String/Inflections.html#M000746
- :tinyuri: http://tinyurl.com/434vdp
  :path: 
  - ActionController
  - Assertions
  - SelectorAssertions
  :method: unescape_rjs
  :description: |+
    
        unescape_rjs(rjs_string)
    Unescapes a RJS string.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/assertions/selector_assertions.rb, line 627
    627:         def unescape_rjs(rjs_string)
    628:           # RJS encodes double quotes and line breaks.
    629:           unescaped= rjs_string.gsub('\"', '"')
    630:           unescaped.gsub!(/\\\//, '/')
    631:           unescaped.gsub!('\n', "\n")
    632:           unescaped.gsub!('\076', '>')
    633:           unescaped.gsub!('\074', '<')
    634:           # RJS encodes non-ascii characters.
    635:           unescaped.gsub!(RJS_PATTERN_UNICODE_ESCAPED_CHAR) {|u| [$1.hex].pack('U*')}
    636:           unescaped
    637:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Assertions/SelectorAssertions.html#M000365
- :tinyuri: http://tinyurl.com/4velzo
  :path: 
  - Plugin
  :method: uninstall
  :description: 
  :uri: http://api.rubyonrails.org/classes/Plugin.html#M000097
- :tinyuri: http://tinyurl.com/3wk7tl
  :path: 
  - Object
  :method: unloadable
  :description: |+
    
        unloadable(const_desc)
    Mark the given constant as unloadable.
    Unloadable constants are removed each time dependencies are cleared.
    
    
    Note that marking a constant for unloading need only be done once. Setup or
    init scripts may list each unloadable
    constant that may need unloading; each constant will be removed for every
    subsequent clear, as opposed to for the first clear.
    
    
    The provided constant descriptor may be a (non-anonymous) module or class,
    or a qualified constant name as a string or symbol.
    
    
    Returns true if the constant was not previously marked for unloading, false
    otherwise.
    
    
    
         # File vendor/rails/activesupport/lib/active_support/dependencies.rb, line 515
    515:   def unloadable(const_desc)
    516:     Dependencies.mark_for_unload const_desc
    517:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Object.html#M000142
- :tinyuri: http://tinyurl.com/4rtvyk
  :path: 
  - ActiveSupport
  - Duration
  :method: until
  :description: |
    
        until(time = ::Time.now)
    Alias for ago
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Duration.html#M000777
- :tinyuri: http://tinyurl.com/4krhxc
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Numeric
  - Time
  :method: until
  :description: |
    
        until(time = ::Time.now)
    Alias for ago
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Numeric/Time.html#M000655
- :tinyuri: http://tinyurl.com/5ywc2s
  :path: 
  - ActiveSupport
  - Multibyte
  - Handlers
  - UTF8Handler
  :method: upcase
  :description: |+
    
        upcase(str)
    Convert characters in the string to uppercase
    
    
    
         # File vendor/rails/activesupport/lib/active_support/multibyte/handlers/utf8_handler.rb, line 270
    270:       def upcase(str); to_case :uppercase_mapping, str; end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/Multibyte/Handlers/UTF8Handler.html#M000527
- :tinyuri: http://tinyurl.com/28d4pv
  :path: 
  - ActiveRecord
  - Base
  :method: update
  :description: |+
    
        update(id, attributes)
    Updates an object (or multiple objects) and saves it to the database, if
    validations pass. The resulting object is returned whether the object was
    saved successfully to the database or not.
    
    Options
    
    id This should be the id or an array of ids to be updated attributes This should be a Hash of attributes to be set on the object, or an
    array of Hashes.
    
    Examples
    
      # Updating one record:
      Person.update(15, {:user_name => 'Samuel', :group => 'expert'})
    
      # Updating multiple records:
      people = { 1 => { "first_name" => "David" }, 2 => { "first_name" => "Jeremy"} }
      Person.update(people.keys, people.values)
    
    
    
         # File vendor/rails/activerecord/lib/active_record/base.rb, line 593
    593:       def update(id, attributes)
    594:         if id.is_a?(Array)
    595:           idx = -1
    596:           id.collect { |id| idx += 1; update(id, attributes[idx]) }
    597:         else
    598:           object = find(id)
    599:           object.update_attributes(attributes)
    600:           object
    601:         end
    602:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001380
- :tinyuri: http://tinyurl.com/3gny23
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - DatabaseStatements
  :method: update
  :description: |+
    
        update(sql, name = nil)
    Executes the update statement
    and returns the number of rows affected.
    
    
    
        # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 48
    48:       def update(sql, name = nil)
    49:         update_sql(sql, name)
    50:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#M001180
- :tinyuri: http://tinyurl.com/4bwo72
  :path: 
  - ActiveResource
  - Base
  :method: update
  :description: |+
    
        update()
    Update the resource on the remote service.
    
    
    
         # File vendor/rails/activeresource/lib/active_resource/base.rb, line 796
    796:       def update
    797:         returning connection.put(element_path(prefix_options), to_xml, self.class.headers) do |response|
    798:           load_attributes_from_response(response)
    799:         end
    800:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Base.html#M000856
- :tinyuri: http://tinyurl.com/4q4j9z
  :path: 
  - HashWithIndifferentAccess
  :method: update
  :description: |+
    
        update(other_hash)
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/hash/indifferent_access.rb, line 29
    29:   def update(other_hash)
    30:     other_hash.each_pair { |key, value| regular_writer(convert_key(key), convert_value(value)) }
    31:     self
    32:   end
    
    
  :uri: http://api.rubyonrails.org/classes/HashWithIndifferentAccess.html#M000065
- :tinyuri: http://tinyurl.com/2hhb26
  :path: 
  - ActiveRecord
  - Base
  :method: update_all
  :description: |+
    
        update_all(updates, conditions = nil, options = {})
    Updates all records with details given if they match a set of conditions
    supplied, limits and order can also be supplied.
    
    Options
    
    updates A String of column and value pairs that will be set on any
    records that match conditions conditions An SQL fragment like
    "administrator = 1" or [ "user_name = ?", username ].
    
    
                  See conditions in the intro for more info.
    
    
    options Additional options are :limit and/or :order, see the
    examples for usage.
    
    Examples
    
      # Update all billing objects with the 3 different attributes given
      Billing.update_all( "category = 'authorized', approved = 1, author = 'David'" )
    
      # Update records that match our conditions
      Billing.update_all( "author = 'David'", "title LIKE '%Rails%'" )
    
      # Update records that match our conditions but limit it to 5 ordered by date
      Billing.update_all( "author = 'David'", "title LIKE '%Rails%'",
                            :order => 'created_at', :limit => 5 )
    
    
    
         # File vendor/rails/activerecord/lib/active_record/base.rb, line 670
    670:       def update_all(updates, conditions = nil, options = {})
    671:         sql  = "UPDATE #{table_name} SET #{sanitize_sql_for_assignment(updates)} "
    672:         scope = scope(:find)
    673:         add_conditions!(sql, conditions, scope)
    674:         add_order!(sql, options[:order], scope)
    675:         add_limit!(sql, options, scope)
    676:         connection.update(sql, "#{name} Update")
    677:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001383
- :tinyuri: http://tinyurl.com/3npf3b
  :path: 
  - ActiveRecord
  - Base
  :method: update_attribute
  :description: "\n  \n    update_attribute(name, value)\n  \n  \n  \n\
    Updates a single attribute and saves the record. This is especially useful\n\
    for boolean flags on existing records. Note: This method is overwritten by\n\
    the Validation module that\xE2\x80\x98ll make sure that updates made with this\n\
    method aren\xE2\x80\x98t subjected to validation checks. Hence, attributes can be updated even if the full\n\
    2026:       def update_attribute(name, value)\n\
    2027:         send(name.to_s + '=', value)\n\
    2028:         save\n\
    2029:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001435
- :tinyuri: http://tinyurl.com/44ua5r
  :path: 
  - ActiveRecord
  - Validations
  :method: update_attribute_with_validation_skipping
  :description: |+
    
        update_attribute_with_validation_skipping(name, value)
    Updates a single attribute and saves the record without going through the
    normal validation procedure. This is especially useful for boolean flags on
    existing records. The regular update_attribute method in Base is replaced with this when the validations module
    is mixed in, which it is by default.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/validations.rb, line 953
    953:     def update_attribute_with_validation_skipping(name, value)
    954:       send(name.to_s + '=', value)
    955:       save(false)
    956:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Validations.html#M001313
- :tinyuri: http://tinyurl.com/22eh2e
  :path: 
  - ActiveRecord
  - Base
  :method: update_attributes
  :description: |+
    
        update_attributes(attributes)
    Updates all the attributes from the
    passed-in Hash and saves the record. If the object is invalid, the saving
    will fail and false will be returned.
    
    
    
          # File vendor/rails/activerecord/lib/active_record/base.rb, line 2033
    2033:       def update_attributes(attributes)
    2034:         self.attributes = attributes
    2035:         save
    2036:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001436
- :tinyuri: http://tinyurl.com/4ycjln
  :path: 
  - ActiveRecord
  - Base
  :method: update_attributes!
  :description: |+
    
        update_attributes!(attributes)
    Updates an object just like Base.update_attributes but calls save! instead of save so an exception is raised if the record
    is invalid.
    
    
    
          # File vendor/rails/activerecord/lib/active_record/base.rb, line 2039
    2039:       def update_attributes!(attributes)
    2040:         self.attributes = attributes
    2041:         save!
    2042:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001437
- :tinyuri: http://tinyurl.com/3ra5kf
  :path: 
  - ActionController
  - Filters
  - ClassMethods
  :method: update_conditions
  :description: |+
    
        update_conditions(filters, conditions)
    
    
         # File vendor/rails/actionpack/lib/action_controller/filters.rb, line 609
    609:         def update_conditions(filters, conditions)
    610:           return if conditions.empty?
    611:           if conditions[:only]
    612:             write_inheritable_hash('included_actions', condition_hash(filters, conditions[:only]))
    613:           elsif conditions[:except]
    614:             write_inheritable_hash('excluded_actions', condition_hash(filters, conditions[:except]))
    615:           end
    616:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Filters/ClassMethods.html#M000329
- :tinyuri: http://tinyurl.com/48fxmv
  :path: 
  - ActiveRecord
  - Base
  :method: update_counters
  :description: |+
    
        update_counters(id, counters)
    A generic "counter updater" implementation, intended primarily to
    be used by increment_counter and decrement_counter, but which may also be
    useful on its own. It simply does a direct SQL update for the record with the given ID,
    altering the given hash of counters by the
    amount given by the corresponding value:
    
    Options
    
    id The id of the object you wish to update a counter on counters An Array
    of Hashes containing the names of the fields
    
    
                to update as keys and the amount to update the field by as
                values
    
    Examples
    
      # For the Post with id of 5, decrement the comment_count by 1, and
      # increment the action_count by 1
      Post.update_counters 5, :comment_count => -1, :action_count => 1
      # Executes the following SQL:
      # UPDATE posts
      #    SET comment_count = comment_count - 1,
      #        action_count = action_count + 1
      #  WHERE id = 5
    
    
    
         # File vendor/rails/activerecord/lib/active_record/base.rb, line 757
    757:       def update_counters(id, counters)
    758:         updates = counters.inject([]) { |list, (counter_name, increment)|
    759:           sign = increment < 0 ? "-" : "+"
    760:           list << "#{connection.quote_column_name(counter_name)} = #{connection.quote_column_name(counter_name)} #{sign} #{increment.abs}"
    761:         }.join(", ")
    762:         update_all(updates, "#{connection.quote_column_name(primary_key)} = #{quote_value(id)}")
    763:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001387
- :tinyuri: http://tinyurl.com/3fqs62
  :path: 
  - ActiveRecord
  - Locking
  - Optimistic
  - ClassMethods
  :method: update_counters_with_lock
  :description: |+
    
        update_counters_with_lock(id, counters)
    make sure the lock version column gets updated when counters are updated.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/locking/optimistic.rb, line 138
    138:         def update_counters_with_lock(id, counters)
    139:           counters = counters.merge(locking_column => 1) if locking_enabled?
    140:           update_counters_without_lock(id, counters)
    141:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#M001114
- :tinyuri: http://tinyurl.com/3mt97a
  :path: 
  - ActionController
  - Filters
  - ClassMethods
  :method: update_filter_chain
  :description: |+
    
        update_filter_chain(filters, filter_type, pos, &block)
    
    
         # File vendor/rails/actionpack/lib/action_controller/filters.rb, line 524
    524:         def update_filter_chain(filters, filter_type, pos, &block)
    525:           new_filters = create_filters(filters, filter_type, &block)
    526:           new_chain = filter_chain.insert(pos, new_filters).flatten
    527:           write_inheritable_attribute('filter_chain', new_chain)
    528:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Filters/ClassMethods.html#M000325
- :tinyuri: http://tinyurl.com/4z5wc9
  :path: 
  - ActionView
  - Helpers
  - PrototypeHelper
  :method: update_page
  :description: |+
    
        update_page(&block)
    Yields a JavaScriptGenerator and returns the generated JavaScript code. Use
    this to update multiple elements on a page in an Ajax response. See
    JavaScriptGenerator for more information.
    
    
    Example:
    
    
      update_page do |page|
        page.hide 'spinner'
      end
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/prototype_helper.rb, line 991
    991:       def update_page(&block)
    992:         JavaScriptGenerator.new(@template, &block).to_s
    993:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/PrototypeHelper.html#M000968
- :tinyuri: http://tinyurl.com/3jbzn6
  :path: 
  - ActionView
  - Helpers
  - PrototypeHelper
  :method: update_page_tag
  :description: |+
    
        update_page_tag(html_options = {}, &block)
    Works like update_page but wraps
    the generated JavaScript in a <script> tag. Use this to include
    generated JavaScript in an ERb template. See JavaScriptGenerator for more
    information.
    
    
    html_options may be a hash of <script> attributes to be
    passed to ActionView::Helpers::JavaScriptHelper#javascript_tag.
    
    
    
          # File vendor/rails/actionpack/lib/action_view/helpers/prototype_helper.rb, line 1001
    1001:       def update_page_tag(html_options = {}, &block)
    1002:         javascript_tag update_page(&block), html_options
    1003:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/PrototypeHelper.html#M000969
- :tinyuri: http://tinyurl.com/4sq3ul
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - DatabaseStatements
  :method: update_sql
  :description: |+
    
        update_sql(sql, name = nil)
    Executes the update statement
    and returns the number of rows affected.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb, line 161
    161:         def update_sql(sql, name = nil)
    162:           execute(sql, name)
    163:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#M001195
- :tinyuri: http://tinyurl.com/52shvt
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - PostgreSQLAdapter
  :method: update_sql
  :description: |+
    
        update_sql(sql, name = nil)
    Executes an UPDATE query and returns the number of affected tuples.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb, line 417
    417:       def update_sql(sql, name = nil)
    418:         super.cmdtuples
    419:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#M001262
- :tinyuri: http://tinyurl.com/4csu33
  :path: 
  - ActionView
  - Helpers
  - AtomFeedHelper
  - AtomFeedBuilder
  :method: updated
  :description: |+
    
        updated(date_or_time = nil)
    Accepts a Date or Time object and inserts it in the proper format. If nil
    is passed, current time in UTC is used.
    
    
    
        # File vendor/rails/actionpack/lib/action_view/helpers/atom_feed_helper.rb, line 75
    75:         def updated(date_or_time = nil)
    76:           @xml.updated((date_or_time || Time.now.utc).xmlschema)
    77:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/AtomFeedHelper/AtomFeedBuilder.html#M000933
- :tinyuri: http://tinyurl.com/4rxp5j
  :path: 
  - ActionController
  - AbstractRequest
  :method: url
  :description: |+
    
        url()
    Returns the complete URL used for this request
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/request.rb, line 157
    157:     def url
    158:       protocol + host_with_port + request_uri
    159:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/AbstractRequest.html#M000410
- :tinyuri: http://tinyurl.com/2ucdty
  :path: 
  - ActionView
  - Helpers
  - UrlHelper
  :method: url_for
  :description: "\n  \n    url_for(options = {})\n  \n  \n  \n\
    Returns the URL for the set of options provided. This takes the\n\
    same options as url_for in\n\
    ActionController (see the documentation for\n\
    ActionController::Base#url_for). Note that by default :only_path\n\
    is true so you\xE2\x80\x98ll get the relative /controller/action\n\
    instead of the fully qualified URL like example.com/controller/action.\n\n\n\
    When called from a view, url_for\n\
    returns an HTML escaped url. If you need an unescaped url, pass :escape\n\
    => false in the options.\n\n\
    Options\n\n\
    :anchor \xE2\x80\x94 specifies the anchor name to be appended to the\n\
    path.\n\n\n\
    :only_path \xE2\x80\x94 if true, returns the relative URL (omitting the\n\
    protocol, host name, and port) (true by default unless\n\
    :host is specified)\n\n\n\
    :trailing_slash \xE2\x80\x94 if true, adds a trailing slash, as in\n\
    \"/archive/2005/\". Note that this is currently not recommended\n\
    since it breaks caching.\n\n\n\
    :host \xE2\x80\x94 overrides the default (current) host if provided\n\n\n\
    :protocol \xE2\x80\x94 overrides the default (current) protocol if\n\
    provided\n\n\n\
    :user \xE2\x80\x94 Inline HTTP authentication (only plucked out if\n\
    :password is also present)\n\n\n\
    :password \xE2\x80\x94 Inline HTTP authentication (only plucked out if\n\
    :user is also present)\n\n\n\
    :escape \xE2\x80\x94 Determines whether the returned URL will be HTML\n\
    escaped or not (true by default)\n\n\n\n\
    Relying on named routes\n\n\
    If you instead of a hash pass a record (like an Active Record or Active\n\
    Resource) as the options parameter, you\xE2\x80\x98ll trigger the named route\n\
    for that record. The lookup will happen on the name of the class. So\n\
    passing a Workshop object will attempt to use the workshop_path route. If\n\
    you have a nested route, such as admin_workshop_path you\xE2\x80\x98ll have to\n\
    call that explicitly (it\xE2\x80\x98s impossible for url_for to guess that route).\n\n\
    65:       def url_for(options = {})\n\
    66:         case options\n\
    67:         when Hash\n\
    68:           show_path =  options[:host].nil? ? true : false\n\
    69:           options = { :only_path => show_path }.update(options.symbolize_keys)\n\
    70:           escape  = options.key?(:escape) ? options.delete(:escape) : true\n\
    71:           url     = @controller.send(:url_for, options)\n\
    72:         when String\n\
    73:           escape = true\n\
    74:           url    = options\n\
    75:         when NilClass\n\
    76:           url = @controller.send(:url_for, nil)\n\
    77:         else\n\
    78:           escape = false\n\
    79:           url    = polymorphic_path(options)\n\
    80:         end\n\
    81: \n\
    82:         escape ? escape_once(url) : url\n\
    83:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/UrlHelper.html#M000912
- :tinyuri: http://tinyurl.com/4jvb4b
  :path: 
  - ActionController
  - Integration
  - Session
  :method: url_for
  :description: "\n  \n    url_for(options)\n  \n  \n  \n\
    Returns the URL for the given options, according to the rules specified in\n\
    213:       def url_for(options)\n\
    214:         controller ? controller.url_for(options) : generic_url_rewriter.rewrite(options)\n\
    215:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionController/Integration/Session.html#M000252
- :tinyuri: http://tinyurl.com/3yfrdz
  :path: 
  - ActionController
  - Base
  :method: url_for
  :description: "\n  \n    url_for(options = nil)\n  \n  \n  \n\
    Returns a URL that has been rewritten according to the options hash and the\n\
    defined Routes. (For doing a complete redirect, use redirect_to). \xC2\xA0 url_for is used to: \xC2\xA0 All keys given to\n\
    url_for are forwarded to the Route module,\n\
    save for the following:\n\n\n\
    :anchor \xE2\x80\x94 specifies the anchor name to be appended to the\n\
    path. For example, url_for :controller\n\
    => \xE2\x80\x98posts\xE2\x80\x99, :action => \xE2\x80\x98show\xE2\x80\x99, :id => 10,\n\
    :anchor => \xE2\x80\x98comments\xE2\x80\x98 will produce\n\
    \"/posts/show/10#comments\".\n\n\n\
    :only_path \xE2\x80\x94 if true, returns the relative URL (omitting the\n\
    protocol, host name, and port) (false by default)\n\n\n\
    :trailing_slash \xE2\x80\x94 if true, adds a trailing slash, as in\n\
    \"/archive/2005/\". Note that this is currently not recommended\n\
    since it breaks caching.\n\n\n\
    :host \xE2\x80\x94 overrides the default (current) host if provided.\n\n\n\
    :protocol \xE2\x80\x94 overrides the default (current) protocol if\n\
    provided.\n\n\n\
    :port \xE2\x80\x94 optionally specify the port to connect to.\n\n\n\
    :user \xE2\x80\x94 Inline HTTP authentication (only plucked out if\n\
    :password is also present).\n\n\n\
    :password \xE2\x80\x94 Inline HTTP authentication (only plucked out if\n\
    :user is also present).\n\n\n\
    :skip_relative_url_root \xE2\x80\x94 if true, the url is not\n\
    constructed using the relative_url_root of the request so the path will\n\
    include the web server relative installation directory.\n\n\n\n\n\
    The URL is generated from the remaining keys in the hash. A URL contains\n\
    two key parts: the <base> and a query string. Routes composes a query\n\
    string as the key/value pairs not included in the <base>.\n\n\n\
    The default Routes setup supports a typical Rails path of \"controller/action/id\"\n\
    where action and id are optional, with action defaulting to\n\
    \xE2\x80\x98index\xE2\x80\x99 when not given. Here are some typical url_for statements and their corresponding\n\
    URLs:\n\n\n  url_for :controller => 'posts', :action => 'recent'                # => 'proto://host.com/posts/recent'\n  url_for :controller => 'posts', :action => 'index'                 # => 'proto://host.com/posts'\n  url_for :controller => 'posts', :action => 'index', :port=>'8033'  # => 'proto://host.com:8033/posts'\n  url_for :controller => 'posts', :action => 'show', :id => 10       # => 'proto://host.com/posts/show/10'\n  url_for :controller => 'posts', :user => 'd', :password => '123'   # => 'proto://d:123@host.com/posts'\n\n\n\
    When generating a new URL, missing values may be filled in from the current\n\
    request\xE2\x80\x98s parameters. For example, url_for :action =>\n\
    \xE2\x80\x98some_action\xE2\x80\x98 will retain the current controller, as\n\
    expected. This behavior extends to other parameters, including\n\
    :controller, :id, and any other parameters that are\n\
    placed into a Route\xE2\x80\x98s path. \xC2\xA0 The URL helpers such as url_for have a limited form of memory:\n\
    when generating a new URL, they can look for missing values in the current\n\
    request\xE2\x80\x98s parameters. Routes attempts to guess when a value should\n\
    and should not be taken from the defaults. There are a few simple rules on\n\
    how this is performed:\n\n\n\
    If the controller name begins with a slash, no defaults are used: url_for :controller =>\n\
    \xE2\x80\x99/home\xE2\x80\x98\n\n\n\
    If the controller changes, the action will default to index unless provided\n\n\n\n\n\
    The final rule is applied while the URL is being generated and is best\n\
    illustrated by an example. Let us consider the route given by\n\
    map.connect \xE2\x80\x98people/:last/:first/:action\xE2\x80\x99, :action =>\n\
    \xE2\x80\x98bio\xE2\x80\x99, :controller => \xE2\x80\x98people\xE2\x80\x98.\n\n\n\
    Suppose that the current URL is \"people/hh/david/contacts\".\n\
    Let\xE2\x80\x98s consider a few different cases of URLs which are generated from\n\
    this page.\n\n\n\
    url_for :action =>\n\
    \xE2\x80\x98bio\xE2\x80\x98 \xE2\x80\x94 During the generation of this URL, default\n\
    values will be used for the first and\n\n\n\n\n\
    last components, and the action shall change. The generated URL will be,\n\
    \"people/hh/david/bio\".\n\n\n\
    url_for :first =>\n\
    \xE2\x80\x98davids-little-brother\xE2\x80\x98 This generates the URL\n\
    \xE2\x80\x98people/hh/davids-little-brother\xE2\x80\x99 \xE2\x80\x94 note that this URL\n\
    leaves out the assumed action of \xE2\x80\x98bio\xE2\x80\x99.\n\n\n\n\n\
    However, you might ask why the action from the current request,\n\
    \xE2\x80\x98contacts\xE2\x80\x99, isn\xE2\x80\x98t carried over into the new URL. The\n\
    answer has to do with the order in which the parameters appear in the\n\
    generated path. In a nutshell, since the value that appears in the slot for\n\
    :first is not equal to default value for :first we stop\n\
    using defaults. On its own, this rule can account for much of the typical\n\
    Rails URL behavior. \xC2\xA0 Although a convenience,\n\
    defaults can occasionally get in your way. In some cases a default persists\n\
    longer than desired. The default may be cleared by adding :name =>\n\
    nil to url_for\xE2\x80\x98s\n\
    options. This is often required when writing form helpers, since the\n\
    defaults in play may vary greatly depending upon where the helper is used\n\
    from. The following line will redirect to PostController\xE2\x80\x98s default\n\
    action, regardless of the page it is displayed on:\n\n\n  url_for :controller => 'posts', :action => nil\n\n\n\
    If you explicitly want to create a URL that\xE2\x80\x98s almost the same as the\n\
    current URL, you can do so using the :overwrite_params options. Say for\n\
    your posts you have different views for showing and printing them. Then, in\n\
    the show view, you get the URL for the print view like this\n\n\n  url_for :overwrite_params => { :action => 'print' }\n\n\n\
    This takes the current URL as is and only exchanges the action. In\n\
    contrast, url_for :action =>\n\
    \xE2\x80\x98print\xE2\x80\x98 would have slashed-off the path components after\n\
    611:       def url_for(options = nil) #:doc:\n\
    612:         case options || {}\n\
    613:           when String\n\
    614:             options\n\
    615:           when Hash\n\
    616:             @url.rewrite(rewrite_options(options))\n\
    617:           else\n\
    618:             polymorphic_url(options)\n\
    619:         end\n\
    620:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionController/Base.html#M000443
- :tinyuri: http://tinyurl.com/428pho
  :path: 
  - ActionController
  - UrlWriter
  :method: url_for
  :description: "\n  \n    url_for(options)\n  \n  \n  \n\
    Generate a url based on the options provided, default_url_options and the\n\
    routes defined in routes.rb. The following options are supported:\n\n\n\
    :only_path If true, the relative url is returned. Defaults to\n\
    false.\n\n\n\
    :protocol The protocol to connect to. Defaults to\n\
    \xE2\x80\x98http\xE2\x80\x99.\n\n\n\
    :host Specifies the host the link should be targetted at. If\n\
    :only_path is false, this option must be provided either\n\
    explicitly, or via default_url_options.\n\n\n\
    :port Optionally specify the port to connect to.\n\n\n\
    :anchor An anchor name to be appended to the path.\n\n\n\n\n\
    Any other key(:controller, :action, etc\xE2\x80\xA6) given to url_for is forwarded to the Routes\n\
    module.\n\n\n\
    47:     def url_for(options)\n\
    48:       options = self.class.default_url_options.merge(options)\n\
    49:       \n\
    50:       url = ''\n\
    51: \n\
    52:       unless options.delete :only_path\n\
    53:         url << (options.delete(:protocol) || 'http')\n\
    54:         url << '://' unless url.match(\"://\") #dont add separator if its already been specified in :protocol \n\
    55:         \n\
    56:         raise \"Missing host to link to! Please provide :host parameter or set default_url_options[:host]\" unless options[:host]\n\
    57: \n\
    58:         url << options.delete(:host)\n\
    59:         url << \":#{options.delete(:port)}\" if options.key?(:port)\n\
    60:       else\n\
    61:         # Delete the unused options to prevent their appearance in the query string\n\
    62:         [:protocol, :host, :port].each { |k| options.delete k }\n\
    63:       end\n\
    64: \n\
    65:       anchor = \"##{CGI.escape options.delete(:anchor).to_param.to_s}\" if options.key?(:anchor)\n\
    66:       url << Routing::Routes.generate(options, {})\n\
    67:       url << anchor if anchor\n\
    68: \n\
    69:       return url\n\
    70:     end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionController/UrlWriter.html#M000227
- :tinyuri: http://tinyurl.com/4ngylf
  :path: 
  - TimeZone
  :method: us_zones
  :description: |+
    
        us_zones()
    A convenience method for returning a collection of TimeZone objects for time zones in the USA.
    
    
    
         # File vendor/rails/activesupport/lib/active_support/values/time_zone.rb, line 177
    177:     def us_zones
    178:       all.find_all { |z| z.name =~ US_ZONES }
    179:     end
    
    
  :uri: http://api.rubyonrails.org/classes/TimeZone.html#M000028
- :tinyuri: http://tinyurl.com/3ecegl
  :path: 
  - Rails
  - Generator
  - Options
  :method: usage
  :description: |+
    
        usage(message = usage_message)
    Raise a usage error. Override usage_message to provide a blurb after the
    option parser summary.
    
    
    
         # File vendor/rails/railties/lib/rails_generator/options.rb, line 98
     98:         def usage(message = usage_message)
     99:           raise UsageError, "#{@option_parser}\n#{message}"
    100:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Options.html#M001480
- :tinyuri: http://tinyurl.com/3lesht
  :path: 
  - Rails
  - Generator
  - Base
  :method: usage_message
  :description: |+
    
        usage_message()
    Read USAGE from file in generator base path.
    
    
    
         # File vendor/rails/railties/lib/rails_generator/base.rb, line 169
    169:         def usage_message
    170:           File.read(File.join(spec.path, 'USAGE')) rescue ''
    171:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Base.html#M001569
- :tinyuri: http://tinyurl.com/4utdpb
  :path: 
  - Rails
  - Generator
  - Scripts
  - Base
  :method: usage_message
  :description: |+
    
        usage_message()
    
    
        # File vendor/rails/railties/lib/rails_generator/scripts.rb, line 44
    44:           def usage_message
    45:             usage = "\nInstalled Generators\n"
    46:             Rails::Generator::Base.sources.inject({}) do |mem, source|
    47:               label = source.label.to_s.capitalize
    48:               mem[label] ||= []
    49:               mem[label] |= source.names
    50:               mem
    51:             end.each_pair do |label, names|
    52:               usage << "  #{label}: #{names.join(', ')}\n" unless names.empty?
    53:             end
    54: 
    55:             usage << "\nMore are available at http://rubyonrails.org/show/Generators\n  1. Download, for example, login_generator.zip\n  2. Unzip to directory \#{Dir.user_home}/.rails/generators/login\n     to use the generator with all your Rails apps\n"
    56: 
    57:             if Object.const_defined?(:RAILS_ROOT)
    58:               usage << "     or to \#{File.expand_path(RAILS_ROOT)}/lib/generators/login\n     to use with this app only.\n"
    59:             end
    60: 
    61:             usage << "  3. Run generate with no arguments for usage information\n       \#{$0} login\n\nGenerator gems are also available:\n  1. gem search -r generator\n  2. gem install login_generator\n  3. \#{$0} login\n\n"
    62:             return usage
    63:           end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Scripts/Base.html#M001473
- :tinyuri: http://tinyurl.com/3w2x38
  :path: 
  - Rails
  - Generator
  - Options
  :method: usage_message
  :description: |+
    
        usage_message()
    
    
         # File vendor/rails/railties/lib/rails_generator/options.rb, line 102
    102:         def usage_message
    103:           ''
    104:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Options.html#M001481
- :tinyuri: http://tinyurl.com/4rbn87
  :path: 
  - Rails
  - Generator
  - Lookup
  - ClassMethods
  :method: use_application_sources!
  :description: |+
    
        use_application_sources!()
    Use application generators (app, ?).
    
    
    
        # File vendor/rails/railties/lib/rails_generator/lookup.rb, line 86
    86:         def use_application_sources!
    87:           reset_sources
    88:           sources << PathSource.new(:builtin, "#{File.dirname(__FILE__)}/generators/applications")
    89:         end
    
    
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Lookup/ClassMethods.html#M001537
- :tinyuri: http://tinyurl.com/3g4q8n
  :path: 
  - RailsEnvironment
  :method: use_checkout?
  :description: |+
    
        use_checkout?()
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 108
    108:   def use_checkout?
    109:     # this is a bit of a guess. we assume that if the rails environment
    110:     # is under subversion then they probably want the plugin checked out
    111:     # instead of exported. This can be overridden on the command line
    112:     File.directory?("#{root}/.svn")
    113:   end
    
    
  :uri: http://api.rubyonrails.org/classes/RailsEnvironment.html#M000058
- :tinyuri: http://tinyurl.com/3n779v
  :path: 
  - Rails
  - Generator
  - Lookup
  - ClassMethods
  :method: use_component_sources!
  :description: "\n  \n    use_component_sources!()\n  \n  \n  \n\
    Use component generators (model, controller, etc).\n\n\n\
    Rails application. If RAILS_ROOT is\n\
    defined we know we\xE2\x80\x98re generating in the context of a Rails application, so search\n\
    RAILS_ROOT/generators.\n\n\n\
    Look in plugins, either for generators/ or rails_generators/ directories\n\
    within each plugin\n\n\n\
    User home directory. Search ~/.rails/generators.\n\n\n\
    RubyGems. Search for gems named *_generator, and look for generators within\n\
    any RubyGem\xE2\x80\x98s /rails_generators/<generator_name>_generator.rb\n\
    file.\n\n\n\
    102:         def use_component_sources!\n\
    103:           reset_sources\n\
    104:           if defined? ::RAILS_ROOT\n\
    105:             sources << PathSource.new(:lib, \"#{::RAILS_ROOT}/lib/generators\")\n\
    106:             sources << PathSource.new(:vendor, \"#{::RAILS_ROOT}/vendor/generators\")\n\
    107:             sources << PathSource.new(:plugins, \"#{::RAILS_ROOT}/vendor/plugins/*/**/generators\")\n\
    108:             sources << PathSource.new(:plugins, \"#{::RAILS_ROOT}/vendor/plugins/*/**/rails_generators\")\n\
    109:           end\n\
    110:           sources << PathSource.new(:user, \"#{Dir.user_home}/.rails/generators\")\n\
    111:           if Object.const_defined?(:Gem)\n\
    112:             sources << GemGeneratorSource.new\n\
    113:             sources << GemPathSource.new\n\
    114:           end\n\
    115:           sources << PathSource.new(:builtin, \"#{File.dirname(__FILE__)}/generators/components\")\n\
    116:         end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/Rails/Generator/Lookup/ClassMethods.html#M001538
- :tinyuri: http://tinyurl.com/4wlphd
  :path: 
  - ActionController
  - Routing
  :method: use_controllers!
  :description: |+
    
        use_controllers!(controller_names)
    
    
         # File vendor/rails/actionpack/lib/action_controller/routing.rb, line 342
    342:       def use_controllers!(controller_names)
    343:         @possible_controllers = controller_names
    344:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Routing.html#M000335
- :tinyuri: http://tinyurl.com/4xrbsa
  :path: 
  - RailsEnvironment
  :method: use_externals?
  :description: |+
    
        use_externals?()
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 104
    104:   def use_externals?
    105:     use_svn? && File.directory?("#{root}/vendor/plugins/.svn")
    106:   end
    
    
  :uri: http://api.rubyonrails.org/classes/RailsEnvironment.html#M000057
- :tinyuri: http://tinyurl.com/4t42x9
  :path: 
  - RailsEnvironment
  :method: use_svn?
  :description: |+
    
        use_svn?()
    
    
         # File vendor/rails/railties/lib/commands/plugin.rb, line 98
     98:   def use_svn?
     99:     require 'active_support/core_ext/kernel'
    100:     silence_stderr {`svn --version` rescue nil}
    101:     !$?.nil? && $?.success?
    102:   end
    
    
  :uri: http://api.rubyonrails.org/classes/RailsEnvironment.html#M000056
- :tinyuri: http://tinyurl.com/47tptz
  :path: 
  - Dir
  :method: user_home
  :description: |+
    
        user_home()
    User home directory lookup adapted from RubyGems.
    
    
    
        # File vendor/rails/railties/lib/rails_generator/lookup.rb, line 25
    25: def Dir.user_home
    26:   if ENV['HOME']
    27:     ENV['HOME']
    28:   elsif ENV['USERPROFILE']
    29:     ENV['USERPROFILE']
    30:   elsif ENV['HOMEDRIVE'] and ENV['HOMEPATH']
    31:     "#{ENV['HOMEDRIVE']}:#{ENV['HOMEPATH']}"
    32:   else
    33:     File.expand_path '~'
    34:   end
    35: end
    
    
  :uri: http://api.rubyonrails.org/classes/Dir.html#M000007
- :tinyuri: http://tinyurl.com/536gyh
  :path: 
  - ActionController
  - HttpAuthentication
  - Basic
  :method: user_name_and_password
  :description: |+
    
        user_name_and_password(request)
    
    
         # File vendor/rails/actionpack/lib/action_controller/http_authentication.rb, line 101
    101:       def user_name_and_password(request)
    102:         decode_credentials(request).split(/:/, 2)
    103:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/HttpAuthentication/Basic.html#M000208
- :tinyuri: http://tinyurl.com/4azahl
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Calculations
  - ClassMethods
  :method: utc_time
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Calculations/ClassMethods.html#M000609
- :tinyuri: http://tinyurl.com/3mbydu
  :path: 
  - ActiveResource
  - Validations
  :method: valid?
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveResource/Validations.html#M000798
- :tinyuri: http://tinyurl.com/4hkozt
  :path: 
  - ActiveRecord
  - Validations
  :method: valid?
  :description: |+
    
        valid?()
    Runs validate and validate_on_create or validate_on_update and returns true if
    no errors were added otherwise
    false.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/validations.rb, line 959
    959:     def valid?
    960:       errors.clear
    961: 
    962:       run_validations(:validate)
    963:       validate
    964: 
    965:       if new_record?
    966:         run_validations(:validate_on_create)
    967:         validate_on_create
    968:       else
    969:         run_validations(:validate_on_update)
    970:         validate_on_update
    971:       end
    972: 
    973:       errors.empty?
    974:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Validations.html#M001314
- :tinyuri: http://tinyurl.com/4vpjlc
  :path: 
  - ActiveRecord
  - Validations
  :method: validate
  :description: |+
    
        validate(
    Overwrite this method for validation checks on all saves and use Errors.add(field, msg) for invalid
    attributes.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/validations.rb, line 983
    983:       def validate #:doc:
    984:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Validations.html#M001316
- :tinyuri: http://tinyurl.com/2fav6t
  :path: 
  - ActiveRecord
  - Validations
  - ClassMethods
  :method: validate
  :description: "\n  \n    validate(*methods, &block)\n  \n  \n  \n\
    Adds a validation method or block to the class. This is useful when\n\
    overriding the validate instance\n\
    method becomes too unwieldly and you\xE2\x80\x98re looking for more descriptive\n\
    declaration of your validations.\n\n\n\
    This can be done with a symbol pointing to a method:\n\n\n  class Comment < ActiveRecord::Base\n    validate :must_be_friends\n\n    def must_be_friends\n      errors.add_to_base(\"Must be friends to leave a comment\") unless commenter.friend_of?(commentee)\n    end\n  end\n\n\n\
    Or with a block which is passed the current record to be validated:\n\n\n  class Comment < ActiveRecord::Base\n    validate do |comment|\n      comment.must_be_friends\n    end\n\n    def must_be_friends\n      errors.add_to_base(\"Must be friends to leave a comment\") unless commenter.friend_of?(commentee)\n    end\n  end\n\n\n\
    327:       def validate(*methods, &block)\n\
    328:         methods << block if block_given?\n\
    329:         write_inheritable_set(:validate, methods)\n\
    330:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Validations/ClassMethods.html#M001319
- :tinyuri: http://tinyurl.com/3zqatq
  :path: 
  - ActiveRecord
  - Validations
  - ClassMethods
  :method: validate_on_create
  :description: |+
    
        validate_on_create(*methods, &block)
    
    
         # File vendor/rails/activerecord/lib/active_record/validations.rb, line 332
    332:       def validate_on_create(*methods, &block)
    333:         methods << block if block_given?
    334:         write_inheritable_set(:validate_on_create, methods)
    335:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Validations/ClassMethods.html#M001320
- :tinyuri: http://tinyurl.com/4s7t48
  :path: 
  - ActiveRecord
  - Validations
  :method: validate_on_create
  :description: |+
    
        validate_on_create(
    Overwrite this method for validation checks used only on creation.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/validations.rb, line 987
    987:       def validate_on_create #:doc:
    988:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Validations.html#M001317
- :tinyuri: http://tinyurl.com/52aa5g
  :path: 
  - ActiveRecord
  - Validations
  :method: validate_on_update
  :description: |+
    
        validate_on_update(
    Overwrite this method for validation checks used only on updates.
    
    
    
         # File vendor/rails/activerecord/lib/active_record/validations.rb, line 991
    991:       def validate_on_update # :doc:
    992:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Validations.html#M001318
- :tinyuri: http://tinyurl.com/4qfhc6
  :path: 
  - ActiveRecord
  - Validations
  - ClassMethods
  :method: validate_on_update
  :description: |+
    
        validate_on_update(*methods, &block)
    
    
         # File vendor/rails/activerecord/lib/active_record/validations.rb, line 337
    337:       def validate_on_update(*methods, &block)
    338:         methods << block if block_given?
    339:         write_inheritable_set(:validate_on_update, methods)
    340:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Validations/ClassMethods.html#M001321
- :tinyuri: http://tinyurl.com/2rlytj
  :path: 
  - ActiveRecord
  - Validations
  - ClassMethods
  :method: validates_acceptance_of
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Validations/ClassMethods.html#M001326
- :tinyuri: http://tinyurl.com/2llp55
  :path: 
  - ActiveRecord
  - Validations
  - ClassMethods
  :method: validates_associated
  :description: "\n  \n    validates_associated(*attr_names)\n  \n  \n  \n\
    Validates whether the associated object or objects are all valid\n\
    themselves. Works with any kind of association.\n\n\n  class Book < ActiveRecord::Base\n    has_many :pages\n    belongs_to :library\n\n    validates_associated :pages, :library\n  end\n\n\n\
    Warning: If, after the above definition, you then wrote:\n\n\n  class Page < ActiveRecord::Base\n    belongs_to :book\n\n    validates_associated :book\n  end\n\n\n\
    \xE2\x80\xA6this would specify a circular dependency and cause infinite\n\
    recursion.\n\n\n\
    NOTE: This validation will not fail if the association hasn\xE2\x80\x98t been\n\
    assigned. If you want to ensure that the association is both present and\n\
    guaranteed to be valid, you also need to use validates_presence_of.\n\n\n\
    Configuration options:\n\n\n\
    message - A custom error message (default is: \"is\n\
    invalid\")\n\n\n\
    on Specifies when this validation is active (default is :save,\n\
    other options :create, :update)\n\n\n\
    if - Specifies a method, proc or string to call to determine if\n\
    the validation should occur (e.g. :if => :allow_validation, or :if =>\n\
    Proc.new { |user| user.signup_step > 2 }). The method, proc or string\n\
    should return or evaluate to a true or false value.\n\n\n\
    unless - Specifies a method, proc or string to call to determine\n\
    if the validation should not occur (e.g. :unless => :skip_validation, or\n\
    :unless => Proc.new { |user| user.signup_step <= 2 }). The method,\n\
    824:       def validates_associated(*attr_names)\n\
    825:         configuration = { :message => ActiveRecord::Errors.default_error_messages[:invalid], :on => :save }\n\
    826:         configuration.update(attr_names.extract_options!)\n\
    827: \n\
    828:         validates_each(attr_names, configuration) do |record, attr_name, value|\n\
    829:           record.errors.add(attr_name, configuration[:message]) unless\n\
    830:             (value.is_a?(Array) ? value : [value]).inject(true) { |v, r| (r.nil? || r.valid?) && v }\n\
    831:         end\n\
    832:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Validations/ClassMethods.html#M001334
- :tinyuri: http://tinyurl.com/45888f
  :path: 
  - ActiveRecord
  - Validations
  - ClassMethods
  :method: validates_confirmation_of
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Validations/ClassMethods.html#M001325
- :tinyuri: http://tinyurl.com/3kzmls
  :path: 
  - ActiveRecord
  - Validations
  - ClassMethods
  :method: validates_each
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Validations/ClassMethods.html#M001324
- :tinyuri: http://tinyurl.com/4ynhob
  :path: 
  - ActiveRecord
  - Validations
  - ClassMethods
  :method: validates_exclusion_of
  :description: "\n  \n    validates_exclusion_of(*attr_names)\n  \n  \n  \n\
    Validates that the value of the specified attribute is not in a particular\n\
    enumerable object.\n\n\n  class Person < ActiveRecord::Base\n    validates_exclusion_of :username, :in => %w( admin superuser ), :message => \"You don't belong here\"\n    validates_exclusion_of :age, :in => 30..60, :message => \"This site is only for under 30 and over 60\"\n    validates_exclusion_of :format, :in => %w( mov avi ), :message => \"extension %s is not allowed\"\n  end\n\n\n\
    Configuration options:\n\n\n\
    in - An enumerable object of items that the value shouldn\xE2\x80\x98t\n\
    be part of\n\n\n\
    message - Specifies a customer error message (default is: \"is\n\
    reserved\")\n\n\n\
    allow_nil - If set to true, skips this validation if the attribute\n\
    is null (default is: false)\n\n\n\
    allow_blank - If set to true, skips this validation if the\n\
    attribute is blank (default is: false)\n\n\n\
    if - Specifies a method, proc or string to call to determine if\n\
    the validation should occur (e.g. :if => :allow_validation, or :if =>\n\
    Proc.new { |user| user.signup_step > 2 }). The method, proc or string\n\
    should return or evaluate to a true or false value.\n\n\n\
    unless - Specifies a method, proc or string to call to determine\n\
    if the validation should not occur (e.g. :unless => :skip_validation, or\n\
    :unless => Proc.new { |user| user.signup_step <= 2 }). The method,\n\
    780:       def validates_exclusion_of(*attr_names)\n\
    781:         configuration = { :message => ActiveRecord::Errors.default_error_messages[:exclusion], :on => :save }\n\
    782:         configuration.update(attr_names.extract_options!)\n\
    783: \n\
    784:         enum = configuration[:in] || configuration[:within]\n\
    785: \n\
    786:         raise(ArgumentError, \"An object with the method include? is required must be supplied as the :in option of the configuration hash\") unless enum.respond_to?(\"include?\")\n\
    787: \n\
    788:         validates_each(attr_names, configuration) do |record, attr_name, value|\n\
    789:           record.errors.add(attr_name, configuration[:message] % value) if enum.include?(value)\n\
    790:         end\n\
    791:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Validations/ClassMethods.html#M001333
- :tinyuri: http://tinyurl.com/4ux7ta
  :path: 
  - ActiveRecord
  - Validations
  - ClassMethods
  :method: validates_format_of
  :description: |+
    
        validates_format_of(*attr_names)
    Validates whether the value of the specified attribute is of the correct
    form by matching it against the regular expression provided.
    
    
      class Person < ActiveRecord::Base
        validates_format_of :email, :with => /\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\Z/i, :on => :create
      end
    
    
    Note: use \A and \Z to match the start and end of the string, ^ and $ match
    the start/end of a line.
    
    
    A regular expression must be provided or else an exception will be raised.
    
    
    Configuration options:
    
    
    message - A custom error message (default is: "is
    invalid")
    
    
    with - The regular expression used to validate the format with (note: must
    be supplied!)
    
    
    on Specifies when this validation is active (default is :save,
    other options :create, :update)
    
    
    if - Specifies a method, proc or string to call to determine if
    the validation should occur (e.g. :if => :allow_validation, or :if =>
    Proc.new { |user| user.signup_step > 2 }). The method, proc or string
    should return or evaluate to a true or false value.
    
    
    unless - Specifies a method, proc or string to call to determine
    if the validation should not occur (e.g. :unless => :skip_validation, or
    :unless => Proc.new { |user| user.signup_step <= 2 }). The method,
    proc or string should return or evaluate to a true or false value.
    
    
    
    
    
         # File vendor/rails/activerecord/lib/active_record/validations.rb, line 718
    718:       def validates_format_of(*attr_names)
    719:         configuration = { :message => ActiveRecord::Errors.default_error_messages[:invalid], :on => :save, :with => nil }
    720:         configuration.update(attr_names.extract_options!)
    721: 
    722:         raise(ArgumentError, "A regular expression must be supplied as the :with option of the configuration hash") unless configuration[:with].is_a?(Regexp)
    723: 
    724:         validates_each(attr_names, configuration) do |record, attr_name, value|
    725:           record.errors.add(attr_name, configuration[:message]) unless value.to_s =~ configuration[:with]
    726:         end
    727:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Validations/ClassMethods.html#M001331
- :tinyuri: http://tinyurl.com/28jjw7
  :path: 
  - ActiveRecord
  - Validations
  - ClassMethods
  :method: validates_inclusion_of
  :description: |+
    
        validates_inclusion_of(*attr_names)
    Validates whether the value of the specified attribute is available in a
    particular enumerable object.
    
    
      class Person < ActiveRecord::Base
        validates_inclusion_of :gender, :in => %w( m f ), :message => "woah! what are you then!??!!"
        validates_inclusion_of :age, :in => 0..99
        validates_inclusion_of :format, :in => %w( jpg gif png ), :message => "extension %s is not included in the list"
      end
    
    
    Configuration options:
    
    
    in - An enumerable object of available items
    
    
    message - Specifies a customer error message (default is: "is
    not included in the list")
    
    
    allow_nil - If set to true, skips this validation if the attribute
    is null (default is: false)
    
    
    allow_blank - If set to true, skips this validation if the
    attribute is blank (default is: false)
    
    
    if - Specifies a method, proc or string to call to determine if
    the validation should occur (e.g. :if => :allow_validation, or :if =>
    Proc.new { |user| user.signup_step > 2 }). The method, proc or string
    should return or evaluate to a true or false value.
    
    
    unless - Specifies a method, proc or string to call to determine
    if the validation should not occur (e.g. :unless => :skip_validation, or
    :unless => Proc.new { |user| user.signup_step <= 2 }). The method,
    proc or string should return or evaluate to a true or false value.
    
    
    
    
    
         # File vendor/rails/activerecord/lib/active_record/validations.rb, line 748
    748:       def validates_inclusion_of(*attr_names)
    749:         configuration = { :message => ActiveRecord::Errors.default_error_messages[:inclusion], :on => :save }
    750:         configuration.update(attr_names.extract_options!)
    751: 
    752:         enum = configuration[:in] || configuration[:within]
    753: 
    754:         raise(ArgumentError, "An object with the method include? is required must be supplied as the :in option of the configuration hash") unless enum.respond_to?("include?")
    755: 
    756:         validates_each(attr_names, configuration) do |record, attr_name, value|
    757:           record.errors.add(attr_name, configuration[:message] % value) unless enum.include?(value)
    758:         end
    759:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Validations/ClassMethods.html#M001332
- :tinyuri: http://tinyurl.com/46mnub
  :path: 
  - ActiveRecord
  - Validations
  - ClassMethods
  :method: validates_length_of
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Validations/ClassMethods.html#M001328
- :tinyuri: http://tinyurl.com/542luz
  :path: 
  - ActiveRecord
  - Validations
  - ClassMethods
  :method: validates_numericality_of
  :description: |+
    
        validates_numericality_of(*attr_names)
    Validates whether the value of the specified attribute is numeric by trying
    to convert it to a float with Kernel.Float (if integer is false)
    or applying it to the regular expression /\A[+\-]?\d+\Z/ (if
    integer is set to true).
    
    
      class Person < ActiveRecord::Base
        validates_numericality_of :value, :on => :create
      end
    
    
    Configuration options:
    
    
    message - A custom error message (default is: "is not a
    number")
    
    
    on Specifies when this validation is active (default is :save,
    other options :create, :update)
    
    
    only_integer Specifies whether the value has to be an integer,
    e.g. an integral value (default is false)
    
    
    allow_nil Skip validation if attribute is nil (default is false).
    Notice that for fixnum and float columns empty strings are converted to nil
    
    
    greater_than Specifies the value must be greater than the supplied
    value
    
    
    greater_than_or_equal_to Specifies the value must be greater than
    or equal the supplied value
    
    
    equal_to Specifies the value must be equal to the supplied value
    
    
    less_than Specifies the value must be less than the supplied value
    
    
    less_than_or_equal_to Specifies the value must be less than or
    equal the supplied value
    
    
    odd Specifies the value must be an odd number
    
    
    even Specifies the value must be an even number
    
    
    if - Specifies a method, proc or string to call to determine if
    the validation should occur (e.g. :if => :allow_validation, or :if =>
    Proc.new { |user| user.signup_step > 2 }). The method, proc or string
    should return or evaluate to a true or false value.
    
    
    unless - Specifies a method, proc or string to call to determine
    if the validation should not occur (e.g. :unless => :skip_validation, or
    :unless => Proc.new { |user| user.signup_step <= 2 }). The method,
    proc or string should return or evaluate to a true or false value.
    
    
    
    
    
         # File vendor/rails/activerecord/lib/active_record/validations.rb, line 860
    860:       def validates_numericality_of(*attr_names)
    861:         configuration = { :on => :save, :only_integer => false, :allow_nil => false }
    862:         configuration.update(attr_names.extract_options!)
    863: 
    864: 
    865:         numericality_options = ALL_NUMERICALITY_CHECKS.keys & configuration.keys
    866: 
    867:         (numericality_options - [ :odd, :even ]).each do |option|
    868:           raise ArgumentError, ":#{option} must be a number" unless configuration[option].is_a?(Numeric)
    869:         end
    870: 
    871:         validates_each(attr_names,configuration) do |record, attr_name, value|
    872:           raw_value = record.send("#{attr_name}_before_type_cast") || value
    873: 
    874:           next if configuration[:allow_nil] and raw_value.nil?
    875: 
    876:           if configuration[:only_integer]
    877:             unless raw_value.to_s =~ /\A[+-]?\d+\Z/
    878:               record.errors.add(attr_name, configuration[:message] || ActiveRecord::Errors.default_error_messages[:not_a_number])
    879:               next
    880:             end
    881:             raw_value = raw_value.to_i
    882:           else
    883:            begin
    884:               raw_value = Kernel.Float(raw_value.to_s)
    885:             rescue ArgumentError, TypeError
    886:               record.errors.add(attr_name, configuration[:message] || ActiveRecord::Errors.default_error_messages[:not_a_number])
    887:               next
    888:             end
    889:           end
    890: 
    891:           numericality_options.each do |option|
    892:             case option
    893:               when :odd, :even
    894:                 record.errors.add(attr_name, configuration[:message] || ActiveRecord::Errors.default_error_messages[option]) unless raw_value.to_i.method(ALL_NUMERICALITY_CHECKS[option])[]
    895:               else
    896:                 record.errors.add(attr_name, configuration[:message] || (ActiveRecord::Errors.default_error_messages[option] % configuration[option])) unless raw_value.method(ALL_NUMERICALITY_CHECKS[option])[configuration[option]]
    897:             end
    898:           end
    899:         end
    900:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Validations/ClassMethods.html#M001335
- :tinyuri: http://tinyurl.com/2wdscg
  :path: 
  - ActiveRecord
  - Validations
  - ClassMethods
  :method: validates_presence_of
  :description: "\n  \n    validates_presence_of(*attr_names)\n  \n  \n  \n\
    Validates that the specified attributes are not blank (as defined by\n\
    Object#blank?). Happens by default on save. Example:\n\n\n  class Person < ActiveRecord::Base\n    validates_presence_of :first_name\n  end\n\n\n\
    The first_name attribute must be in the object and it cannot be blank.\n\n\n\
    If you want to validate the\n\
    presence of a boolean field (where the real values are true and false), you\n\
    will want to use validates_inclusion_of :field_name,\n\
    :in => [true, false] This is due to the way Object#blank? handles\n\
    boolean values. false.blank? # => true\n\n\n\
    Configuration options:\n\n\n\
    message - A custom error message (default is: \"can\xE2\x80\x98t be\n\
    blank\")\n\n\n\
    on - Specifies when this validation is active (default is :save,\n\
    other options :create, :update)\n\n\n\
    if - Specifies a method, proc or string to call to determine if\n\
    the validation should occur (e.g. :if => :allow_validation, or :if =>\n\
    Proc.new { |user| user.signup_step > 2 }). The method, proc or string\n\
    should return or evaluate to a true or false value.\n\n\n\
    unless - Specifies a method, proc or string to call to determine\n\
    if the validation should not occur (e.g. :unless => :skip_validation, or\n\
    :unless => Proc.new { |user| user.signup_step <= 2 }). The method,\n\
    proc or string should return or evaluate to a true or false value.\n\n\n\n\
    Warning\n\n\
    Validate the presence of the foreign key, not the instance variable itself.\n\
    Do this:\n\n\n validates_presence_of :invoice_id\n\n\n\
    Not this:\n\n\n validates_presence_of :invoice\n\n\n\
    If you validate the presence of the\n\
    associated object, you will get failures on saves when both the parent\n\
    512:       def validates_presence_of(*attr_names)\n\
    513:         configuration = { :message => ActiveRecord::Errors.default_error_messages[:blank], :on => :save }\n\
    514:         configuration.update(attr_names.extract_options!)\n\
    515: \n\
    516:         # can't use validates_each here, because it cannot cope with nonexistent attributes,\n\
    517:         # while errors.add_on_empty can\n\
    518:         send(validation_method(configuration[:on])) do |record|\n\
    519:           unless (configuration[:if] && !evaluate_condition(configuration[:if], record)) || (configuration[:unless] && evaluate_condition(configuration[:unless], record))\n\
    520:             record.errors.add_on_blank(attr_names, configuration[:message])\n\
    521:           end\n\
    522:         end\n\
    523:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Validations/ClassMethods.html#M001327
- :tinyuri: http://tinyurl.com/3erxv5
  :path: 
  - ActiveRecord
  - Validations
  - ClassMethods
  :method: validates_size_of
  :description: |
    
        validates_size_of(*attrs)
    Alias for validates_length_of
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Validations/ClassMethods.html#M001329
- :tinyuri: http://tinyurl.com/3gz5t9
  :path: 
  - ActiveRecord
  - Validations
  - ClassMethods
  :method: validates_uniqueness_of
  :description: |+
    
        validates_uniqueness_of(*attr_names)
    Validates whether the value of the specified attributes are unique across
    the system. Useful for making sure that only one user can be named
    "davidhh".
    
    
      class Person < ActiveRecord::Base
        validates_uniqueness_of :user_name, :scope => :account_id
      end
    
    
    It can also validate whether the
    value of the specified attributes are unique based on multiple scope
    parameters. For example, making sure that a teacher can only be on the
    schedule once per semester for a particular class.
    
    
      class TeacherSchedule < ActiveRecord::Base
        validates_uniqueness_of :teacher_id, :scope => [:semester_id, :class_id]
      end
    
    
    When the record is created, a check is performed to make sure that no
    record exists in the database with the given value for the specified
    attribute (that maps to a column). When the record is updated, the same
    check is made but disregarding the record itself.
    
    
    Because this check is performed outside the database there is still a
    chance that duplicate values will be inserted in two parallel transactions.
    To guarantee against this you should create a unique index on the field.
    See create_index for more information.
    
    
    Configuration options:
    
    
    message - Specifies a custom error message (default is: "has
    already been taken")
    
    
    scope - One or more columns by which to limit the scope of the
    uniquness constraint.
    
    
    case_sensitive - Looks for an exact match. Ignored by non-text
    columns (true by default).
    
    
    allow_nil - If set to true, skips this validation if the attribute
    is null (default is: false)
    
    
    allow_blank - If set to true, skips this validation if the
    attribute is blank (default is: false)
    
    
    if - Specifies a method, proc or string to call to determine if
    the validation should occur (e.g. :if => :allow_validation, or :if =>
    Proc.new { |user| user.signup_step > 2 }). The method, proc or string
    should return or evaluate to a true or false value.
    
    
    unless - Specifies a method, proc or string to call to determine
    if the validation should not occur (e.g. :unless => :skip_validation, or
    :unless => Proc.new { |user| user.signup_step <= 2 }). The method,
    proc or string should return or evaluate to a true or false value.
    
    
    
    
    
         # File vendor/rails/activerecord/lib/active_record/validations.rb, line 650
    650:       def validates_uniqueness_of(*attr_names)
    651:         configuration = { :message => ActiveRecord::Errors.default_error_messages[:taken], :case_sensitive => true }
    652:         configuration.update(attr_names.extract_options!)
    653: 
    654:         validates_each(attr_names,configuration) do |record, attr_name, value|
    655:           if value.nil? || (configuration[:case_sensitive] || !columns_hash[attr_name.to_s].text?)
    656:             condition_sql = "#{record.class.table_name}.#{attr_name} #{attribute_condition(value)}"
    657:             condition_params = [value]
    658:           else
    659:             condition_sql = "LOWER(#{record.class.table_name}.#{attr_name}) #{attribute_condition(value)}"
    660:             condition_params = [value.downcase]
    661:           end
    662: 
    663:           if scope = configuration[:scope]
    664:             Array(scope).map do |scope_item|
    665:               scope_value = record.send(scope_item)
    666:               condition_sql << " AND #{record.class.table_name}.#{scope_item} #{attribute_condition(scope_value)}"
    667:               condition_params << scope_value
    668:             end
    669:           end
    670: 
    671:           unless record.new_record?
    672:             condition_sql << " AND #{record.class.table_name}.#{record.class.primary_key} <> ?"
    673:             condition_params << record.send(:id)
    674:           end
    675: 
    676:           # The check for an existing value should be run from a class that
    677:           # isn't abstract. This means working down from the current class
    678:           # (self), to the first non-abstract class. Since classes don't know
    679:           # their subclasses, we have to build the hierarchy between self and
    680:           # the record's class.
    681:           class_hierarchy = [record.class]
    682:           while class_hierarchy.first != self
    683:             class_hierarchy.insert(0, class_hierarchy.first.superclass)
    684:           end
    685: 
    686:           # Now we can work our way down the tree to the first non-abstract
    687:           # class (which has a database table to query from).
    688:           finder_class = class_hierarchy.detect { |klass| !klass.abstract_class? }
    689: 
    690:           if finder_class.find(:first, :conditions => [condition_sql, *condition_params])
    691:             record.errors.add(attr_name, configuration[:message])
    692:           end
    693:         end
    694:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Validations/ClassMethods.html#M001330
- :tinyuri: http://tinyurl.com/4o8j5k
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - Column
  :method: value_to_boolean
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/Column.html#M001210
- :tinyuri: http://tinyurl.com/3ltewd
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - Column
  :method: value_to_decimal
  :description: |+
    
        value_to_decimal(value)
    convert something to a BigDecimal
    
    
    
         # File vendor/rails/activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb, line 146
    146:         def value_to_decimal(value)
    147:           if value.is_a?(BigDecimal)
    148:             value
    149:           elsif value.respond_to?(:to_d)
    150:             value.to_d
    151:           else
    152:             value.to_s.to_d
    153:           end
    154:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/Column.html#M001211
- :tinyuri: http://tinyurl.com/4h654c
  :path: 
  - HashWithIndifferentAccess
  :method: values_at
  :description: |+
    
        values_at(*indices)
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/hash/indifferent_access.rb, line 48
    48:   def values_at(*indices)
    49:     indices.collect {|key| self[convert_key(key)]}
    50:   end
    
    
  :uri: http://api.rubyonrails.org/classes/HashWithIndifferentAccess.html#M000068
- :tinyuri: http://tinyurl.com/4vbx6s
  :path: 
  - ActionController
  - RequestForgeryProtection
  :method: verifiable_request_format?
  :description: |+
    
        verifiable_request_format?()
    
    
        # File vendor/rails/actionpack/lib/action_controller/request_forgery_protection.rb, line 94
    94:       def verifiable_request_format?
    95:         request.format.html? || request.format.js?
    96:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/RequestForgeryProtection.html#M000295
- :tinyuri: http://tinyurl.com/3wgjhp
  :path: 
  - ActionController
  - RequestForgeryProtection
  :method: verified_request?
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionController/RequestForgeryProtection.html#M000294
- :tinyuri: http://tinyurl.com/yr9erp
  :path: 
  - ActionController
  - Verification
  - ClassMethods
  :method: verify
  :description: "\n  \n    verify(options={})\n  \n  \n  \n\
    Verify the given actions so that if certain prerequisites are not met, the\n\
    user is redirected to a different action. The options parameter is\n\
    a hash consisting of the following key/value pairs:\n\n\n\
    :params - a single key or an array of keys that must be in the\n\
    params hash in order for the action(s) to be safely called.\n\n\n\
    :session - a single key or an array of keys that must be in the\n\
    session in order for the action(s) to be safely called.\n\n\n\
    :flash - a single key or an array of keys that must be in the\n\
    flash in order for the action(s) to be safely called.\n\n\n\
    :method - a single key or an array of keys\xE2\x80\x94any one of which\n\
    must match the current request method in order for the action(s) to be\n\
    safely called. (The key should be a symbol: :get or\n\
    :post, for example.)\n\n\n\
    :xhr - true/false option to ensure that the request is coming from\n\
    an Ajax call or not.\n\n\n\
    :add_flash - a hash of name/value pairs that should be merged into\n\
    the session\xE2\x80\x98s flash if the prerequisites cannot be satisfied.\n\n\n\
    :add_headers - a hash of name/value pairs that should be merged\n\
    into the response\xE2\x80\x98s headers hash if the prerequisites cannot be\n\
    satisfied.\n\n\n\
    :redirect_to - the redirection parameters to be used when\n\
    redirecting if the prerequisites cannot be satisfied. You can redirect\n\
    either to named route or to the action in some controller.\n\n\n\
    :render - the render parameters to be used when the prerequisites\n\
    cannot be satisfied.\n\n\n\
    :only - only apply this verification to the actions specified in\n\
    the associated array (may also be a single value).\n\n\n\
    :except - do not apply this verification to the actions specified\n\
    73:       def verify(options={})\n\
    74:         filter_opts = { :only => options[:only], :except => options[:except] }\n\
    75:         before_filter(filter_opts) do |c|\n\
    76:           c.send! :verify_action, options\n\
    77:         end\n\
    78:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionController/Verification/ClassMethods.html#M000307
- :tinyuri: http://tinyurl.com/4rq9mo
  :path: 
  - ActiveRecord
  - ConnectionAdapters
  - AbstractAdapter
  :method: verify!
  :description: "\n  \n    verify!(timeout)\n  \n  \n  \n\
    Lazily verify this connection, calling +active?+ only if it hasn\xE2\x80\x98t\n\
    105:       def verify!(timeout)\n\
    106:         now = Time.now.to_i\n\
    107:         if (now - @last_verification) > timeout\n\
    108:           reconnect! unless active?\n\
    109:           @last_verification = now\n\
    110:         end\n\
    111:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#M001292
- :tinyuri: http://tinyurl.com/4knslg
  :path: 
  - ActionController
  - RequestForgeryProtection
  :method: verify_authenticity_token
  :description: |+
    
        verify_authenticity_token()
    The actual before_filter that is used. Modify this to change how you handle
    unverified requests.
    
    
    
        # File vendor/rails/actionpack/lib/action_controller/request_forgery_protection.rb, line 78
    78:       def verify_authenticity_token
    79:         verified_request? || raise(ActionController::InvalidAuthenticityToken)
    80:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/RequestForgeryProtection.html#M000293
- :tinyuri: http://tinyurl.com/3gjcn7
  :path: 
  - ActionController
  - Base
  :method: view_paths
  :description: |+
    
        view_paths()
    View load paths for controller.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/base.rb, line 644
    644:       def view_paths
    645:         (@template || self.class).view_paths
    646:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Base.html#M000448
- :tinyuri: http://tinyurl.com/3uo7pn
  :path: 
  - ActionController
  - Base
  :method: view_paths
  :description: |+
    
        view_paths()
    View load paths determine the bases from which template references can be
    made. So a call to render("test/template") will be
    looked up in the view load paths array and the closest match will be
    returned.
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/base.rb, line 425
    425:       def view_paths
    426:         @view_paths || superclass.view_paths
    427:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Base.html#M000437
- :tinyuri: http://tinyurl.com/4qxuum
  :path: 
  - ActionController
  - Base
  :method: view_paths=
  :description: |+
    
        view_paths=(value)
    
    
         # File vendor/rails/actionpack/lib/action_controller/base.rb, line 429
    429:       def view_paths=(value)
    430:         @view_paths = value
    431:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Base.html#M000438
- :tinyuri: http://tinyurl.com/3nlqof
  :path: 
  - ActionController
  - Base
  :method: view_paths=
  :description: |+
    
        view_paths=(value)
    
    
         # File vendor/rails/actionpack/lib/action_controller/base.rb, line 648
    648:       def view_paths=(value)
    649:         (@template || self.class).view_paths = value
    650:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Base.html#M000449
- :tinyuri: http://tinyurl.com/3k437b
  :path: 
  - ActionView
  - Helpers
  - PrototypeHelper
  - JavaScriptGenerator
  - GeneratorMethods
  :method: visual_effect
  :description: |+
    
        visual_effect(name, id = nil, options = {})
    Starts a script.aculo.us visual effect. See ActionView::Helpers::ScriptaculousHelper
    for more information.
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/prototype_helper.rb, line 911
    911:           def visual_effect(name, id = nil, options = {})
    912:             record @context.send(:visual_effect, name, id, options)
    913:           end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/PrototypeHelper/JavaScriptGenerator/GeneratorMethods.html#M000990
- :tinyuri: http://tinyurl.com/4fdqca
  :path: 
  - ActionView
  - Helpers
  - ScriptaculousHelper
  :method: visual_effect
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/ScriptaculousHelper.html#M000952
- :tinyuri: http://tinyurl.com/4y8v9r
  :path: 
  - ActionController
  - RequestProfiler
  :method: warmup
  :description: |+
    
        warmup(sandbox)
    
    
        # File vendor/rails/actionpack/lib/action_controller/request_profiler.rb, line 88
    88:     def warmup(sandbox)
    89:       Benchmark.realtime { sandbox.run }
    90:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/RequestProfiler.html#M000384
- :tinyuri: http://tinyurl.com/4mg7dz
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Numeric
  - Time
  :method: week
  :description: |
    
        week()
    Alias for weeks
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Numeric/Time.html#M000647
- :tinyuri: http://tinyurl.com/53l2gy
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Numeric
  - Time
  :method: weeks
  :description: |+
    
        weeks()
    
      This method is also aliased as
      week
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/numeric/time.rb, line 53
    53:         def weeks
    54:           ActiveSupport::Duration.new(self * 7.days, [[:days, self * 7]])
    55:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Numeric/Time.html#M000646
- :tinyuri: http://tinyurl.com/3fn6r6
  :path: 
  - ActionController
  - Routing
  :method: with_controllers
  :description: |+
    
        with_controllers(names) {|| ...}
    
    
         # File vendor/rails/actionpack/lib/action_controller/routing.rb, line 292
    292:       def with_controllers(names)
    293:         prior_controllers = @possible_controllers
    294:         use_controllers! names
    295:         yield
    296:       ensure
    297:         use_controllers! prior_controllers
    298:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Routing.html#M000332
- :tinyuri: http://tinyurl.com/4awtw5
  :path: 
  - ActiveRecord
  - Base
  :method: with_exclusive_scope
  :description: |+
    
        with_exclusive_scope(method_scoping = {}, &block)
    Works like with_scope, but discards any
    nested properties.
    
    
    
          # File vendor/rails/activerecord/lib/active_record/base.rb, line 1700
    1700:         def with_exclusive_scope(method_scoping = {}, &block)
    1701:           with_scope(method_scoping, :overwrite, &block)
    1702:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001417
- :tinyuri: http://tinyurl.com/3tsytm
  :path: 
  - Object
  :method: with_options
  :description: |+
    
        with_options(options) {|ActiveSupport::OptionMerger.new(self, options)| ...}
    An elegant way to refactor out common options
    
    
      with_options :order => 'created_at', :class_name => 'Comment' do |post|
        post.has_many :comments, :conditions => ['approved = ?', true], :dependent => :delete_all
        post.has_many :unapproved_comments, :conditions => ['approved = ?', false]
        post.has_many :all_comments
      end
    
    
    Can also be used with an explicit receiver:
    
    
      map.with_options :controller => "people" do |people|
        people.connect "/people",     :action => "index"
        people.connect "/people/:id", :action => "show"
      end
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/object/misc.rb, line 47
    47:   def with_options(options)
    48:     yield ActiveSupport::OptionMerger.new(self, options)
    49:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Object.html#M000140
- :tinyuri: http://tinyurl.com/4p4pyl
  :path: 
  - ActionController
  - TestProcess
  :method: with_routing
  :description: "\n  \n    with_routing() {|temporary_routes| ...}\n  \n  \n  \n\
    A helper to make it easier to test different route configurations. This\n\
    method temporarily replaces ActionController::Routing::Routes with a new\n\
    RouteSet instance.\n\n\n\
    The new instance is yielded to the passed block. Typically the block will\n\
    498:     def with_routing\n\
    499:       real_routes = ActionController::Routing::Routes\n\
    500:       ActionController::Routing.module_eval { remove_const :Routes }\n\
    501: \n\
    502:       temporary_routes = ActionController::Routing::RouteSet.new\n\
    503:       ActionController::Routing.module_eval { const_set :Routes, temporary_routes }\n\
    504: \n\
    505:       yield temporary_routes\n\
    506:     ensure\n\
    507:       if ActionController::Routing.const_defined? :Routes\n\
    508:         ActionController::Routing.module_eval { remove_const :Routes }\n\
    509:       end\n\
    510:       ActionController::Routing.const_set(:Routes, real_routes) if real_routes\n\
    511:     end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionController/TestProcess.html#M000205
- :tinyuri: http://tinyurl.com/4z2bxd
  :path: 
  - ActiveRecord
  - Base
  :method: with_scope
  :description: 
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M001416
- :tinyuri: http://tinyurl.com/4ehkg9
  :path: 
  - RailsFCGIHandler
  :method: with_signal_handler
  :description: |+
    
        with_signal_handler(signal) {|| ...}
    
    
         # File vendor/rails/railties/lib/fcgi_handler.rb, line 147
    147:     def with_signal_handler(signal)
    148:       install_signal_handler(signal)
    149:       yield
    150:     ensure
    151:       install_signal_handler(signal, 'DEFAULT')
    152:     end
    
    
  :uri: http://api.rubyonrails.org/classes/RailsFCGIHandler.html#M000039
- :tinyuri: http://tinyurl.com/3qabcz
  :path: 
  - ActionView
  - Helpers
  - TextHelper
  :method: word_wrap
  :description: |+
    
        word_wrap(text, line_width = 80)
    Wraps the text into lines no longer than line_width
    width. This method breaks on the first whitespace character that does not
    exceed line_width (which is 80 by default).
    
    Examples
    
      word_wrap('Once upon a time', 4)
      # => Once\nupon\na\ntime
    
      word_wrap('Once upon a time', 8)
      # => Once upon\na time
    
      word_wrap('Once upon a time')
      # => Once upon a time
    
      word_wrap('Once upon a time', 1)
      # => Once\nupon\na\ntime
    
    
    
         # File vendor/rails/actionpack/lib/action_view/helpers/text_helper.rb, line 163
    163:       def word_wrap(text, line_width = 80)
    164:         text.split("\n").collect do |line|
    165:           line.length > line_width ? line.gsub(/(.{1,#{line_width}})(\s+|$)/, "\\1\n").strip : line
    166:         end * "\n"
    167:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionView/Helpers/TextHelper.html#M001053
- :tinyuri: http://tinyurl.com/47f6fy
  :path: 
  - ActionView
  - CompiledTemplates
  :method: wrap_source
  :description: "\n  \n    wrap_source(name, arg_names, source)\n  \n  \n  \n\
    65:     def wrap_source(name, arg_names, source)\n\
    66:       \"def #{name}(#{arg_names * ', '})\\n#{source}\\nend\"\n\
    67:     end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionView/CompiledTemplates.html#M001081
- :tinyuri: http://tinyurl.com/3hfzj8
  :path: 
  - ActiveRecord
  - Migration
  :method: write
  :description: |+
    
        write(text="")
    
    
         # File vendor/rails/activerecord/lib/active_record/migration.rb, line 248
    248:       def write(text="")
    249:         puts(text) if verbose
    250:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveRecord/Migration.html#M001369
- :tinyuri: http://tinyurl.com/4cp8o7
  :path: 
  - ActionController
  - Caching
  - Fragments
  :method: write_fragment
  :description: |+
    
        write_fragment(name, content, options = nil)
    Writes content to the location signified by name (see
    expire_fragment for
    acceptable formats)
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/caching.rb, line 390
    390:       def write_fragment(name, content, options = nil)
    391:         return unless perform_caching
    392: 
    393:         key = fragment_cache_key(name)
    394:         self.class.benchmark "Cached fragment: #{key}" do
    395:           fragment_cache_store.write(key, content, options)
    396:         end
    397:         content
    398:       end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Caching/Fragments.html#M000261
- :tinyuri: http://tinyurl.com/3vkdlo
  :path: 
  - Fixnum
  :method: xchr
  :description: |+
    
        xchr()
    XML escaped version of chr
    
    
    
         # File vendor/rails/activesupport/lib/active_support/vendor/builder-2.1.2/builder/xchar.rb, line 93
     93:   def xchr
     94:     n = XChar::CP1252[self] || self
     95:     case n when *XChar::VALID
     96:       XChar::PREDEFINED[n] or (n<128 ? n.chr : "&##{n};")
     97:     else
     98:       '*'
     99:     end
    100:   end
    
    
  :uri: http://api.rubyonrails.org/classes/Fixnum.html#M000146
- :tinyuri: http://tinyurl.com/4qu3qn
  :path: 
  - ActionController
  - Integration
  - Session
  :method: xhr
  :description: |
    
        xhr(request_method, path, parameters = nil, headers = nil)
    Alias for xml_http_request
    
  :uri: http://api.rubyonrails.org/classes/ActionController/Integration/Session.html#M000251
- :tinyuri: http://tinyurl.com/3dm44v
  :path: 
  - ActionController
  - TestProcess
  :method: xhr
  :description: |
    
        xhr(request_method, action, parameters = nil, session = nil, flash = nil)
    Alias for xml_http_request
    
  :uri: http://api.rubyonrails.org/classes/ActionController/TestProcess.html#M000192
- :tinyuri: http://tinyurl.com/4jrmpf
  :path: 
  - ActionController
  - AbstractRequest
  :method: xhr?
  :description: |
    
        xhr?()
    Alias for xml_http_request?
    
  :uri: http://api.rubyonrails.org/classes/ActionController/AbstractRequest.html#M000407
- :tinyuri: http://tinyurl.com/5xwhrv
  :path: 
  - ActionController
  - Integration
  - Session
  :method: xml_http_request
  :description: "\n  \n    xml_http_request(request_method, path, parameters = nil, headers = nil)\n  \n  \n  \n\
    Performs an XMLHttpRequest request with the given parameters, mirroring a\n\
    request from the Prototype library.\n\n\n\
    The request_method is :get, :post, :put, :delete or :head; the parameters are nil, a\n\
    hash, or a url-encoded or multipart string; the headers are a hash. Keys\n\
    are automatically upcased and prefixed with \xE2\x80\x98HTTP_\xE2\x80\x99 if not\n\
    202:       def xml_http_request(request_method, path, parameters = nil, headers = nil)\n\
    203:         headers ||= {}\n\
    204:         headers['X-Requested-With'] = 'XMLHttpRequest'\n\
    205:         headers['Accept'] ||= 'text/javascript, text/html, application/xml, text/xml, */*'\n\
    206: \n\
    207:         process(request_method, path, parameters, headers)\n\
    208:       end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionController/Integration/Session.html#M000250
- :tinyuri: http://tinyurl.com/4g9w8b
  :path: 
  - ActionController
  - TestProcess
  :method: xml_http_request
  :description: |+
    
        xml_http_request(request_method, action, parameters = nil, session = nil, flash = nil)
    
      This method is also aliased as
      xhr
    
    
    
         # File vendor/rails/actionpack/lib/action_controller/test_process.rb, line 397
    397:     def xml_http_request(request_method, action, parameters = nil, session = nil, flash = nil)
    398:       @request.env['HTTP_X_REQUESTED_WITH'] = 'XMLHttpRequest'
    399:       @request.env['HTTP_ACCEPT'] = 'text/javascript, text/html, application/xml, text/xml, */*'
    400:       returning send!(request_method, action, parameters, session, flash) do
    401:         @request.env.delete 'HTTP_X_REQUESTED_WITH'
    402:         @request.env.delete 'HTTP_ACCEPT'
    403:       end
    404:     end
    
    
  :uri: http://api.rubyonrails.org/classes/ActionController/TestProcess.html#M000191
- :tinyuri: http://tinyurl.com/42545s
  :path: 
  - ActionController
  - AbstractRequest
  :method: xml_http_request?
  :description: "\n  \n    xml_http_request?()\n  \n  \n  \n\
    Returns true if the request\xE2\x80\x98s \"X-Requested-With\" header\n\
    contains \"XMLHttpRequest\". (The Prototype Javascript library\n\
    120:     def xml_http_request?\n\
    121:       !(@env['HTTP_X_REQUESTED_WITH'] !~ /XMLHttpRequest/i)\n\
    122:     end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/ActionController/AbstractRequest.html#M000406
- :tinyuri: http://tinyurl.com/4uerar
  :path: 
  - XmlSimple
  :method: xml_in
  :description: |+
    
        xml_in(string = nil, options = nil)
    This is the functional version of the instance method xml_in.
    
    
    
         # File vendor/rails/activesupport/lib/active_support/vendor/xml-simple-1.0.11/xmlsimple.rb, line 201
    201:   def XmlSimple.xml_in(string = nil, options = nil)
    202:     xml_simple = XmlSimple.new
    203:     xml_simple.xml_in(string, options)
    204:   end
    
    
  :uri: http://api.rubyonrails.org/classes/XmlSimple.html#M000113
- :tinyuri: http://tinyurl.com/3s2n4k
  :path: 
  - XmlSimple
  :method: xml_in
  :description: 
  :uri: http://api.rubyonrails.org/classes/XmlSimple.html#M000112
- :tinyuri: http://tinyurl.com/4ncd9j
  :path: 
  - XmlSimple
  :method: xml_in_string
  :description: |+
    
        xml_in_string(string, options = nil)
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/hash/conversions.rb, line 23
    23:   def self.xml_in_string(string, options = nil)
    24:     new.xml_in_string(string, options)
    25:   end
    
    
  :uri: http://api.rubyonrails.org/classes/XmlSimple.html#M000110
- :tinyuri: http://tinyurl.com/497z73
  :path: 
  - XmlSimple
  :method: xml_in_string
  :description: "\n  \n    xml_in_string(string, options = nil)\n  \n  \n  \n\
    Same as xml_in but doesn\xE2\x80\x98t try\n\
    10:   def xml_in_string(string, options = nil)\n\
    11:     handle_options('in', options)\n\
    12: \n\
    13:     @doc = parse(string)\n\
    14:     result = collapse(@doc.root)\n\
    15: \n\
    16:     if @options['keeproot']\n\
    17:       merge({}, @doc.root.name, result)\n\
    18:     else\n\
    19:       result\n\
    20:     end\n\
    21:   end\n\n  \n\n"
  :uri: http://api.rubyonrails.org/classes/XmlSimple.html#M000109
- :tinyuri: http://tinyurl.com/49tecc
  :path: 
  - XmlSimple
  :method: xml_out
  :description: 
  :uri: http://api.rubyonrails.org/classes/XmlSimple.html#M000114
- :tinyuri: http://tinyurl.com/3soj9t
  :path: 
  - XmlSimple
  :method: xml_out
  :description: |+
    
        xml_out(hash, options = nil)
    This is the functional version of the instance method xml_out.
    
    
    
         # File vendor/rails/activesupport/lib/active_support/vendor/xml-simple-1.0.11/xmlsimple.rb, line 257
    257:   def XmlSimple.xml_out(hash, options = nil)
    258:     xml_simple = XmlSimple.new
    259:     xml_simple.xml_out(hash, options)
    260:   end
    
    
  :uri: http://api.rubyonrails.org/classes/XmlSimple.html#M000115
- :tinyuri: http://tinyurl.com/4oy9es
  :path: 
  - ActiveSupport
  - CoreExtensions
  - DateTime
  - Conversions
  :method: xmlschema
  :description: |+
    
        xmlschema()
    Converts datetime to an appropriate format for use in XML
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/date_time/conversions.rb, line 68
    68:         def xmlschema
    69:           strftime("%Y-%m-%dT%H:%M:%S%Z")
    70:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/DateTime/Conversions.html#M000721
- :tinyuri: http://tinyurl.com/4gvsdk
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Date
  - Conversions
  :method: xmlschema
  :description: |+
    
        xmlschema()
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/date/conversions.rb, line 92
    92:         def xmlschema
    93:           to_time.xmlschema
    94:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Date/Conversions.html#M000678
- :tinyuri: http://tinyurl.com/4v3ng3
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Numeric
  - Time
  :method: year
  :description: |
    
        year()
    Alias for years
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Numeric/Time.html#M000653
- :tinyuri: http://tinyurl.com/3z4eoh
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Numeric
  - Time
  :method: years
  :description: |+
    
        years()
    
      This method is also aliased as
      year
    
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/numeric/time.rb, line 68
    68:         def years
    69:           ActiveSupport::Duration.new(self * 365.25.days, [[:years, self]])
    70:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Numeric/Time.html#M000652
- :tinyuri: http://tinyurl.com/3w99rx
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Calculations
  :method: years_ago
  :description: |+
    
        years_ago(years)
    Returns a new Time representing the time a number of specified years ago
    
    
    
         # File vendor/rails/activesupport/lib/active_support/core_ext/time/calculations.rb, line 112
    112:         def years_ago(years)
    113:           advance(:years => -years)
    114:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Calculations.html#M000582
- :tinyuri: http://tinyurl.com/4rzwvw
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Date
  - Calculations
  :method: years_ago
  :description: |+
    
        years_ago(years)
    Returns a new Date/DateTime representing the time a number of specified
    years ago
    
    
    
         # File vendor/rails/activesupport/lib/active_support/core_ext/date/calculations.rb, line 106
    106:         def years_ago(years)
    107:           advance(:years => -years)
    108:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Date/Calculations.html#M000692
- :tinyuri: http://tinyurl.com/4kgzuo
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Calculations
  :method: years_since
  :description: |+
    
        years_since(years)
    Returns a new Time representing the time a number of specified years in the future
    
    
    
         # File vendor/rails/activesupport/lib/active_support/core_ext/time/calculations.rb, line 117
    117:         def years_since(years)
    118:           advance(:years => years)
    119:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Calculations.html#M000583
- :tinyuri: http://tinyurl.com/46bns8
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Date
  - Calculations
  :method: years_since
  :description: |+
    
        years_since(years)
    Returns a new Date/DateTime representing the time a number of specified
    years in the future
    
    
    
         # File vendor/rails/activesupport/lib/active_support/core_ext/date/calculations.rb, line 111
    111:         def years_since(years)
    112:           advance(:years => years)
    113:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Date/Calculations.html#M000693
- :tinyuri: http://tinyurl.com/5ylex7
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Date
  - Calculations
  - ClassMethods
  :method: yesterday
  :description: |+
    
        yesterday()
    
    
        # File vendor/rails/activesupport/lib/active_support/core_ext/date/calculations.rb, line 19
    19:           def yesterday
    20:             ::Date.today.yesterday
    21:           end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Date/Calculations/ClassMethods.html#M000712
- :tinyuri: http://tinyurl.com/3gc2wf
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Date
  - Calculations
  :method: yesterday
  :description: |+
    
        yesterday()
    Convenience method which returns a new Date/DateTime representing the time
    1 day ago
    
    
    
         # File vendor/rails/activesupport/lib/active_support/core_ext/date/calculations.rb, line 177
    177:         def yesterday
    178:           self - 1
    179:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Date/Calculations.html#M000710
- :tinyuri: http://tinyurl.com/3nehxn
  :path: 
  - ActiveSupport
  - CoreExtensions
  - Time
  - Calculations
  :method: yesterday
  :description: |+
    
        yesterday()
    Convenience method which returns a new Time representing the time 1 day ago
    
    
    
         # File vendor/rails/activesupport/lib/active_support/core_ext/time/calculations.rb, line 197
    197:         def yesterday
    198:           self.ago(1.day)
    199:         end
    
    
  :uri: http://api.rubyonrails.org/classes/ActiveSupport/CoreExtensions/Time/Calculations.html#M000605
- :tinyuri: http://tinyurl.com/44jc36
  :path: 
  - Builder
  - CSS
  :method: "|"
  :description: |+
    
        |(part)
    
    
         # File vendor/rails/activesupport/lib/active_support/vendor/builder-2.1.2/builder/css.rb, line 123
    123:     def |(part)
    124:       _join_with_op! ','
    125:       self
    126:     end
    
    
  :uri: http://api.rubyonrails.org/classes/Builder/CSS.html#M000900
